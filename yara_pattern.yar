import "elf"
    
private global rule SizeLimit
{
    condition:
        filesize < 10MB
}

rule coreutils {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "["
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /\[/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python {
    meta:
        app_name = "python"
        type = "1"
        target = "_asyncio.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_asyncio.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_1 {
    meta:
        app_name = "python"
        type = "1"
        target = "_asyncio.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_asyncio.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cairo {
    meta:
        app_name = "cairo"
        type = "1"
        target = "_cairo.cpython-38-aarch64-linux-gnu"
        pattern = "pycairo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pycairo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_cairo.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptography {
    meta:
        app_name = "cryptography"
        type = "1"
        target = "_constant_time.abi3"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_constant_time.abi3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "_copyright"
        pattern = "_copyright.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /_copyright.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_copyright/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_1 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "_copyright"
        pattern = "strongSwan (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strongSwan (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_copyright/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_2 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ctypes"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ctypes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_3 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ctypes.cpython-38-aarch64-linux-gnu"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ctypes.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_4 {
    meta:
        app_name = "python"
        type = "1"
        target = "_curses"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_curses.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_5 {
    meta:
        app_name = "python"
        type = "1"
        target = "_curses_panel"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_curses_panel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_6 {
    meta:
        app_name = "python"
        type = "1"
        target = "_decimal.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_decimal.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_7 {
    meta:
        app_name = "python"
        type = "1"
        target = "_decimal.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_decimal.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme {
    meta:
        app_name = "gpgme"
        type = "1"
        target = "_gpgme.cpython-310-aarch64-linux-gnu"
        pattern = "gpgme (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpgme (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_gpgme.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_1 {
    meta:
        app_name = "gpgme"
        type = "1"
        target = "_gpgme.cpython-35m-arm-linux-gnueabihf"
        pattern = "gpgme (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpgme (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_gpgme.cpython-35m-arm-linux-gnueabihf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_2 {
    meta:
        app_name = "gpgme"
        type = "1"
        target = "_gpgme.cpython-38-aarch64-linux-gnu"
        pattern = "gpgme (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpgme (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_gpgme.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcomps {
    meta:
        app_name = "libcomps"
        type = "1"
        target = "_libpycomps"
        pattern = "libcomps\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libcomps\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_libpycomps.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule librepo {
    meta:
        app_name = "librepo"
        type = "1"
        target = "_librepo"
        pattern = "librepo/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /librepo\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_librepo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptography_1 {
    meta:
        app_name = "cryptography"
        type = "1"
        target = "_openssl.abi3"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_openssl.abi3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptography_2 {
    meta:
        app_name = "cryptography"
        type = "1"
        target = "_padding.abi3"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_padding.abi3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_8 {
    meta:
        app_name = "python"
        type = "1"
        target = "_sha3.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_sha3.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_9 {
    meta:
        app_name = "python"
        type = "1"
        target = "_sha3.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_sha3.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_10 {
    meta:
        app_name = "python"
        type = "1"
        target = "_sqlite3.cpython-38-aarch64-linux-gnu"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_sqlite3.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_11 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ssl"
        pattern = "python/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ssl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_12 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ssl.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ssl.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_13 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ssl.cpython-35m-arm-linux-gnueabihf"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ssl.cpython-35m-arm-linux-gnueabihf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_14 {
    meta:
        app_name = "python"
        type = "1"
        target = "_ssl.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_ssl.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_15 {
    meta:
        app_name = "python"
        type = "1"
        target = "_testcapi.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_testcapi.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_16 {
    meta:
        app_name = "python"
        type = "1"
        target = "_testinternalcapi.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /_testinternalcapi.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib {
    meta:
        app_name = "glib"
        type = "2"
        target = "1bit-mutex"
        pattern = "glib-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /glib-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /1bit-mutex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd {
    meta:
        app_name = "systemd"
        type = "2"
        target = "30-systemd-environment-d-generator"
        pattern = "30-systemd-environment-d-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /30-systemd-environment-d-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /30-systemd-environment-d-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_1 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "30-systemd-environment-d-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /30-systemd-environment-d-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_1 {
    meta:
        app_name = "glib"
        type = "2"
        target = "642026"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /642026/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_2 {
    meta:
        app_name = "glib"
        type = "2"
        target = "642026-ec"
        pattern = "glib-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /glib-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /642026-ec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-addr2line"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-addr2line/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_1 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-ar"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-ar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_2 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-as"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-as/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_3 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-c++filt"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-c\+\+filt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-cpp"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-cpp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_4 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-dwp"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-dwp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_5 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-elfedit"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-elfedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_1 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcc"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_2 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcc-ar"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcc-ar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_3 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcc-nm"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcc-nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_4 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcc-ranlib"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcc-ranlib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_5 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcov"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcov/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_6 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcov-dump"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcov-dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_7 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "aarch64-agl-linux-gcov-tool"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gcov-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_6 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-gprof"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-gprof/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_7 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-ld"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-ld/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_8 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-ld.bfd"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-ld.bfd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_9 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-ld.gold"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-ld.gold/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_10 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-nm"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_11 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-objcopy"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-objcopy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_12 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-objdump"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-objdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_13 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-ranlib"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-ranlib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_14 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-readelf"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-readelf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_15 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-size"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-size/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_16 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-strings"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-strings/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_17 {
    meta:
        app_name = "binutils"
        type = "2"
        target = "aarch64-agl-linux-strip"
        pattern = "\\(GNU Binutils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU Binutils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aarch64-agl-linux-strip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl {
    meta:
        app_name = "openssl"
        type = "2"
        target = "aborttest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aborttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "accept"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /accept/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace {
    meta:
        app_name = "strace"
        type = "2"
        target = "accept"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /accept/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_1 {
    meta:
        app_name = "strace"
        type = "2"
        target = "accept4"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /accept4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_2 {
    meta:
        app_name = "strace"
        type = "2"
        target = "acct"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /acct/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_3 {
    meta:
        app_name = "glib"
        type = "2"
        target = "accumulator"
        pattern = "glib-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /glib-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /accumulator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_4 {
    meta:
        app_name = "glib"
        type = "2"
        target = "actions"
        pattern = "glib-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /glib-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /actions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_3 {
    meta:
        app_name = "strace"
        type = "2"
        target = "add_key"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /add_key/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "addpart"
        pattern = "addpart.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /addpart.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /addpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_1 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "addpart"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /addpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "addr2line"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /addr2line/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_1 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "addrcfi"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /addrcfi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_2 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "addrscopes"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /addrscopes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_4 {
    meta:
        app_name = "strace"
        type = "2"
        target = "adjtimex"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /adjtimex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle {
    meta:
        app_name = "nettle"
        type = "2"
        target = "aes-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aes-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_1 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "aesgcmtest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aesgcmtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_2 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "afalg"
        pattern = "afalg.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /afalg.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /afalg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_3 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "afalgtest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /afalgtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_2 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "agetty"
        pattern = "agetty.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /agetty.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /agetty/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_3 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "agetty"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /agetty/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_3 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "aggregate_size"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aggregate_size/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_5 {
    meta:
        app_name = "strace"
        type = "2"
        target = "aio"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_6 {
    meta:
        app_name = "strace"
        type = "2"
        target = "aio_pgetevents"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aio_pgetevents/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_4 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "algorithmid_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /algorithmid_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lzo {
    meta:
        app_name = "lzo"
        type = "2"
        target = "align"
        pattern = "lzo-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /lzo-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /align/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_4 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "all-dwarf-ranges"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /all-dwarf-ranges/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_5 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "allregs"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /allregs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa {
    meta:
        app_name = "alsa"
        type = "2"
        target = "alsactl"
        pattern = "alsactl version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsactl version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /alsactl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_1 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "alsamixer"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /alsamixer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_2 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "alsatplg"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /alsatplg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_3 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "alsaucm"
        pattern = "version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /alsaucm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_4 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "amidi"
        pattern = "amidi version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /amidi version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /amidi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_5 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "amixer"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /amixer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "animation"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /animation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_1 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "anonfm"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /anonfm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule http_server {
    meta:
        app_name = "http_server"
        type = "2"
        target = "apache2"
        pattern = "Apache/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /Apache\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /apache2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl {
    meta:
        app_name = "perl"
        type = "1"
        target = "APItest"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /APItest.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_6 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "aplay"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aplay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_7 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "aplaymidi"
        pattern = "aplaymidi version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /aplaymidi version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aplaymidi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule apparmor {
    meta:
        app_name = "apparmor"
        type = "2"
        target = "apparmor_parser"
        pattern = "version ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /apparmor_parser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_5 {
    meta:
        app_name = "glib"
        type = "2"
        target = "appinfo-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /appinfo-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_6 {
    meta:
        app_name = "glib"
        type = "2"
        target = "appmonitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /appmonitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_7 {
    meta:
        app_name = "glib"
        type = "2"
        target = "apps"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /apps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_1 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "arcfour-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /arcfour-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_1 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "arch"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /arch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_2 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "arch.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /arch.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_2 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "arctwo-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /arctwo-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_8 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "arecordmidi"
        pattern = "arecordmidi version (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /arecordmidi version (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /arecordmidi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa {
    meta:
        app_name = "mesa"
        type = "1"
        target = "armada-drm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /armada-drm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_17 {
    meta:
        app_name = "python"
        type = "1"
        target = "array"
        pattern = "python/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /array.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_18 {
    meta:
        app_name = "python"
        type = "1"
        target = "array.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /array.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_19 {
    meta:
        app_name = "python"
        type = "1"
        target = "array.cpython-35m-arm-linux-gnueabihf"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /array.cpython-35m-arm-linux-gnueabihf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_20 {
    meta:
        app_name = "python"
        type = "1"
        target = "array.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /array.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_9 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "aseqdump"
        pattern = "aseqdump version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /aseqdump version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aseqdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_10 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "aseqnet"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aseqnet/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_6 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst1"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_7 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst2"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_8 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst3"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_9 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst4"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_10 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst5"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst5/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_11 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst6"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst6/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_12 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst7"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst7/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_13 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst8"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst8/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_14 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "asm-tst9"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asm-tst9/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_5 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1-test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_6 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_decode_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_decode_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_7 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_dsa_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_dsa_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_8 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_encode_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_encode_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_9 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_10 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_string_table_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_string_table_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_11 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1_time_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1_time_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_12 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asn1parse-test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asn1parse-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_8 {
    meta:
        app_name = "glib"
        type = "2"
        target = "assert-msg-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /assert-msg-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_9 {
    meta:
        app_name = "glib"
        type = "2"
        target = "async-close-output-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /async-close-output-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_10 {
    meta:
        app_name = "glib"
        type = "2"
        target = "async-splice-output-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /async-splice-output-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_13 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "asynciotest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asynciotest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_11 {
    meta:
        app_name = "glib"
        type = "2"
        target = "asyncqueue"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asyncqueue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_12 {
    meta:
        app_name = "glib"
        type = "2"
        target = "asyncqueue-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /asyncqueue-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_7 {
    meta:
        app_name = "strace"
        type = "2"
        target = "at_fdcwd-pathmax"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /at_fdcwd-pathmax/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_2 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "ata_id"
        pattern = "ata_id.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ata_id.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ata_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_13 {
    meta:
        app_name = "glib"
        type = "2"
        target = "atomic-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /atomic-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_2 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "attach"
        pattern = "nspr-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nspr-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_8 {
    meta:
        app_name = "strace"
        type = "2"
        target = "attach-f-p"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attach-f-p/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_9 {
    meta:
        app_name = "strace"
        type = "2"
        target = "attach-f-p-cmd"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attach-f-p-cmd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_10 {
    meta:
        app_name = "strace"
        type = "2"
        target = "attach-p-cmd-cmd"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attach-p-cmd-cmd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_11 {
    meta:
        app_name = "strace"
        type = "2"
        target = "attach-p-cmd-p"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attach-p-cmd-p/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_1 {
    meta:
        app_name = "perl"
        type = "1"
        target = "attributes"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /attributes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit {
    meta:
        app_name = "audit"
        type = "2"
        target = "audispd"
        pattern = "audispd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /audispd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /audispd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo {
    meta:
        app_name = "sudo"
        type = "1"
        target = "audit_json"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /audit_json.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_1 {
    meta:
        app_name = "audit"
        type = "2"
        target = "auditctl"
        pattern = "auditctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /auditctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /auditctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_audit {
    meta:
        app_name = "linux_audit"
        type = "2"
        target = "auditctl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /auditctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_2 {
    meta:
        app_name = "audit"
        type = "2"
        target = "auditd"
        pattern = "auditd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /auditd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /auditd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_audit_1 {
    meta:
        app_name = "linux_audit"
        type = "2"
        target = "auditd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /auditd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_3 {
    meta:
        app_name = "audit"
        type = "2"
        target = "aulast"
        pattern = "aulast.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /aulast.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aulast/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_4 {
    meta:
        app_name = "audit"
        type = "2"
        target = "aulastlog"
        pattern = "aulastlog.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /aulastlog.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aulastlog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_5 {
    meta:
        app_name = "audit"
        type = "2"
        target = "aureport"
        pattern = "aureport.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /aureport.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aureport/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_audit_2 {
    meta:
        app_name = "linux_audit"
        type = "2"
        target = "aureport"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /aureport/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_6 {
    meta:
        app_name = "audit"
        type = "2"
        target = "ausearch"
        pattern = "ausearch.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ausearch.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ausearch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_audit_3 {
    meta:
        app_name = "linux_audit"
        type = "2"
        target = "ausearch"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ausearch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_7 {
    meta:
        app_name = "audit"
        type = "2"
        target = "ausyscall"
        pattern = "ausyscall.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ausyscall.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ausyscall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_14 {
    meta:
        app_name = "glib"
        type = "2"
        target = "autoptr"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /autoptr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_15 {
    meta:
        app_name = "glib"
        type = "2"
        target = "autoptr-gio"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /autoptr-gio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_8 {
    meta:
        app_name = "audit"
        type = "2"
        target = "autrace"
        pattern = "autrace.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /autrace.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /autrace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_9 {
    meta:
        app_name = "audit"
        type = "2"
        target = "auvirt"
        pattern = "auvirt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /auvirt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /auvirt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi {
    meta:
        app_name = "avahi"
        type = "2"
        target = "avahi-daemon"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /avahi-daemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "avcstat"
        pattern = "avcstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /avcstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /avcstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez {
    meta:
        app_name = "bluez"
        type = "2"
        target = "avinfo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /avinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_1 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "avtest"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /avtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_11 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "axfer"
        pattern = "alsa-utils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-utils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /axfer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_2 {
    meta:
        app_name = "perl"
        type = "1"
        target = "B"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /B.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_3 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "b2sum"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /b2sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_14 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "b2sumbad_dtls_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /b2sumbad_dtls_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_15 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "backtrace"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /backtrace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_16 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "backtrace-child"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /backtrace-child/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_15 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bad_dtls_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bad_dtls_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "badblocks"
        pattern = "badblocks.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /badblocks.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /badblocks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_3 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "base16-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /base16-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_4 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "base32"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /base32/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_5 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "base32.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /base32.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_3 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Base64"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Base64.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_4 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "base64-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /base64-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_6 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "base64.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /base64.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_7 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "basename.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /basename.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_8 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "basenc"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /basenc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bash {
    meta:
        app_name = "bash"
        type = "2"
        target = "bash"
        pattern = "Bash version ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /Bash version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bash_1 {
    meta:
        app_name = "bash"
        type = "2"
        target = "bash.bash"
        pattern = "Bash version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Bash version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bash.bash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_16 {
    meta:
        app_name = "glib"
        type = "2"
        target = "basic-application"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /basic-application/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bc {
    meta:
        app_name = "bc"
        type = "2"
        target = "bc"
        pattern = "bc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bc_1 {
    meta:
        app_name = "bc"
        type = "2"
        target = "bc.bc"
        pattern = "bc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bc.bc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_2 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "bccmd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bccmd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_5 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "bcrypt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bcrypt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_16 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bftest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bftest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_3 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "bigfile"
        pattern = "nspr-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nspr-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bigfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clutter {
    meta:
        app_name = "clutter"
        type = "2"
        target = "bin-layout"
        pattern = "clutter-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /clutter-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bin-layout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_17 {
    meta:
        app_name = "glib"
        type = "2"
        target = "binding"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /binding/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_18 {
    meta:
        app_name = "glib"
        type = "2"
        target = "bindinggroup"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bindinggroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_17 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_callback_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_callback_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_18 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_core_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_core_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_19 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_enc_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_enc_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_20 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_memleak_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_memleak_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_21 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_prefix_text"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_prefix_text/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_22 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bio_readbuffer_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bio_readbuffer_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_23 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bioprinttest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bioprinttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bison {
    meta:
        app_name = "bison"
        type = "2"
        target = "bison"
        pattern = "bison-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bison-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bison/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_4 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkdiscard"
        pattern = "blkdiscard.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blkdiscard.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkdiscard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_5 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkdiscard"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkdiscard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_6 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkid"
        pattern = "blkid.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blkid.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_7 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkid"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_8 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkid.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkid.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blktrace {
    meta:
        app_name = "blktrace"
        type = "2"
        target = "blkparse"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkparse/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_9 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkzone"
        pattern = "blkzone.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blkzone.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkzone/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_10 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blkzone"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blkzone/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_12 {
    meta:
        app_name = "strace"
        type = "2"
        target = "block_reset_raise_run"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /block_reset_raise_run/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_13 {
    meta:
        app_name = "strace"
        type = "2"
        target = "block_reset_run"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /block_reset_run/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_11 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blockdev"
        pattern = "blockdev.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blockdev.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blockdev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_12 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blockdev"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blockdev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_13 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "blockdev.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blockdev.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog {
    meta:
        app_name = "blog"
        type = "2"
        target = "blogctl"
        pattern = "blogctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blogctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blogctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog_1 {
    meta:
        app_name = "blog"
        type = "2"
        target = "blogd"
        pattern = "blogd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blogd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blogd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog_2 {
    meta:
        app_name = "blog"
        type = "2"
        target = "blogger"
        pattern = "blogger.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /blogger.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blogger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_6 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "blowfish-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /blowfish-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss {
    meta:
        app_name = "nss"
        type = "2"
        target = "bltest"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bltest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_3 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "bluemoon"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bluemoon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_4 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "bluetoothctl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bluetoothctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_5 {
    meta:
        app_name = "bluez"
        type = "1"
        target = "bluetoothd"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bluetoothd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_24 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bn_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bn_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_25 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bndiv-test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bndiv-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_6 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "bneptest"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bneptest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_26 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "bntest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bntest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_19 {
    meta:
        app_name = "glib"
        type = "2"
        target = "bookmarkfile"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bookmarkfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_3 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "bootctl"
        pattern = "bootctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /bootctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bootctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clutter_1 {
    meta:
        app_name = "clutter"
        type = "2"
        target = "box-layout"
        pattern = "clutter-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /clutter-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /box-layout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_14 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_15 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-obj_get_info_by_fd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-obj_get_info_by_fd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_16 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-obj_get_info_by_fd-prog"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-obj_get_info_by_fd-prog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_17 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-obj_get_info_by_fd-prog-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-obj_get_info_by_fd-prog-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_18 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-obj_get_info_by_fd-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-obj_get_info_by_fd-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_19 {
    meta:
        app_name = "strace"
        type = "1"
        target = "bpf-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-success.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_20 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-success-long-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-success-long-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_21 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-success-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_22 {
    meta:
        app_name = "strace"
        type = "2"
        target = "bpf-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bpf-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bridge_utils {
    meta:
        app_name = "bridge-utils"
        type = "2"
        target = "brctl"
        pattern = "brctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /brctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /brctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bridge_utils_1 {
    meta:
        app_name = "bridge-utils"
        type = "2"
        target = "brctl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /brctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "bridge"
        pattern = "bridge.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /bridge.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bridge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule brotli {
    meta:
        app_name = "brotli"
        type = "2"
        target = "brotli"
        pattern = "brotli/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /brotli\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /brotli/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libarchive {
    meta:
        app_name = "libarchive"
        type = "2"
        target = "bsdcat"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bsdcat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libarchive_1 {
    meta:
        app_name = "libarchive"
        type = "2"
        target = "bsdtar"
        pattern = "libarchive-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libarchive-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bsdtar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_7 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "btattach"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /btattach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_8 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "btgatt-client"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /btgatt-client/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_9 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "btmon"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /btmon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_7 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "buffer-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /buffer-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_20 {
    meta:
        app_name = "glib"
        type = "2"
        target = "buffered-input-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /buffered-input-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_21 {
    meta:
        app_name = "glib"
        type = "2"
        target = "buffered-output-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /buffered-output-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_4 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "busctl"
        pattern = "busctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /busctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /busctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule busybox {
    meta:
        app_name = "busybox"
        type = "2"
        target = "busybox"
        pattern = "BusyBox v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /BusyBox v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /busybox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule busybox_1 {
    meta:
        app_name = "busybox"
        type = "2"
        target = "busybox.nosuid"
        pattern = "BusyBox v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /BusyBox v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /busybox.nosuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule busybox_2 {
    meta:
        app_name = "busybox"
        type = "2"
        target = "busybox.suid"
        pattern = "BusyBox v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /BusyBox v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /busybox.suid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_4 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Byte"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Byte.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_22 {
    meta:
        app_name = "glib"
        type = "2"
        target = "bytes"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bytes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bzip2 {
    meta:
        app_name = "bzip2"
        type = "2"
        target = "bzip2"
        pattern = "bzip2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bzip2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bzip2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_5 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Bzip2"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Bzip2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bzip2_1 {
    meta:
        app_name = "bzip2"
        type = "2"
        target = "bzip2recover"
        pattern = "bzip2recover (([0-9]+\\.){1,}[0-9]+):"

    strings:
        $pattern = /bzip2recover (([0-9]{1,4}\.){1,}[0-9]{1,4}):/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /bzip2recover/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_23 {
    meta:
        app_name = "glib"
        type = "2"
        target = "cache"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cache/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "cachegrind-amd64-linux"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cachegrind-amd64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_1 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "cachegrind-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cachegrind-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_14 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "cal"
        pattern = "cal.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /cal.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_15 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "cal"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_16 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "cal.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cal.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_6 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Call"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Call.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_2 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "callgrind-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /callgrind-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_8 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "camellia-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /camellia-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_24 {
    meta:
        app_name = "glib"
        type = "2"
        target = "cancellable"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cancellable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_27 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "capi"
        pattern = "capi.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /capi.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /capi.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_23 {
    meta:
        app_name = "strace"
        type = "2"
        target = "caps"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /caps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_24 {
    meta:
        app_name = "strace"
        type = "2"
        target = "caps-abbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /caps-abbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_9 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "cast128-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cast128-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_28 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "casttest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /casttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_9 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cat"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_10 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cat.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cat.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_10 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "cbc-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cbc-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_8 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "cc1"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cc1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_9 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "cc1plus"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cc1plus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_11 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ccm-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ccm-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_5 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "cdrom_id"
        pattern = "cdrom_id.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /cdrom_id.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cdrom_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_1 {
    meta:
        app_name = "nss"
        type = "2"
        target = "certcgi"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /certcgi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_12 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "cfb-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cfb-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_17 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "cfdisk"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cfdisk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_13 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "chacha-poly1305-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chacha-poly1305-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_14 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "chacha-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chacha-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_29 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "chacha_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chacha_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chage"
        pattern = "chage.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chage.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_1 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chage"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_2 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "charon"
        pattern = "charon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /charon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /charon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_3 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "charon"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /charon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_4 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "charon-systemd"
        pattern = "charon-systemd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /charon-systemd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /charon-systemd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_5 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "charon-systemd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /charon-systemd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_25 {
    meta:
        app_name = "glib"
        type = "2"
        target = "charset"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /charset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_1 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "chattr"
        pattern = "chattr.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chattr.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_2 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "chattr"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_3 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "chattr.e2fsprogs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chattr.e2fsprogs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_11 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chcon"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chcon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_12 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chcon.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chcon.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_18 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chcpu"
        pattern = "chcpu.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chcpu.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chcpu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_19 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chcpu"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chcpu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_25 {
    meta:
        app_name = "strace"
        type = "2"
        target = "check_sigblock"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /check_sigblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_26 {
    meta:
        app_name = "strace"
        type = "2"
        target = "check_sigign"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /check_sigign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "checkproc"
        pattern = "checkproc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /checkproc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /checkproc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_26 {
    meta:
        app_name = "glib"
        type = "2"
        target = "checksum"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /checksum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_2 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chfn"
        pattern = "chfn.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chfn.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chfn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_3 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chfn.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chfn.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_20 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chfn.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chfn.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_4 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chgpasswd"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chgpasswd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_13 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chgrp.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chgrp.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule permissions {
    meta:
        app_name = "permissions"
        type = "2"
        target = "chkstat"
        pattern = "chkstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chkstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chkstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_21 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chmem"
        pattern = "chmem.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chmem.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chmem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_22 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chmem"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chmem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_14 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chmod.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chmod.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_23 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "choom"
        pattern = "choom.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /choom.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /choom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_24 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "choom"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /choom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_15 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chown.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chown.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_5 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chpasswd"
        pattern = "chpasswd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chpasswd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chpasswd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_6 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chpasswd.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chpasswd.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent {
    meta:
        app_name = "libevent"
        type = "2"
        target = "chromium-bin"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-stable"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chromium-bin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule chrony {
    meta:
        app_name = "chrony"
        type = "2"
        target = "chronyd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chronyd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_16 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "chroot.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chroot.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_25 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chrp-addnote"
        pattern = "chrp-addnote.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chrp-addnote.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chrp-addnote/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_26 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chrt"
        pattern = "chrt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chrt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chrt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_27 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chrt"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chrt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_28 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "chrt.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chrt.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_7 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chsh"
        pattern = "chsh.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /chsh.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chsh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_8 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "chsh.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chsh.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd {
    meta:
        app_name = "kbd"
        type = "2"
        target = "chvt.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /chvt.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "cifsiostat"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cifsiostat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_30 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cipher_overhead_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cipher_overhead_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_31 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cipherbytes_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cipherbytes_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_32 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cipherlist_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cipherlist_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_33 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ciphername_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ciphername_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_17 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cksum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cksum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_18 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cksum.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cksum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clamav {
    meta:
        app_name = "clamav"
        type = "2"
        target = "clamscan"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clamscan/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext {
    meta:
        app_name = "gettext"
        type = "2"
        target = "cldr-plurals"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cldr-plurals/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "clear"
        pattern = "clear.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /clear.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clear/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_34 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "clienthellotest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clienthellotest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_27 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clock_adjtime"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clock_adjtime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_28 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clock_nanosleep"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clock_nanosleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_29 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clock_xettime"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clock_xettime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_30 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone-flags"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone-flags/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_31 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_32 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_33 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_34 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_35 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_36 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_37 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_38 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone3-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone3-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_39 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_parent"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_parent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_40 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_parent-q"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_parent-q/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_41 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_parent-qq"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_parent-qq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_42 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_ptrace"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_ptrace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_43 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_ptrace--quiet-attach"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_ptrace--quiet-attach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_44 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_ptrace--quiet-exit"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_ptrace--quiet-exit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_45 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_ptrace-q"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_ptrace-q/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_46 {
    meta:
        app_name = "strace"
        type = "2"
        target = "clone_ptrace-qq"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /clone_ptrace-qq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_47 {
    meta:
        app_name = "strace"
        type = "2"
        target = "close_range"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /close_range/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_27 {
    meta:
        app_name = "glib"
        type = "2"
        target = "closure"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /closure/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_28 {
    meta:
        app_name = "glib"
        type = "2"
        target = "closure-refcount"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /closure-refcount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_4 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "cltsrv"
        pattern = "nspr-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nspr-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cltsrv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_15 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "cmac-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmac-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_35 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmactest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmactest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule diffutils {
    meta:
        app_name = "diffutils"
        type = "2"
        target = "cmp"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_36 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp-test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule diffutils_1 {
    meta:
        app_name = "diffutils"
        type = "2"
        target = "cmp.diffutils"
        pattern = "diffutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /diffutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp.diffutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_37 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_asn_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_asn_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_38 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_client_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_client_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_39 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_ctx_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_ctx_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_40 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_hdr_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_hdr_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_41 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_msg_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_msg_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_42 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_protect_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_protect_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_43 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_server_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_server_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_44 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_status_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_status_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_45 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmp_vfy_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmp_vfy_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_46 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cms-test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cms-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_47 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "cmsapitest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cmsapitest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_7 {
    meta:
        app_name = "perl"
        type = "1"
        target = "CN"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /CN.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_16 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "cnd-memcpy-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cnd-memcpy-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_29 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "col"
        pattern = "col.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /col.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /col/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_30 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "col"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /col/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_31 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "colcrt"
        pattern = "colcrt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /colcrt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /colcrt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_32 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "colcrt"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /colcrt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_29 {
    meta:
        app_name = "glib"
        type = "2"
        target = "collate"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /collate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_8 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Collate"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Collate.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_6 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "collect"
        pattern = "collect.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /collect.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /collect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_10 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "collect2"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /collect2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_33 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "colrm"
        pattern = "colrm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /colrm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /colrm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_34 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "colrm"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /colrm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_35 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "column"
        pattern = "column.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /column.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /column/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_36 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "column"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /column/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_19 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "comm"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /comm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_20 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "comm.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /comm.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_30 {
    meta:
        app_name = "glib"
        type = "2"
        target = "completion"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /completion/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_31 {
    meta:
        app_name = "glib"
        type = "2"
        target = "completion-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /completion-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland {
    meta:
        app_name = "wayland"
        type = "2"
        target = "compositor-introspection-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /compositor-introspection-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_5 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "concur"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /concur/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_32 {
    meta:
        app_name = "glib"
        type = "2"
        target = "cond"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cond/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_48 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "conf-test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /conf-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_49 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "conf_include_test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /conf_include_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_1 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "connection-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /connection-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman {
    meta:
        app_name = "connman"
        type = "2"
        target = "connmand"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /connmand/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule conntrack_tools {
    meta:
        app_name = "conntrack-tools"
        type = "2"
        target = "conntrackd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /conntrackd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_50 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "constant_time_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /constant_time_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_33 {
    meta:
        app_name = "glib"
        type = "2"
        target = "contenttype"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /contenttype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_51 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "context_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /context_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_34 {
    meta:
        app_name = "glib"
        type = "2"
        target = "contexts"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /contexts/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_35 {
    meta:
        app_name = "glib"
        type = "2"
        target = "convert"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /convert/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_36 {
    meta:
        app_name = "glib"
        type = "2"
        target = "converter-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /converter-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_48 {
    meta:
        app_name = "strace"
        type = "2"
        target = "copy_file_range"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /copy_file_range/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_49 {
    meta:
        app_name = "strace"
        type = "2"
        target = "count-f"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /count-f/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_21 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cp.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cp.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cpio {
    meta:
        app_name = "cpio"
        type = "2"
        target = "cpio.cpio"
        pattern = "cpio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cpio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cpio.cpio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cracklib {
    meta:
        app_name = "cracklib"
        type = "2"
        target = "cracklib-check"
        pattern = "cracklib-check.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /cracklib-check.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cracklib-check/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cracklib_1 {
    meta:
        app_name = "cracklib"
        type = "2"
        target = "cracklib-packer"
        pattern = "cracklib-packer.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /cracklib-packer.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cracklib-packer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cracklib_2 {
    meta:
        app_name = "cracklib"
        type = "2"
        target = "cracklib-unpacker"
        pattern = "cracklib-unpacker.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /cracklib-unpacker.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cracklib-unpacker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_37 {
    meta:
        app_name = "glib"
        type = "2"
        target = "credentials"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /credentials/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_52 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "crl-test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /crl-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_53 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "crltest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /crltest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cronie {
    meta:
        app_name = "cronie"
        type = "2"
        target = "crond"
        pattern = "cronie-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cronie-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /crond/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup {
    meta:
        app_name = "cryptsetup"
        type = "2"
        target = "cryptsetup"
        pattern = "cryptsetup (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cryptsetup (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cryptsetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup_1 {
    meta:
        app_name = "cryptsetup"
        type = "2"
        target = "cryptsetup-reencrypt"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cryptsetup-reencrypt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_22 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "csplit"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /csplit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_23 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "csplit.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /csplit.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcroco {
    meta:
        app_name = "libcroco"
        type = "2"
        target = "csslint-0.6"
        pattern = "libcroco-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libcroco-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /csslint-0.6/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_54 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ct-test"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ct-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_55 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ct_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ct_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_17 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ctr-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ctr-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_37 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ctrlaltdel"
        pattern = "ctrlaltdel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ctrlaltdel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ctrlaltdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_38 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ctrlaltdel"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ctrlaltdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_56 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ctype_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ctype_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule curl {
    meta:
        app_name = "curl"
        type = "2"
        target = "curl"
        pattern = "curl (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /curl (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /curl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_18 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "curve25519-dh-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /curve25519-dh-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_19 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "curve448-dh-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /curve448-dh-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_57 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "curve448_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /curve448_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_24 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cut"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cut/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_25 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "cut.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cut.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_6 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "cvar"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cvar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_1 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "cve-2015-4491"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cve-2015-4491/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_1 {
    meta:
        app_name = "sudo"
        type = "2"
        target = "cvtsudoers"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /cvtsudoers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_9 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Cwd"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Cwd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_58 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "d2i_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /d2i_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_59 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "danetest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /danetest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dash_shell {
    meta:
        app_name = "dash-shell"
        type = "2"
        target = "dash"
        pattern = "dash.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dash.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_60 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "dasync"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dasync.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_38 {
    meta:
        app_name = "glib"
        type = "2"
        target = "data-input-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /data-input-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_39 {
    meta:
        app_name = "glib"
        type = "2"
        target = "data-output-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /data-output-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_40 {
    meta:
        app_name = "glib"
        type = "2"
        target = "dataset"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dataset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_26 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "date"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /date/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_27 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "date.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /date.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_10 {
    meta:
        app_name = "perl"
        type = "1"
        target = "DB_File"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /DB_File.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_41 {
    meta:
        app_name = "glib"
        type = "2"
        target = "dbus-appinfo"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-appinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_glib {
    meta:
        app_name = "dbus-glib"
        type = "2"
        target = "dbus-binding-tool"
        pattern = "dbus-glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-binding-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-cleanup-sockets"
        pattern = "dbus-cleanup-sockets.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-cleanup-sockets.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-cleanup-sockets/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus {
    meta:
        app_name = "d-bus"
        type = "2"
        target = "dbus-cleanup-sockets"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-cleanup-sockets/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_1 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-daemon"
        pattern = "dbus-daemon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-daemon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-daemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus_1 {
    meta:
        app_name = "d-bus"
        type = "2"
        target = "dbus-daemon"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-daemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_2 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-daemon-launch-helper"
        pattern = "dbus-daemon-launch-helper.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-daemon-launch-helper.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-daemon-launch-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_3 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-daemon-launch-helper"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-daemon-launch-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_4 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-daemon-launch-helper-test"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-daemon-launch-helper-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus_2 {
    meta:
        app_name = "d-bus"
        type = "2"
        target = "dbus-launch"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-launch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_5 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-launch.nox11"
        pattern = "dbus-launch.nox11.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-launch.nox11.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-launch.nox11/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus_3 {
    meta:
        app_name = "d-bus"
        type = "2"
        target = "dbus-launch.nox11"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-launch.nox11/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_6 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-monitor"
        pattern = "dbus-monitor.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-monitor.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_7 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-monitor"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_8 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-run-session"
        pattern = "dbus-run-session.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-run-session.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-run-session/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_9 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-run-session"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-run-session/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_10 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-send"
        pattern = "dbus-send.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-send.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-send/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_11 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-send"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-send/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_12 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-test-tool"
        pattern = "dbus-test-tool.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-test-tool.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-test-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_13 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-test-tool"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-test-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_14 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-update-activation-environment"
        pattern = "dbus-update-activation-environment.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-update-activation-environment.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-update-activation-environment/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_15 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "dbus-uuidgen"
        pattern = "dbus-uuidgen.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dbus-uuidgen.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-uuidgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus_4 {
    meta:
        app_name = "d-bus"
        type = "2"
        target = "dbus-uuidgen"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dbus-uuidgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bc_2 {
    meta:
        app_name = "bc"
        type = "2"
        target = "dc.bc"
        pattern = "bc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dc.bc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_28 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dd"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_29 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dd.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dd.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_1 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "deallocvt.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /deallocvt.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm {
    meta:
        app_name = "rpm"
        type = "2"
        target = "debugedit"
        pattern = "debugedit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /debugedit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debugedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_4 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "debugfs"
        pattern = "debugfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /debugfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debugfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_5 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "debugfs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debugfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_17 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "debuginfod"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debuginfod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_18 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "debuginfod-find"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debuginfod-find/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_19 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "debuginfod_build_id_find"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /debuginfod_build_id_find/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_42 {
    meta:
        app_name = "glib"
        type = "2"
        target = "defaultiface"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /defaultiface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_43 {
    meta:
        app_name = "glib"
        type = "2"
        target = "defaultvalue"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /defaultvalue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_61 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "defltfips_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /defltfips_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_50 {
    meta:
        app_name = "strace"
        type = "2"
        target = "delay"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /delay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_51 {
    meta:
        app_name = "strace"
        type = "2"
        target = "delete_module"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /delete_module/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_20 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "deleted"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /deleted/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_39 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "delpart"
        pattern = "delpart.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /delpart.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /delpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_40 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "delpart"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /delpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule international_components_for_unicode {
    meta:
        app_name = "international_components_for_unicode"
        type = "2"
        target = "derb"
        pattern = "^([0-9]+\\.[0-9]+\\.?[0-9]*)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /derb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_20 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "des-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /des-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_21 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "des3-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /des3-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston {
    meta:
        app_name = "weston"
        type = "1"
        target = "desktop-shell"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /desktop-shell.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_62 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "destest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /destest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_52 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev--decode-fds-all"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev--decode-fds-all/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_53 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev--decode-fds-dev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev--decode-fds-dev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_54 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev--decode-fds-none"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev--decode-fds-none/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_55 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev--decode-fds-path"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev--decode-fds-path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_56 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev--decode-fds-socket"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev--decode-fds-socket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_57 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dev-yy"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dev-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_1 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "devlink"
        pattern = "devlink.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /devlink.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /devlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_30 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "df"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /df/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_31 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "df.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /df.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_3 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "dhat-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhat-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dhcp {
    meta:
        app_name = "dhcp"
        type = "2"
        target = "dhclient"
        pattern = "(([0-9]+\\.){1,}[0-9]+(-ESV)?)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}(-ESV)?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhclient/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_1 {
    meta:
        app_name = "connman"
        type = "2"
        target = "dhcp-server-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhcp-server-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_2 {
    meta:
        app_name = "connman"
        type = "2"
        target = "dhcp-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhcp-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dhcpcd {
    meta:
        app_name = "dhcpcd"
        type = "2"
        target = "dhcpcd"
        pattern = "dhcpcd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dhcpcd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhcpcd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dhcp_1 {
    meta:
        app_name = "dhcp"
        type = "2"
        target = "dhcpd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhcpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dhcp_2 {
    meta:
        app_name = "dhcp"
        type = "2"
        target = "dhcrelay"
        pattern = "dhcp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dhcp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhcrelay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_63 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dhtest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dhtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule diffutils_2 {
    meta:
        app_name = "diffutils"
        type = "2"
        target = "diff.diffutils"
        pattern = "diffutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /diffutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /diff.diffutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule diffutils_3 {
    meta:
        app_name = "diffutils"
        type = "2"
        target = "diff3"
        pattern = "diffutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /diffutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /diff3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_32 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dir.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dir.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_33 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dircolors"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dircolors/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_34 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dircolors.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dircolors.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "dirmngr"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dirmngr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_1 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "dirmngr-client"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dirmngr-client/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_35 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "dirname.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dirname.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_2 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "display-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /display-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dlt_daemon {
    meta:
        app_name = "dlt-daemon"
        type = "2"
        target = "dlt-daemon"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dlt-daemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dlt_daemon_1 {
    meta:
        app_name = "dlt-daemon"
        type = "2"
        target = "dlt-receive"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dlt-receive/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_41 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "dmesg"
        pattern = "dmesg.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dmesg.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_42 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "dmesg"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_43 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "dmesg.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmesg.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2 {
    meta:
        app_name = "lvm2"
        type = "2"
        target = "dmeventd"
        pattern = "dmeventd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dmeventd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmeventd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_7 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "dmi_memory_id"
        pattern = "^([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmi_memory_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2_1 {
    meta:
        app_name = "lvm2"
        type = "2"
        target = "dmsetup"
        pattern = "dmsetup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dmsetup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dmsetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dnsmasq {
    meta:
        app_name = "dnsmasq"
        type = "2"
        target = "dnsmasq"
        pattern = "dnsmasq-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /dnsmasq-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dnsmasq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_3 {
    meta:
        app_name = "connman"
        type = "2"
        target = "dnsproxy-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dnsproxy-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "doc_loadbios"
        pattern = "doc_loadbios.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /doc_loadbios.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /doc_loadbios/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dosfstools {
    meta:
        app_name = "dosfstools"
        type = "2"
        target = "dosfsck"
        pattern = "dosfsck (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dosfsck (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dosfsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dosfstools_1 {
    meta:
        app_name = "dosfstools"
        type = "2"
        target = "dosfslabel"
        pattern = "fatlabel ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /fatlabel ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dosfslabel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_11 {
    meta:
        app_name = "perl"
        type = "1"
        target = "DosGlob"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /DosGlob.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dpkg {
    meta:
        app_name = "dpkg"
        type = "2"
        target = "dpkg"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+) \\("

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}) \(/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dpkg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clutter_2 {
    meta:
        app_name = "clutter"
        type = "2"
        target = "drag-action"
        pattern = "clutter-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /clutter-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /drag-action/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_64 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "drbg_cavs_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /drbg_cavs_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_65 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "drbgtest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /drbgtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_4 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "drd-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /drd-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_1 {
    meta:
        app_name = "weston"
        type = "1"
        target = "drm-backend"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /drm-backend.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dropbear {
    meta:
        app_name = "dropbear"
        type = "2"
        target = "dropbearmulti"
        pattern = "dropbear-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dropbear-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dropbearmulti/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_22 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "dsa-keygen-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dsa-keygen-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_23 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "dsa-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dsa-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_66 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dsa_no_digest_size_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dsa_no_digest_size_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_67 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dsatest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dsatest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_68 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dtls_mtu_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dtls_mtu_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_69 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dtlstest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dtlstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_70 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "dtlsv1listentest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dtlsv1listentest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_36 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "du"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /du/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_37 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "du.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /du.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_6 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "dumpe2fs"
        pattern = "dumpe2fs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /dumpe2fs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dumpe2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_7 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "dumpe2fs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dumpe2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_12 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Dumper"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Dumper.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exfat {
    meta:
        app_name = "exfat"
        type = "2"
        target = "dumpexfat"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dumpexfat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_2 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "dumpkeys"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dumpkeys/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_58 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dup"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted {
    meta:
        app_name = "parted"
        type = "2"
        target = "dup-clobber"
        pattern = "parted-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /parted-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dup-clobber/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_59 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dup3"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dup3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_60 {
    meta:
        app_name = "strace"
        type = "2"
        target = "dup3-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dup3-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted_1 {
    meta:
        app_name = "parted"
        type = "2"
        target = "duplicate"
        pattern = "parted-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /parted-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /duplicate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_21 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwarf-getmacros"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwarf-getmacros/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_22 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwarf-getstring"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwarf-getstring/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_23 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwarf-ranges"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwarf-ranges/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_24 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwelf_elf_e_machine_string"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwelf_elf_e_machine_string/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_25 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwfl-addr-sect"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwfl-addr-sect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_26 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwfl-bug-addr-overflow"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwfl-bug-addr-overflow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_27 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwfl-report-elf-align"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwfl-report-elf-align/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_28 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwfllines"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwfllines/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_29 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwflmodtest"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwflmodtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_30 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "dwflsyms"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dwflsyms/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_44 {
    meta:
        app_name = "glib"
        type = "2"
        target = "dynamictests"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dynamictests/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_45 {
    meta:
        app_name = "glib"
        type = "2"
        target = "dynamictype"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /dynamictype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_8 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2freefrag"
        pattern = "e2freefrag.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e2freefrag.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2freefrag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_9 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2fsck"
        pattern = "e2fsck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e2fsck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_10 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2fsck"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_11 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2image"
        pattern = "e2image.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e2image.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2image/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_12 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2image"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2image/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_13 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2initrd_helper"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2initrd_helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_14 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2label"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2label/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_15 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2mmpstatus"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2mmpstatus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_16 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e2undo"
        pattern = "e2undo.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e2undo.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e2undo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_17 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e4crypt"
        pattern = "e4crypt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e4crypt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e4crypt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_18 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e4defrag"
        pattern = "e4defrag.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /e4defrag.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e4defrag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_19 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "e4defrag"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /e4defrag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_24 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "eax-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eax-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_13 {
    meta:
        app_name = "perl"
        type = "1"
        target = "EBCDIC"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /EBCDIC.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables {
    meta:
        app_name = "ebtables"
        type = "2"
        target = "ebtables-legacy"
        pattern = "ebtables-legacy.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ebtables-legacy.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ebtables-legacy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_71 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ec_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ec_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_25 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-add-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-add-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_26 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-dup-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-dup-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_27 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-mod-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-mod-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_28 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-modinv-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-modinv-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_29 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-mul-a-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-mul-a-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_30 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-mul-g-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-mul-g-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_31 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-redc-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-redc-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_32 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecc-sqrt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecc-sqrt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_33 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecdh-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecdh-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_34 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecdsa-keygen-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecdsa-keygen-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_35 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecdsa-sign-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecdsa-sign-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_36 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ecdsa-verify-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecdsa-verify-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_72 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ecdsatest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecdsatest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_38 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "echo.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /echo.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_2 {
    meta:
        app_name = "nss"
        type = "2"
        target = "ecperf"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecperf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_73 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ecstresstest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ecstresstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_74 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ectest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ectest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ed {
    meta:
        app_name = "ed"
        type = "2"
        target = "ed"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_37 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ed25519-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ed25519-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_38 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "eddsa-compress-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eddsa-compress-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_39 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "eddsa-sign-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eddsa-sign-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_40 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "eddsa-verify-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eddsa-verify-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_44 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "eject"
        pattern = "eject.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /eject.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_45 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "eject"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_46 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "eject.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eject.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_capsfilter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_capsfilter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_1 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_clocksync"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_clocksync/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_2 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_concat"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_concat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_3 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_dataurisrc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_dataurisrc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_4 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_fakesink"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_fakesink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_5 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_fakesrc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_fakesrc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_6 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_fdsrc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_fdsrc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_7 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_filesink"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_filesink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_8 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_filesrc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_filesrc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_9 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_funnel"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_funnel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_10 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_identity"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_identity/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_11 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_multiqueue"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_multiqueue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_12 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_queue"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_queue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_13 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_queue2"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_queue2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_14 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_selector"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_selector/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_15 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_streamiddemux"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_streamiddemux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_16 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_tee"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_tee/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_17 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "elements_valve"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elements_valve/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_31 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "elfclassify"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elfclassify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_32 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "elfcmp"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elfcmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_33 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "elfcompress"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elfcompress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_1 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "elfdeps"
        pattern = "elfdeps.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /elfdeps.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elfdeps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_34 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "elflint"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /elflint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_14 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Encode"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Encode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_15 {
    meta:
        app_name = "perl"
        type = "1"
        target = "encoding"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /encoding.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_75 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "endecode_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /endecode_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_76 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "endecoder_legacy_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /endecoder_legacy_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_77 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "enginetest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /enginetest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_46 {
    meta:
        app_name = "glib"
        type = "2"
        target = "enums"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /enums/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_47 {
    meta:
        app_name = "glib"
        type = "2"
        target = "env-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /env-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_39 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "env.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /env.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_48 {
    meta:
        app_name = "glib"
        type = "2"
        target = "environment"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /environment/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_1 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "envsubst"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /envsubst/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule eye_of_gnome {
    meta:
        app_name = "eye_of_gnome"
        type = "2"
        target = "eog"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_61 {
    meta:
        app_name = "strace"
        type = "2"
        target = "epoll_create1"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /epoll_create1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_62 {
    meta:
        app_name = "strace"
        type = "2"
        target = "epoll_ctl"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /epoll_ctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_63 {
    meta:
        app_name = "strace"
        type = "2"
        target = "epoll_pwait"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /epoll_pwait/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_64 {
    meta:
        app_name = "strace"
        type = "2"
        target = "erestartsys"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /erestartsys/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_49 {
    meta:
        app_name = "glib"
        type = "2"
        target = "error"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /error/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_6 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "error-notify"
        pattern = "error-notify.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /error-notify.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /error-notify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_78 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "errtest"
        pattern = "[Oo]pen[Ss][Ss][Ll]-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll]-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /errtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ethtool {
    meta:
        app_name = "ethtool"
        type = "2"
        target = "ethtool"
        pattern = "ethtool version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ethtool version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ethtool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_35 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-addr2line"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-addr2line/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_36 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-ar"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-ar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_37 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-elfclassify"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-elfclassify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_38 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-elfcmp"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-elfcmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_39 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-elfcompress"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-elfcompress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_40 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-elflint"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-elflint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_41 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-findtextrel"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-findtextrel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_42 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-nm"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_43 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-objdump"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-objdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_44 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-ranlib"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-ranlib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_45 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-readelf"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-readelf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_46 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-size"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-size/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_47 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-stack"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-stack/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_48 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-strings"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-strings/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_49 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-strip"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-strip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_50 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "eu-unstrip"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /eu-unstrip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_3 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "event-loop-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /event-loop-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_79 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_extra_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_extra_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_80 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_extra_test2"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_extra_test2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_81 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_fetch_prov_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_fetch_prov_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_82 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_kdf_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_kdf_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_83 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_libctx_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_libctx_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_84 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_pkey_dparams_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_pkey_dparams_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_85 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_pkey_provided_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_pkey_provided_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_86 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "evp_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /evp_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib {
    meta:
        app_name = "zlib"
        type = "2"
        target = "examplesh"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /examplesh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_87 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "exdatatest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exdatatest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_4 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "exec-fd-leak-checker"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exec-fd-leak-checker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_65 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execve--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execve--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_66 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execve--secontext_full"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execve--secontext_full/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_67 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execve--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execve--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_68 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execve-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execve-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_69 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execveat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execveat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_70 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execveat--secontext_full"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execveat--secontext_full/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_71 {
    meta:
        app_name = "strace"
        type = "2"
        target = "execveat-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /execveat-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exfat_1 {
    meta:
        app_name = "exfat"
        type = "2"
        target = "exfatfsck"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exfatfsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exfat_2 {
    meta:
        app_name = "exfat"
        type = "2"
        target = "exfatlabel"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exfatlabel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_5 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "exp-bbv-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exp-bbv-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_6 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "exp-sgcheck-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exp-sgcheck-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_40 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "expand"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expand/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_41 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "expand.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expand.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_9 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "expiry"
        pattern = "expiry.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /expiry.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expiry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_10 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "expiry"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expiry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_42 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "expr"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_43 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "expr.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /expr.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_88 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "exptest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exptest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust {
    meta:
        app_name = "ust"
        type = "2"
        target = "extract_xml"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /extract_xml/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_1 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "exynos_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /exynos_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_72 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_73 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_74 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat--secontext_full"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat--secontext_full/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_75 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_76 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_77 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat-P"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_78 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_79 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat-y--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat-y--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_80 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat-y--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat-y--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_81 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat-yy"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_82 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat2"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_83 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat2-P"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat2-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_84 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat2-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat2-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_85 {
    meta:
        app_name = "strace"
        type = "2"
        target = "faccessat2-yy"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faccessat2-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_44 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "factor"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /factor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_45 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "factor.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /factor.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_86 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fadvise64"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fadvise64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam {
    meta:
        app_name = "pam"
        type = "2"
        target = "faillock"
        pattern = "faillock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /faillock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faillock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_11 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "faillog"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /faillog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_50 {
    meta:
        app_name = "glib"
        type = "2"
        target = "fake-document-portal"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fake-document-portal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_51 {
    meta:
        app_name = "glib"
        type = "2"
        target = "fake-service-name"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fake-service-name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_47 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fallocate"
        pattern = "fallocate.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fallocate.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fallocate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_48 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fallocate"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fallocate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_87 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fallocate"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fallocate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_49 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fallocate.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fallocate.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_46 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "false.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /false.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_88 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fanotify_init"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fanotify_init/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_89 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fanotify_mark"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fanotify_mark/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_90 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fanotify_mark-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fanotify_mark-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_91 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fanotify_mark-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fanotify_mark-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_92 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fanotify_mark-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fanotify_mark-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_16 {
    meta:
        app_name = "perl"
        type = "1"
        target = "FastCalc"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /FastCalc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_89 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "fatalerrtest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fatalerrtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_93 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchdir"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_94 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmod"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_95 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmod--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmod--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_96 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmod-y--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmod-y--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_97 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmodat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmodat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_98 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmodat--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmodat--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_99 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmodat--secontext_full"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmodat--secontext_full/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_100 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmodat--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmodat--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_101 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchmodat--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchmodat--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_102 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchown"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchown/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_103 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchownat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchownat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_104 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchownat--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchownat--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_105 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fchownat--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fchownat--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_17 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Fcntl"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Fcntl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_106 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fcntl"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fcntl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_107 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fcntl--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fcntl--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_108 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fdatasync"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fdatasync/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_50 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fdformat"
        pattern = "fdformat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fdformat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fdformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_51 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fdformat"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fdformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_52 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fdisk.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fdisk.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_90 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ffc_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ffc_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg {
    meta:
        app_name = "ffmpeg"
        type = "2"
        target = "ffmpeg"
        pattern = "%s version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /%s version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ffmpeg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_1 {
    meta:
        app_name = "ffmpeg"
        type = "2"
        target = "ffprobe"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ffprobe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_3 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "fgconsole.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fgconsole.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_18 {
    meta:
        app_name = "perl"
        type = "1"
        target = "FieldHash"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /FieldHash.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule file {
    meta:
        app_name = "file"
        type = "2"
        target = "file"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_52 {
    meta:
        app_name = "glib"
        type = "2"
        target = "file"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule file_roller {
    meta:
        app_name = "file_roller"
        type = "2"
        target = "file-roller"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file-roller/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_53 {
    meta:
        app_name = "glib"
        type = "2"
        target = "file-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule file_1 {
    meta:
        app_name = "file"
        type = "2"
        target = "file.file"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file.file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_109 {
    meta:
        app_name = "strace"
        type = "2"
        target = "file_handle"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file_handle/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_110 {
    meta:
        app_name = "strace"
        type = "2"
        target = "file_handle--secontext_full"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file_handle--secontext_full/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_111 {
    meta:
        app_name = "strace"
        type = "2"
        target = "file_handle--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file_handle--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_112 {
    meta:
        app_name = "strace"
        type = "2"
        target = "file_ioctl"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /file_ioctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_54 {
    meta:
        app_name = "glib"
        type = "2"
        target = "fileattributematcher"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fileattributematcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_20 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "filefrag"
        pattern = "filefrag.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /filefrag.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /filefrag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_7 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "fileio"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fileio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_55 {
    meta:
        app_name = "glib"
        type = "2"
        target = "fileutils"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fileutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_56 {
    meta:
        app_name = "glib"
        type = "2"
        target = "filter-streams"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /filter-streams/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_113 {
    meta:
        app_name = "strace"
        type = "2"
        target = "filter-unavailable"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /filter-unavailable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_53 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fincore"
        pattern = "fincore.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fincore.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fincore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_54 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fincore"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fincore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_51 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "find-prologues"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /find-prologues/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule findutils {
    meta:
        app_name = "findutils"
        type = "2"
        target = "find.findutils"
        pattern = "findutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /findutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /find.findutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_55 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "findfs"
        pattern = "findfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /findfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /findfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_56 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "findfs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /findfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_57 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "findmnt"
        pattern = "findmnt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /findmnt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /findmnt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_58 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "findmnt"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /findmnt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_114 {
    meta:
        app_name = "strace"
        type = "2"
        target = "finit_module"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /finit_module/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_3 {
    meta:
        app_name = "nss"
        type = "2"
        target = "fipstest"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fipstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_5 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "fixed-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fixed-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_57 {
    meta:
        app_name = "glib"
        type = "2"
        target = "flags"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flags/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_1 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_erase"
        pattern = "flash_erase.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_erase.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_erase/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_2 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_erase"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_erase/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_3 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_lock"
        pattern = "flash_lock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_lock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_lock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_4 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_lock"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_lock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_5 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_otp_dump"
        pattern = "flash_otp_dump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_otp_dump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_otp_dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_6 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_otp_info"
        pattern = "flash_otp_info.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_otp_info.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_otp_info/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_7 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_otp_lock"
        pattern = "flash_otp_lock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_otp_lock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_otp_lock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_8 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_otp_write"
        pattern = "flash_otp_write.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_otp_write.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_otp_write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_9 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_unlock"
        pattern = "flash_unlock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flash_unlock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_unlock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_10 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flash_unlock"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flash_unlock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_11 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flashcp"
        pattern = "flashcp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flashcp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flashcp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_12 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "flashcp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flashcp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule flex {
    meta:
        app_name = "flex"
        type = "2"
        target = "flex"
        pattern = "flex-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /flex-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_59 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "flock"
        pattern = "flock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /flock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_115 {
    meta:
        app_name = "strace"
        type = "2"
        target = "flock"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_60 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "flock.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /flock.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_47 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "fmt"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_48 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "fmt.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fmt.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_49 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "fold"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fold/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_50 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "fold.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fold.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule foomatic_filters {
    meta:
        app_name = "foomatic-filters"
        type = "2"
        target = "foomatic-rip"
        pattern = "version ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /foomatic-rip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_8 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "foreign"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /foreign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_116 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fork-f"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fork-f/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule findutils_1 {
    meta:
        app_name = "findutils"
        type = "2"
        target = "frcode"
        pattern = "findutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /findutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /frcode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "free"
        pattern = "free.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /free.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /free/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_1 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "free"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /free/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_2 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "free.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /free.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_61 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck"
        pattern = "fsck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fsck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_62 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_63 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck.cramfs"
        pattern = "fsck.cramfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fsck.cramfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.cramfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_64 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck.cramfs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.cramfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_21 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "fsck.ext2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.ext2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_22 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "fsck.ext3"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.ext3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_23 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "fsck.ext4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.ext4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule f2fs_tools {
    meta:
        app_name = "f2fs-tools"
        type = "2"
        target = "fsck.f2fs"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.f2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_65 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck.minix"
        pattern = "fsck.minix.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fsck.minix.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.minix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_66 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck.minix"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.minix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_67 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsck.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsck.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_117 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fsconfig"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_118 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fsconfig-P"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsconfig-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_68 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsfreeze"
        pattern = "fsfreeze.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fsfreeze.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsfreeze/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_69 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsfreeze"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsfreeze/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_70 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fsfreeze.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsfreeze.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_119 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fsmount"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsmount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_120 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fsopen"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsopen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_121 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fspick"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fspick/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_122 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fspick-P"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fspick-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_1 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "fstab-decode"
        pattern = "fstab-decode.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fstab-decode.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstab-decode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_123 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fstat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_124 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fstat-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstat-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_125 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fstat-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstat-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_126 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fstat-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstat-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_127 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fstatfs"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstatfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_71 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fstrim"
        pattern = "fstrim.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fstrim.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstrim/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_72 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fstrim"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstrim/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_73 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "fstrim.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fstrim.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_2 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "fsync"
        pattern = "fsync.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /fsync.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsync/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_128 {
    meta:
        app_name = "strace"
        type = "2"
        target = "fsync-y"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fsync-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_13 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ftl_check"
        pattern = "ftl_check.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ftl_check.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ftl_check/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_14 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ftl_check"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ftl_check/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_15 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ftl_format"
        pattern = "ftl_format.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ftl_format.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ftl_format/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_16 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ftl_format"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ftl_format/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_129 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ftruncate"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ftruncate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_2 {
    meta:
        app_name = "weston"
        type = "1"
        target = "fullscreen-shell"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fullscreen-shell.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_52 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "funcretval"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /funcretval/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_53 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "funcscopes"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /funcscopes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libfuse {
    meta:
        app_name = "libfuse"
        type = "2"
        target = "fusermount"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /fusermount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_130 {
    meta:
        app_name = "strace"
        type = "2"
        target = "futex"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /futex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_131 {
    meta:
        app_name = "strace"
        type = "2"
        target = "futex_waitv"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /futex_waitv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_11 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "g++-mapper-server"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /g\+\+-mapper-server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_58 {
    meta:
        app_name = "glib"
        type = "2"
        target = "g-file"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /g-file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_59 {
    meta:
        app_name = "glib"
        type = "2"
        target = "g-file-info"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /g-file-info/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_60 {
    meta:
        app_name = "glib"
        type = "2"
        target = "g-file-info-filesystem-readonly"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /g-file-info-filesystem-readonly/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_61 {
    meta:
        app_name = "glib"
        type = "2"
        target = "g-icon"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /g-icon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_2 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "gallium_dri"
        pattern = "Mesa (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Mesa (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gallium_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_62 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gapplication"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gapplication/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_10 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "gatttool"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gatttool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_41 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "gcm-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gcm-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_63 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdatetime"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdatetime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdb {
    meta:
        app_name = "gdb"
        type = "2"
        target = "gdb"
        pattern = "gdb-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdb-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_19 {
    meta:
        app_name = "perl"
        type = "1"
        target = "GDBM_File"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /GDBM_File.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdb_1 {
    meta:
        app_name = "gdb"
        type = "2"
        target = "gdbserver"
        pattern = "gdb-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdb-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbserver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdb_2 {
    meta:
        app_name = "gdb"
        type = "2"
        target = "gdbserver64"
        pattern = "gdb-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdb-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbserver64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_64 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_65 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-address-get-session"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-address-get-session/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_66 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-addresses"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-addresses/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_67 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-auth"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-auth/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_68 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-bz627724"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-bz627724/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_69 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-close-pending"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-close-pending/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_70 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-connection"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-connection/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_71 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-connection-flush"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-connection-flush/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_72 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-connection-flush-helper"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-connection-flush-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_73 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-connection-loss"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-connection-loss/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_74 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-connection-slow"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-connection-slow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_75 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-error"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-error/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_76 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-exit-on-close"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-exit-on-close/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_77 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-export"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-export/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_78 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-introspection"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-introspection/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_79 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-message"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-message/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_80 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-method-invocation"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-method-invocation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_81 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-names"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-names/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_82 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-non-socket"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-non-socket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_83 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-overflow"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-overflow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_84 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-peer"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-peer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_85 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-peer-object-manager"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-peer-object-manager/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_86 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-proxy"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-proxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_87 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-proxy-threads"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-proxy-threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_88 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-proxy-unique-name"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-proxy-unique-name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_89 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-proxy-well-known-name"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-proxy-well-known-name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_90 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-serialization"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-serialization/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_91 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-server-auth"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-server-auth/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_92 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-test-codegen"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-test-codegen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_93 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-test-codegen-min-required-2-64"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-test-codegen-min-required-2-64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_94 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-test-codegen-old"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-test-codegen-old/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_95 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-testserver"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-testserver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_96 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gdbus-threading"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdbus-threading/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_2 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "gdk-pixbuf-csource"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdk-pixbuf-csource/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_3 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "gdk-pixbuf-pixdata"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdk-pixbuf-pixdata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_4 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "gdk-pixbuf-query-loaders"
        pattern = "^([2-9]\\.(1[^0])*([2-9][0-9])*(\\.[0-9]+)*)$"

    strings:
        $pattern = /([2-9]\.(1[0])*([2-9][0-9])*(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gdk-pixbuf-query-loaders/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala {
    meta:
        app_name = "vala"
        type = "2"
        target = "gen-introspect-0.46"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gen-introspect-0.46/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_1 {
    meta:
        app_name = "vala"
        type = "2"
        target = "gen-introspect-0.56"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gen-introspect-0.56/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_1 {
    meta:
        app_name = "ust"
        type = "2"
        target = "gen-ust-tracef"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gen-ust-tracef/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc {
    meta:
        app_name = "glibc"
        type = "2"
        target = "gencat"
        pattern = "gencat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /gencat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gencat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_1 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "gencat"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gencat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_18 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "generic_sinks"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /generic_sinks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_19 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "generic_states"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /generic_states/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_12 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "gengtype"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gengtype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_2 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "genl"
        pattern = "genl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /genl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /genl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_132 {
    meta:
        app_name = "strace"
        type = "2"
        target = "get_mempolicy"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /get_mempolicy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_133 {
    meta:
        app_name = "strace"
        type = "2"
        target = "get_process_reaper"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /get_process_reaper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_2 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "getconf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getconf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_134 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getcpu"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getcpu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_135 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getcwd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getcwd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_136 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getdents64"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getdents64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_137 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getegid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getegid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_1 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "getenforce"
        pattern = "getenforce.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /getenforce.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getenforce/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_3 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "getent"
        pattern = "getent.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /getent.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_4 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "getent"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_138 {
    meta:
        app_name = "strace"
        type = "2"
        target = "geteuid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /geteuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule acl {
    meta:
        app_name = "acl"
        type = "2"
        target = "getfacl"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getfacl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule attr {
    meta:
        app_name = "attr"
        type = "2"
        target = "getfattr"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getfattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_139 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getgroups"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getgroups/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_4 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "getkeycodes"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getkeycodes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_51 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "getlimits"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getlimits/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_74 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "getopt"
        pattern = "getopt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /getopt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getopt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_75 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "getopt"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getopt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_76 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "getopt.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getopt.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_140 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getpeername"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getpeername/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_141 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getpid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getpid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_142 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getpid--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getpid--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_143 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getppid"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getppid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_144 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getresgid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getresgid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_145 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getresuid"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getresuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_146 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getrlimit"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getrlimit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_147 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getrusage"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getrusage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_2 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "getsebool"
        pattern = "getsebool.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /getsebool.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getsebool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_148 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getsid--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getsid--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_149 {
    meta:
        app_name = "strace"
        type = "2"
        target = "getsockname"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /getsockname/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_2 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "gettext"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gettext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_3 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "gettextpo-1-prg"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gettextpo-1-prg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_52 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ginstall"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ginstall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_97 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gio"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_98 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gio-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gio-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_99 {
    meta:
        app_name = "glib"
        type = "2"
        target = "giomodule"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /giomodule/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule git_shell {
    meta:
        app_name = "git-shell"
        type = "2"
        target = "git"
        pattern = "git/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /git\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /git/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_100 {
    meta:
        app_name = "glib"
        type = "2"
        target = "glib-compile-resources"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /glib-compile-resources/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_101 {
    meta:
        app_name = "glib"
        type = "2"
        target = "glib-compile-schemas"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /glib-compile-schemas/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_5 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "glibc_post_upgrade"
        pattern = "glibc_post_upgrade.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /glibc_post_upgrade.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /glibc_post_upgrade/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_102 {
    meta:
        app_name = "glib"
        type = "2"
        target = "glistmodel"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /glistmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_20 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Glob"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Glob.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_91 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "gmdifftest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gmdifftest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_103 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gmenumodel"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gmenumodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_104 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gnotification"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gnotification/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnutls {
    meta:
        app_name = "gnutls"
        type = "2"
        target = "gnutls-cli-debug"
        pattern = "gnutls-cli-debug (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnutls-cli-debug (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gnutls-cli-debug/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_105 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gobject-private"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gobject-private/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_42 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "gostdsa-keygen-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gostdsa-keygen-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_43 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "gostdsa-vko-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gostdsa-vko-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_44 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "gosthash94-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gosthash94-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_92 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "gosttest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gosttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_12 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "gpasswd"
        pattern = "gpasswd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /gpasswd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpasswd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_13 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "gpasswd"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpasswd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_2 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg"
        pattern = "gpg.conf-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /gpg.conf-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_3 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-agent"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_4 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-card"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-card/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_5 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-check-pattern"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-check-pattern/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_6 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-connect-agent"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-connect-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgpg_error {
    meta:
        app_name = "libgpg-error"
        type = "2"
        target = "gpg-error"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-error/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_7 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-pair-tool"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-pair-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_8 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-preset-passphrase"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-preset-passphrase/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_9 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-protect-tool"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-protect-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_10 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-wks-client"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-wks-client/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_11 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg-wks-server"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg-wks-server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_12 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpg2"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpg2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_13 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgconf"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgconf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_14 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgkeys_curl"
        pattern = "\\(GnuPG\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GnuPG\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgkeys_curl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_15 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgkeys_finger"
        pattern = "\\(GnuPG\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GnuPG\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgkeys_finger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_16 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgkeys_hkp"
        pattern = "\\(GnuPG\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GnuPG\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgkeys_hkp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_3 {
    meta:
        app_name = "gpgme"
        type = "2"
        target = "gpgme-json"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgme-json/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_4 {
    meta:
        app_name = "gpgme"
        type = "2"
        target = "gpgme-tool"
        pattern = "GPGME-Tool (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /GPGME-Tool (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgme-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_17 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgparsemail"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgparsemail/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_18 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgscm"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgscm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_19 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgsm"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgsm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_20 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgsplit"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgsplit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_21 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgtar"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgtar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_22 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgv"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_23 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "gpgv2"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpgv2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gps2udp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gps2udp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_1 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gpsctl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpsctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_2 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gpsd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpsd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_3 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gpsdecode"
        pattern = "gpsdecode revision (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpsdecode revision (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpsdecode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_4 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gpspipe"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpspipe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_5 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "gpxlogger"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gpxlogger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grep {
    meta:
        app_name = "grep"
        type = "2"
        target = "grep.grep"
        pattern = "grep-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /grep-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grep.grep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clutter_3 {
    meta:
        app_name = "clutter"
        type = "2"
        target = "grid-layout"
        pattern = "clutter-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /clutter-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grid-layout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_150 {
    meta:
        app_name = "strace"
        type = "2"
        target = "group_req"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /group_req/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_14 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupadd"
        pattern = "groupadd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /groupadd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupadd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_15 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupadd"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupadd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_16 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupdel"
        pattern = "groupdel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /groupdel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_17 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupdel"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_18 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupmems"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupmems/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_19 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupmod"
        pattern = "groupmod.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /groupmod.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupmod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_20 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groupmod"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groupmod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_53 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "groups"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groups/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_54 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "groups.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groups.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_21 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "groups.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /groups.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_22 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "grpck"
        pattern = "grpck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /grpck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grpck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_23 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "grpck"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grpck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_24 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "grpconv"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grpconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_25 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "grpunconv"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /grpunconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_106 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gsocketclient-slow"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gsocketclient-slow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_20 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-device-monitor-1.0"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-device-monitor-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_21 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-inspect-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)/tools/"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/tools\// 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-inspect-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_22 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-launch-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)/tools/"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/tools\// 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-launch-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_23 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-play-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-play-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_24 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-ptp-helper"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-ptp-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_25 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-stats-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-stats-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_26 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst-typefind-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)/"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})\// 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst-typefind-1.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_27 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gst"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gst/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_28 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstabi"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstabi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_29 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstatomicqueue"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstatomicqueue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_30 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstbin"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstbin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_31 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstbuffer"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstbuffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_32 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstbufferlist"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstbufferlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_33 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstbufferpool"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstbufferpool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_34 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstbus"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstbus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_35 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstcaps"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstcaps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_36 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstcapsfeatures"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstcapsfeatures/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_37 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstchildproxy"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstchildproxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_38 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstclock"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_39 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstcontext"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstcontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_40 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstcontroller"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstcontroller/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_41 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstcpp"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstcpp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_42 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstdatetime"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstdatetime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_43 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstdevice"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstdevice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_44 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstelement"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstelement/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_45 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstelementfactory"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstelementfactory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_46 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstevent"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_47 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstghostpad"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstghostpad/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_48 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstinfo"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_49 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstiterator"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstiterator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_50 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstmemory"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstmemory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_51 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstmessage"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstmessage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_52 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstmeta"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstmeta/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_53 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstminiobject"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstminiobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_54 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstobject"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_55 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstpad"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstpad/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_56 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstparamspecs"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstparamspecs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_57 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstpipeline"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstpipeline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_58 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstplugin"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstplugin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_59 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstpoll"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstpoll/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_60 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstpreset"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstpreset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_61 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstprintf"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_62 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstpromise"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstpromise/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_63 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstprotection"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstprotection/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_64 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstquery"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstquery/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_65 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstregistry"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstregistry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_66 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstsegment"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstsegment/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_67 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gststream"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gststream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_68 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gststructure"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gststructure/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_69 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstsystemclock"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstsystemclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_70 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsttag"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsttag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_71 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsttagsetter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsttagsetter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_72 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsttask"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsttask/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_73 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsttoc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsttoc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_74 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsttocsetter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsttocsetter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_75 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gsturi"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gsturi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_76 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstutils"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_77 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "gst_gstvalue"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gst_gstvalue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_107 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gsubprocess"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gsubprocess/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_108 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gsubprocess-testprog"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gsubprocess-testprog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_109 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gtester"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtester/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk-demo"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk-demo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_1 {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk-update-icon-cache-2.0"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk-update-icon-cache-2.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_2 {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk-update-icon-cache-3.0"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk-update-icon-cache-3.0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_3 {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk3-demo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk3-demo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_4 {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk3-demo-application"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk3-demo-application/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_5 {
    meta:
        app_name = "gtk"
        type = "2"
        target = "gtk3-widget-factory"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gtk3-widget-factory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_110 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gutils-user-database"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gutils-user-database/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_111 {
    meta:
        app_name = "glib"
        type = "2"
        target = "guuid"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /guuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_112 {
    meta:
        app_name = "glib"
        type = "2"
        target = "gvalue-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gvalue-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gzip {
    meta:
        app_name = "gzip"
        type = "2"
        target = "gzip"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gzip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gzip_1 {
    meta:
        app_name = "gzip"
        type = "2"
        target = "gzip.gzip"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /gzip.gzip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2 {
    meta:
        app_name = "nghttp2"
        type = "2"
        target = "h2load"
        pattern = "h2load nghttp2/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /h2load nghttp2\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /h2load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bzip2_2 {
    meta:
        app_name = "bzip2"
        type = "2"
        target = "hackedbz2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+),"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}),/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hackedbz2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_77 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hardlink"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hardlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_11 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "hcidump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hcidump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_12 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "hcitool"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hcitool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_55 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "head"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /head/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_56 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "head.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /head.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule flex_1 {
    meta:
        app_name = "flex"
        type = "2"
        target = "header_r"
        pattern = "flex-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /flex-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /header_r/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_3 {
    meta:
        app_name = "weston"
        type = "1"
        target = "headless-backend"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /headless-backend.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_7 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "helgrind-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /helgrind-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_13 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "hex2hcd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hex2hcd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_78 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hexdump"
        pattern = "hexdump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /hexdump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hexdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_79 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hexdump"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hexdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_80 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hexdump.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hexdump.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_93 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "hexstr_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hexstr_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_21 {
    meta:
        app_name = "perl"
        type = "1"
        target = "HiRes"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /HiRes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_45 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "hkdf-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hkdf-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_113 {
    meta:
        app_name = "glib"
        type = "2"
        target = "hmac"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hmac/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_46 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "hmac-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hmac-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_94 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "hmactest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hmactest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_4 {
    meta:
        app_name = "weston"
        type = "1"
        target = "hmi-controller"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hmi-controller.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_114 {
    meta:
        app_name = "glib"
        type = "2"
        target = "hook"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hook/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind {
    meta:
        app_name = "bind"
        type = "2"
        target = "host"
        pattern = "host (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /host (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /host/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule hostapd {
    meta:
        app_name = "hostapd"
        type = "2"
        target = "hostapd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-devel"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-devel/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostapd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule hostapd_1 {
    meta:
        app_name = "hostapd"
        type = "2"
        target = "hostapd"
        pattern = "hostapd v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /hostapd v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostapd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wpa_supplicant {
    meta:
        app_name = "wpa_supplicant"
        type = "2"
        target = "hostapd_cli"
        pattern = "hostapd_cli v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /hostapd_cli v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostapd_cli/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_57 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "hostid"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_58 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "hostid.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostid.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_22 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Hostname"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Hostname.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_59 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "hostname.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostname.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_8 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "hostnamectl"
        pattern = "hostnamectl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /hostnamectl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostnamectl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_115 {
    meta:
        app_name = "glib"
        type = "2"
        target = "hostutils"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hostutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_95 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "http_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /http_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_81 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hwclock"
        pattern = "hwclock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /hwclock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hwclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_82 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hwclock"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hwclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_83 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "hwclock.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hwclock.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_3 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "hx8357d_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /hx8357d_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cdetect"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cdetect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_1 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cdetect.i2c-tools"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cdetect.i2c-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_2 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cdump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_3 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cdump.i2c-tools"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cdump.i2c-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_4 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cget"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_5 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cget.i2c-tools"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cget.i2c-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_6 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cset"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_7 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2cset.i2c-tools"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2cset.i2c-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule i2c_tools_8 {
    meta:
        app_name = "i2c-tools"
        type = "2"
        target = "i2ctransfer"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /i2ctransfer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_6 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "iconv"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_7 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "iconvconfig"
        pattern = "iconvconfig.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /iconvconfig.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iconvconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_8 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "iconvconfig"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iconvconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule international_components_for_unicode_1 {
    meta:
        app_name = "international_components_for_unicode"
        type = "2"
        target = "icuinfo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /icuinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_60 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "id.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /id.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_96 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ideatest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ideatest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_116 {
    meta:
        app_name = "glib"
        type = "2"
        target = "ifaceproperties"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ifaceproperties/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule net_tools {
    meta:
        app_name = "net-tools"
        type = "2"
        target = "ifconfig.net-tools"
        pattern = "net-tools (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /net-tools (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ifconfig.net-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_3 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "ifstat"
        pattern = "ifstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ifstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ifstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_97 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "igetest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /igetest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_4 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "ili9225_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ili9225_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_5 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "ili9341_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ili9341_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_2 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "ima"
        pattern = "ima.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ima.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ima.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_7 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "imc-scanner"
        pattern = "imc-scanner.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /imc-scanner.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imc-scanner.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_8 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "imc-test"
        pattern = "imc-test.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /imc-test.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imc-test.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imdiag"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imdiag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_1 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imfile"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imfile.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qnx_software_development_platform {
    meta:
        app_name = "qnx_software_development_platform"
        type = "1"
        target = "img_codec_bmp"
        pattern = "VERSION=(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /VERSION=(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /img_codec_bmp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == "QNX_info") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_2 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imklog"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imklog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_3 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "immark"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /immark.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_4 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imrelp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imrelp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_5 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imtcp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imtcp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_6 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imudp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imudp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_7 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "imuxsock"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imuxsock.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_9 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "imv-scanner"
        pattern = "imv-scanner.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /imv-scanner.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imv-scanner.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_10 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "imv-test"
        pattern = "imv-test.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /imv-test.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imv-test.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_11 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "imv_policy_manager"
        pattern = "imv_policy_manager.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /imv_policy_manager.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imv_policy_manager/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_6 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "imx-dcss_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imx-dcss_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_7 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "imx-drm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /imx-drm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_117 {
    meta:
        app_name = "glib"
        type = "2"
        target = "inet-address"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inet-address/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_151 {
    meta:
        app_name = "strace"
        type = "2"
        target = "inet-cmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inet-cmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2_1 {
    meta:
        app_name = "nghttp2"
        type = "2"
        target = "inflatehd"
        pattern = "nghttp2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nghttp2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inflatehd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_1 {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "infocmp"
        pattern = "infocmp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /infocmp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /infocmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_8 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "ingenic-drm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ingenic-drm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_2 {
    meta:
        app_name = "ust"
        type = "2"
        target = "ini_config"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ini_config/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_152 {
    meta:
        app_name = "strace"
        type = "2"
        target = "init_module"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /init_module/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_9 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "initclk"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /initclk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_153 {
    meta:
        app_name = "strace"
        type = "2"
        target = "inject-nf"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inject-nf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_154 {
    meta:
        app_name = "strace"
        type = "2"
        target = "inotify"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inotify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_155 {
    meta:
        app_name = "strace"
        type = "2"
        target = "inotify_init1"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inotify_init1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_156 {
    meta:
        app_name = "strace"
        type = "2"
        target = "inotify_init1-y"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /inotify_init1-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_61 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "install.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /install.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_10 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "instrumt"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /instrumt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup_2 {
    meta:
        app_name = "cryptsetup"
        type = "2"
        target = "integritysetup"
        pattern = "integritysetup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /integritysetup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /integritysetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup_3 {
    meta:
        app_name = "cryptsetup"
        type = "2"
        target = "integritysetup"
        pattern = "cryptsetup-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cryptsetup-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /integritysetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_6 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "interface-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /interface-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_4 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "intl-5-prg"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /intl-5-prg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_5 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "intl-version-prg"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /intl-version-prg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_11 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "intrio"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /intrio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_12 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "intrupt"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /intrupt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_23 {
    meta:
        app_name = "perl"
        type = "1"
        target = "IO"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /IO.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_118 {
    meta:
        app_name = "glib"
        type = "2"
        target = "io-channel"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io-channel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib_1 {
    meta:
        app_name = "zlib"
        type = "2"
        target = "io-pkt-v4-hc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io-pkt-v4-hc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib_2 {
    meta:
        app_name = "zlib"
        type = "2"
        target = "io-pkt-v6-hc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io-pkt-v6-hc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_119 {
    meta:
        app_name = "glib"
        type = "2"
        target = "io-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_13 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "io_timeout"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_timeout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_157 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_enter"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_enter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_158 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_159 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_160 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_161 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_162 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_163 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_register-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_register-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_164 {
    meta:
        app_name = "strace"
        type = "2"
        target = "io_uring_setup"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /io_uring_setup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_120 {
    meta:
        app_name = "glib"
        type = "2"
        target = "iochannel-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iochannel-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_14 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "ioconthr"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioconthr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_165 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_block"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_block/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_166 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_block--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_block--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_167 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_dm"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_dm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_168 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_dm-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_dm-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_169 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_170 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_171 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_172 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-v-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_173 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-v-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_174 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-v-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_175 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_176 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_177 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-success-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_178 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_179 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-v-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_180 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-v-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_181 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-v-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_182 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_183 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_184 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_evdev-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_evdev-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_185 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_186 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-success-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_187 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-success-v-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-success-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_188 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_189 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_190 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_191 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fiemap-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fiemap-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_192 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_f-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_f-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_193 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_f-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_f-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_194 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_195 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_196 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_197 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_198 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_199 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_fs_x-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_fs_x-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_200 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_201 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_202 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-success-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_203 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-success-v-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-success-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_204 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-success-v-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-success-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_205 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_206 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_207 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-v-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_208 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-v-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_209 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_210 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_gpio-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_gpio-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_211 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-success-v-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-success-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_212 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-success-v-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-success-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_213 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_214 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-v-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_215 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-v-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_216 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_hdio-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_hdio-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_217 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_kd-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_kd-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_218 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_kd-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_kd-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_219 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_kd-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_kd-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_220 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_kd-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_kd-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_221 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_loop"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_loop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_222 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_loop-nv"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_loop-nv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_223 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_loop-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_loop-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_224 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_mtd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_mtd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_225 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_mtd-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_mtd-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_226 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_nbd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_nbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_227 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_nsfs"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_nsfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_228 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_perf"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_perf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_229 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_perf-success"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_perf-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_230 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_ptp"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_ptp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_231 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_rtc"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_rtc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_232 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_rtc-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_rtc-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_233 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_scsi"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_scsi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_234 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_235 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_236 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_237 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp-y-success--pidns-translation-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp-y-success--pidns-translation-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_238 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp-y-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp-y-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_239 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_seccomp-y-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_seccomp-y-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_240 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_sg_io_v3"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_sg_io_v3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_241 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_sg_io_v4"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_sg_io_v4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_242 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_sock_gifconf"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_sock_gifconf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_243 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_ubi"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_ubi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_244 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_ubi-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_ubi-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_245 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_uffdio"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_uffdio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_246 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_247 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_248 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-success-v-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-success-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_249 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-success-v-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-success-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_250 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_251 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-v-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_252 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-v-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_253 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_254 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioctl_v4l2-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioctl_v4l2-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_84 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ionice"
        pattern = "ionice.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ionice.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ionice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_85 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ionice"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ionice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_86 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ionice.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ionice.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_255 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioprio"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioprio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_256 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioprio-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioprio-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_257 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioprio-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioprio-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_258 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ioprio-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ioprio-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_1 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "iostat"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iostat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_4 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "ip"
        pattern = "ip.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ip.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables {
    meta:
        app_name = "iptables"
        type = "2"
        target = "ip6tables"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip6tables/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_1 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "ip6tables-legacy-batch"
        pattern = "ip6tables-legacy-batch.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ip6tables-legacy-batch.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip6tables-legacy-batch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_2 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "ip6tables-legacy-batch"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip6tables-legacy-batch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_4 {
    meta:
        app_name = "connman"
        type = "2"
        target = "ip6tables-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip6tables-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_259 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ip_mreq"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ip_mreq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_260 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_261 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_msg-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_msg-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_262 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_msg-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_msg-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_263 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_msg-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_msg-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_264 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_sem"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_sem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_265 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_sem-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_sem-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_266 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_sem-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_sem-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_267 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_sem-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_sem-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_268 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_shm"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_shm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_269 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_shm-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_shm-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_270 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_shm-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_shm-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_271 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ipc_shm-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipc_shm-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_87 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcmk"
        pattern = "ipcmk.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ipcmk.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcmk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_88 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcmk"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcmk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_89 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcrm"
        pattern = "ipcrm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ipcrm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcrm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_90 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcrm"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcrm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_91 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcs"
        pattern = "ipcs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ipcs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_92 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ipcs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ipcs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iperf {
    meta:
        app_name = "iperf"
        type = "2"
        target = "iperf"
        pattern = "iperf version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /iperf version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iperf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iperf_1 {
    meta:
        app_name = "iperf"
        type = "2"
        target = "iperf-2.0.5"
        pattern = "iperf version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /iperf version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iperf-2.0.5/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iperf_2 {
    meta:
        app_name = "iperf"
        type = "2"
        target = "iperf2"
        pattern = "iperf version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /iperf version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iperf2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iperf3 {
    meta:
        app_name = "iperf3"
        type = "2"
        target = "iperf3"
        pattern = "iperf (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /iperf (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iperf3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_3 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "iptables"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iptables/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_4 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "iptables-legacy-batch"
        pattern = "iptables-legacy-batch.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /iptables-legacy-batch.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iptables-legacy-batch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_5 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "iptables-legacy-batch"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iptables-legacy-batch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_5 {
    meta:
        app_name = "connman"
        type = "2"
        target = "iptables-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iptables-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_93 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "isosize"
        pattern = "isosize.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /isosize.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /isosize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_94 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "isosize"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /isosize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog_3 {
    meta:
        app_name = "blog"
        type = "2"
        target = "isserial"
        pattern = "isserial.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /isserial.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /isserial/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iucode_tool {
    meta:
        app_name = "iucode-tool"
        type = "2"
        target = "iucode-tool"
        pattern = "iucode_tool ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /iucode_tool ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /iucode-tool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_5 {
    meta:
        app_name = "weston"
        type = "1"
        target = "ivi-shell"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ivi-shell.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ixgbe {
    meta:
        app_name = "ixgbe"
        type = "2"
        target = "ixgbe.ko"
        pattern = "ixgbe.ko.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ixgbe.ko.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ixgbe.ko/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_6 {
    meta:
        app_name = "weston"
        type = "2"
        target = "jet-ime-keyboard"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jet-ime-keyboard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_17 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "jffs2dump"
        pattern = "jffs2dump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /jffs2dump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jffs2dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_18 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "jffs2dump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jffs2dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_19 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "jffs2reader"
        pattern = "jffs2reader.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /jffs2reader.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jffs2reader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_20 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "jffs2reader"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jffs2reader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_62 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "join.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /join.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_9 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "journalctl"
        pattern = "journalctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /journalctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /journalctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_10 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "journalctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /journalctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_24 {
    meta:
        app_name = "perl"
        type = "1"
        target = "JP"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /JP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule jq {
    meta:
        app_name = "jq"
        type = "2"
        target = "jq"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /jq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule firefox_esr {
    meta:
        app_name = "firefox_esr"
        type = "2"
        target = "js60"
        pattern = "mozjs/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mozjs\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /js60/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_5 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "kbd_mode"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kbd_mode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_6 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "kbdinfo"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kbdinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_7 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "kbdrate"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kbdrate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_24 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "kbxutil"
        pattern = "gnupg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnupg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kbxutil/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_272 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kcmp"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kcmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_273 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kcmp-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kcmp-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_274 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kcmp-y--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kcmp-y--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_275 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kernel_version"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kernel_version/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_276 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kernel_version-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kernel_version-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_277 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kernel_version-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kernel_version-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_278 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kernel_version-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kernel_version-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kexec_tools {
    meta:
        app_name = "kexec-tools"
        type = "2"
        target = "kexec"
        pattern = "kexec.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /kexec.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kexec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kexec_tools_1 {
    meta:
        app_name = "kexec-tools"
        type = "2"
        target = "kexec"
        pattern = "kexec-tools (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kexec-tools (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kexec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_279 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kexec_file_load"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kexec_file_load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_280 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kexec_load"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kexec_load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule keyutils {
    meta:
        app_name = "keyutils"
        type = "2"
        target = "key.dns_resolver"
        pattern = "key.dns_resolver.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /key.dns_resolver.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /key.dns_resolver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule keyutils_1 {
    meta:
        app_name = "keyutils"
        type = "2"
        target = "keyctl"
        pattern = "keyctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /keyctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keyctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_281 {
    meta:
        app_name = "strace"
        type = "2"
        target = "keyctl-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keyctl-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_282 {
    meta:
        app_name = "strace"
        type = "2"
        target = "keyctl-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keyctl-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_283 {
    meta:
        app_name = "strace"
        type = "2"
        target = "keyctl-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keyctl-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_121 {
    meta:
        app_name = "glib"
        type = "2"
        target = "keyfile"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keyfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_98 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "keymgmt_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /keymgmt_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_95 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "kill"
        pattern = "kill.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /kill.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_63 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "kill"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_284 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kill"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_96 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "kill"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_285 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kill--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_64 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "kill.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps {
    meta:
        app_name = "procps"
        type = "2"
        target = "kill.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_97 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "kill.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_286 {
    meta:
        app_name = "strace"
        type = "2"
        target = "kill_child"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kill_child/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_3 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "killall5"
        pattern = "killall5.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /killall5.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /killall5/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_4 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "killall5"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /killall5/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_5 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "killproc"
        pattern = "killproc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /killproc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /killproc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_7 {
    meta:
        app_name = "weston"
        type = "1"
        target = "kiosk-shell"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kiosk-shell.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_9 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "kirin_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kirin_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_98 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "klogconsole"
        pattern = "klogconsole.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /klogconsole.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /klogconsole/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysklogd {
    meta:
        app_name = "sysklogd"
        type = "2"
        target = "klogd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /klogd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kmod {
    meta:
        app_name = "kmod"
        type = "2"
        target = "kmod"
        pattern = "kmod.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /kmod.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kmod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kmod_1 {
    meta:
        app_name = "kmod"
        type = "2"
        target = "kmod"
        pattern = "kmod version ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /kmod version ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kmod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_10 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "kms_swrast_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /kms_swrast_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_47 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "knuth-lfib-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /knuth-lfib-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_11 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "komeda_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /komeda_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_25 {
    meta:
        app_name = "perl"
        type = "1"
        target = "KR"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /KR.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_8 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "lackey-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lackey-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lame {
    meta:
        app_name = "lame"
        type = "2"
        target = "lame"
        pattern = "lame-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lame-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lame/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_287 {
    meta:
        app_name = "strace"
        type = "2"
        target = "landlock_add_rule"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /landlock_add_rule/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_288 {
    meta:
        app_name = "strace"
        type = "2"
        target = "landlock_add_rule-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /landlock_add_rule-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_289 {
    meta:
        app_name = "strace"
        type = "2"
        target = "landlock_create_ruleset-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /landlock_create_ruleset-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_290 {
    meta:
        app_name = "strace"
        type = "2"
        target = "landlock_create_ruleset-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /landlock_create_ruleset-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_291 {
    meta:
        app_name = "strace"
        type = "2"
        target = "landlock_restrict_self"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /landlock_restrict_self/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_26 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Langinfo"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Langinfo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_99 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "last"
        pattern = "last.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /last.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /last/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_100 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "last"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /last/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_101 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "last.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /last.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_26 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "lastlog"
        pattern = "lastlog.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lastlog.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lastlog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_27 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "lastlog"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lastlog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_15 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "layer"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /layer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_16 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "lazyinit"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lazyinit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_65 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "lbracket.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lbracket.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_6 {
    meta:
        app_name = "gpsd"
        type = "2"
        target = "lcdgps"
        pattern = "lcdgs revision (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lcdgs revision (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lcdgps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_9 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "ld-2.26"
        pattern = "ld-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ld-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ld-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_10 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "ld-2.31"
        pattern = "LINUX_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LINUX_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ld-2.31.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_11 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "ld-linux-aarch64"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ld-linux-aarch64.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_102 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ldattach"
        pattern = "ldattach.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ldattach.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ldattach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_103 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ldattach"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ldattach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_12 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "ldconfig"
        pattern = "ldconfig.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ldconfig.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ldconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_13 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "ldconfig"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ldconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_99 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "legacy"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /legacy.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_100 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "lhash_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lhash_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule acl_1 {
    meta:
        app_name = "acl"
        type = "1"
        target = "libacl"
        pattern = "libacl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libacl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libacl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libaio {
    meta:
        app_name = "libaio"
        type = "1"
        target = "libaio"
        pattern = "libaio.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libaio.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libaio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libalsa-util"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libalsa-util.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_14 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libanl-2.26"
        pattern = "libanl-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libanl-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libanl-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libexpat {
    meta:
        app_name = "libexpat"
        type = "1"
        target = "libAnwwbxml"
        pattern = "expat_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /expat_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libAnwwbxml.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libarchive_2 {
    meta:
        app_name = "libarchive"
        type = "1"
        target = "libarchive"
        pattern = "libarchive.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libarchive.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libarchive.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libarchive_3 {
    meta:
        app_name = "libarchive"
        type = "1"
        target = "libarchive"
        pattern = "libarchive (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libarchive (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libarchive.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule argon2 {
    meta:
        app_name = "argon2"
        type = "1"
        target = "libargon2"
        pattern = "libargon2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libargon2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libargon2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_6 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libarpt_mangle"
        pattern = "libarpt_mangle.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libarpt_mangle.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libarpt_mangle.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_13 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libasan"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_54 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libasm"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_55 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libasm-0.178"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasm-0.178.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_56 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libasm-0.186"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasm-0.186.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_12 {
    meta:
        app_name = "alsa"
        type = "1"
        target = "libasound"
        pattern = "alsa-lib-(([0-9]+\\.){1,}[0-9]+[a-z]*)"

    strings:
        $pattern = /alsa-lib-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasound.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_13 {
    meta:
        app_name = "alsa"
        type = "1"
        target = "libasound_module_ctl_pulse"
        pattern = "alsa-plugins-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-plugins-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasound_module_ctl_pulse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_14 {
    meta:
        app_name = "alsa"
        type = "1"
        target = "libasound_module_pcm_pulse"
        pattern = "alsa-plugins-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /alsa-plugins-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libasound_module_pcm_pulse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule at_spi2_atk {
    meta:
        app_name = "at-spi2-atk"
        type = "1"
        target = "libatk-bridge-2.0"
        pattern = "at-spi2-atk-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /at-spi2-atk-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libatk-bridge-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_14 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libatomic"
        pattern = "libatomic.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libatomic.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libatomic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_lib {
    meta:
        app_name = "alsa-lib"
        type = "1"
        target = "libatopology"
        pattern = "alsa-lib-(([0-9]+\\.){1,}[0-9]+[a-z]*)"

    strings:
        $pattern = /alsa-lib-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libatopology.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule attr_1 {
    meta:
        app_name = "attr"
        type = "1"
        target = "libattr"
        pattern = "libattr.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libattr.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libattr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_10 {
    meta:
        app_name = "audit"
        type = "1"
        target = "libaudit"
        pattern = "libaudit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libaudit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libaudit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule audit_11 {
    meta:
        app_name = "audit"
        type = "1"
        target = "libauparse"
        pattern = "libauparse.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libauparse.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libauparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi_1 {
    meta:
        app_name = "avahi"
        type = "1"
        target = "libavahi-client"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+(-[0-9]+)?)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4}(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavahi-client.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi_2 {
    meta:
        app_name = "avahi"
        type = "1"
        target = "libavahi-common"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavahi-common.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi_3 {
    meta:
        app_name = "avahi"
        type = "2"
        target = "libavahi-core"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavahi-core/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi_4 {
    meta:
        app_name = "avahi"
        type = "1"
        target = "libavahi-glib"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavahi-glib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule avahi_5 {
    meta:
        app_name = "avahi"
        type = "1"
        target = "libavahi-gobject"
        pattern = "avahi-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /avahi-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavahi-gobject.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_2 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libavcodec"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavcodec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_3 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libavdevice"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavdevice.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_4 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libavfilter"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavfilter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_5 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libavformat"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavformat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_6 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libavutil"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libavutil.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_18 {
    meta:
        app_name = "binutils"
        type = "1"
        target = "libbfd-2.29.1.20180115"
        pattern = "\\(GNU Binutils\\) ([0-9]\\.[0-9]+(\\.[1-9])?[a-z]?)"

    strings:
        $pattern = /\(GNU Binutils\) ([0-9]\.[0-9]{1,4}(\.[1-9])?[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbfd-2.29.1.20180115.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_19 {
    meta:
        app_name = "binutils"
        type = "1"
        target = "libbfd-2.30.0.20180208"
        pattern = "\\(GNU Binutils\\) ([0-9]\\.[0-9]+(\\.[1-9])?[a-z]?)"

    strings:
        $pattern = /\(GNU Binutils\) ([0-9]\.[0-9]{1,4}(\.[1-9])?[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbfd-2.30.0.20180208.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule binutils_20 {
    meta:
        app_name = "binutils"
        type = "1"
        target = "libbfd-2.34.0.20200220"
        pattern = "\\(GNU Binutils\\) ([0-9]\\.[0-9]+(\\.[1-9])?[a-z]?)"

    strings:
        $pattern = /\(GNU Binutils\) ([0-9]\.[0-9]{1,4}(\.[1-9])?[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbfd-2.34.0.20200220.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_1 {
    meta:
        app_name = "bind"
        type = "1"
        target = "libbind9"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbind9.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_104 {
    meta:
        app_name = "util-linux"
        type = "1"
        target = "libblkid"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libblkid.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog_4 {
    meta:
        app_name = "blog"
        type = "1"
        target = "libblogger"
        pattern = "libblogger.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libblogger.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libblogger.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_atomic"
        pattern = "libboost_atomic\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_atomic\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_atomic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_1 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_chrono"
        pattern = "libboost_chrono\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_chrono\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_chrono.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_2 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_container"
        pattern = "libboost_container\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_container\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_container.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_3 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_context"
        pattern = "libboost_context\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_context\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_context.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_4 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_contract"
        pattern = "libboost_contract\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_contract\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_contract.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_5 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_coroutine"
        pattern = "libboost_coroutine\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_coroutine\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_coroutine.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_6 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_date_time"
        pattern = "libboost_date_time\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_date_time\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_date_time.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_7 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_filesystem"
        pattern = "libboost_filesystem\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_filesystem\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_filesystem.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_8 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_graph"
        pattern = "libboost_graph\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_graph\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_graph.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_9 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_iostreams"
        pattern = "libboost_iostreams\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_iostreams\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_iostreams.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_10 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_locale"
        pattern = "libboost_locale\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_locale\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_locale.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_11 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_log"
        pattern = "libboost_log\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_log\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_log.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_12 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_log_setup"
        pattern = "libboost_log_setup\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_log_setup\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_log_setup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_13 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_c99"
        pattern = "libboost_math_c99\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_c99\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_c99.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_14 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_c99f"
        pattern = "libboost_math_c99f\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_c99f\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_c99f.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_15 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_c99l"
        pattern = "libboost_math_c99l\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_c99l\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_c99l.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_16 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_tr1"
        pattern = "libboost_math_tr1\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_tr1\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_tr1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_17 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_tr1f"
        pattern = "libboost_math_tr1f\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_tr1f\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_tr1f.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_18 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_math_tr1l"
        pattern = "libboost_math_tr1l\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_math_tr1l\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_math_tr1l.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_19 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_prg_exec_monitor"
        pattern = "libboost_prg_exec_monitor\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_prg_exec_monitor\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_prg_exec_monitor.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_20 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_program_options"
        pattern = "libboost_program_options\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_program_options\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_program_options.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_21 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_python38"
        pattern = "libboost_python38\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_python38\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_python38.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_22 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_random"
        pattern = "libboost_random\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_random\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_random.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_23 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_regex"
        pattern = "libboost_regex\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_regex\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_regex.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_24 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_serialization"
        pattern = "libboost_serialization\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_serialization\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_serialization.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_25 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_system"
        pattern = "libboost_system\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_system\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_system.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_26 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_thread"
        pattern = "libboost_thread\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_thread\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_thread.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_27 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_timer"
        pattern = "libboost_timer\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_timer\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_timer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_28 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_unit_test_framework"
        pattern = "libboost_unit_test_framework\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_unit_test_framework\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_unit_test_framework.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_29 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_wave"
        pattern = "libboost_wave\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_wave\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_wave.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule boost_30 {
    meta:
        app_name = "boost"
        type = "1"
        target = "libboost_wserialization"
        pattern = "libboost_wserialization\\.so\\.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libboost_wserialization\.so\.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libboost_wserialization.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_15 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libBrokenLocale-2.26"
        pattern = "libBrokenLocale-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libBrokenLocale-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libBrokenLocale-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule brotli_1 {
    meta:
        app_name = "brotli"
        type = "1"
        target = "libbrotlienc"
        pattern = "brotli/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /brotli\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbrotlienc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libbsd {
    meta:
        app_name = "libbsd"
        type = "1"
        target = "libbsd"
        pattern = "libbsd-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libbsd-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbsd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bzip2_3 {
    meta:
        app_name = "bzip2"
        type = "1"
        target = "libbz2"
        pattern = "libbz2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libbz2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbz2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bzip2_4 {
    meta:
        app_name = "bzip2"
        type = "1"
        target = "libbz2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+),"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}),/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libbz2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qnx_software_development_platform_1 {
    meta:
        app_name = "qnx_software_development_platform"
        type = "1"
        target = "libc"
        pattern = "VERSION=(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /VERSION=(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == "QNX_info") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_16 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc"
        pattern = "version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_17 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.19"
        pattern = "release version ([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /release version ([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.19.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_18 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.26"
        pattern = "libc-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libc-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_19 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.26"
        pattern = "GNU C Library \\(GNU libc\\) stable release version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /GNU C Library \(GNU libc\) stable release version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_20 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.27"
        pattern = "GNU C Library \\(GNU libc\\) stable release version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /GNU C Library \(GNU libc\) stable release version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.27.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_21 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.28"
        pattern = "GNU C Library \\(GNU libc\\) stable release version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /GNU C Library \(GNU libc\) stable release version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.28.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_22 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libc-2.31"
        pattern = "GNU C Library \\(GNU libc\\) stable release version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /GNU C Library \(GNU libc\) stable release version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libc-2.31.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cairo_1 {
    meta:
        app_name = "cairo"
        type = "1"
        target = "libcairo"
        pattern = "cairo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cairo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcairo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cairo_2 {
    meta:
        app_name = "cairo"
        type = "1"
        target = "libcairo-script-interpreter"
        pattern = "cairo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /cairo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcairo-script-interpreter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcap {
    meta:
        app_name = "libcap"
        type = "1"
        target = "libcap"
        pattern = "libcap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcap_ng {
    meta:
        app_name = "libcap-ng"
        type = "1"
        target = "libcap-ng"
        pattern = "libcap-ng.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcap-ng.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcap-ng.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule c_ares {
    meta:
        app_name = "c-ares"
        type = "1"
        target = "libcares"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcares.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_15 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libcc1plugin"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcc1plugin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_12 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libcharon"
        pattern = "libcharon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcharon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcharon.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_23 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libcidn-2.26"
        pattern = "libcidn-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcidn-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcidn-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_1 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libcli"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcli.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libclockwait {
    meta:
        app_name = "libclockwait"
        type = "1"
        target = "libclockwait"
        pattern = "libclockwait.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libclockwait.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libclockwait.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule clutter_4 {
    meta:
        app_name = "clutter"
        type = "1"
        target = "libclutter-1.0"
        pattern = "clutter-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /clutter-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libclutter-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule flac {
    meta:
        app_name = "flac"
        type = "1"
        target = "libcodec2_soft_flacenc"
        pattern = "libFLAC (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libFLAC (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcodec2_soft_flacenc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_24 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libcom_err"
        pattern = "libcom_err.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcom_err.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcom_err.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcomps_1 {
    meta:
        app_name = "libcomps"
        type = "1"
        target = "libcomps"
        pattern = "libcomps/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libcomps\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcomps.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_16 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libcp1plugin"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcp1plugin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cracklib_3 {
    meta:
        app_name = "cracklib"
        type = "1"
        target = "libcrack"
        pattern = "libcrack.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcrack.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcrack.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libcroco_1 {
    meta:
        app_name = "libcroco"
        type = "1"
        target = "libcroco-0.6"
        pattern = "libcroco-(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /libcroco-(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcroco-0.6.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_24 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libcrypt-2.26"
        pattern = "libcrypt-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcrypt-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcrypt-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_101 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "libcrypto"
        pattern = "libcrypto.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcrypto.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcrypto.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_102 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "libcrypto"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcrypto.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup_4 {
    meta:
        app_name = "cryptsetup"
        type = "1"
        target = "libcryptsetup"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcryptsetup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cups {
    meta:
        app_name = "cups"
        type = "1"
        target = "libcups"
        pattern = "CUPS/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /CUPS\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcups.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule curl_1 {
    meta:
        app_name = "curl"
        type = "1"
        target = "libcurl"
        pattern = "libcurl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libcurl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcurl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule curl_2 {
    meta:
        app_name = "curl"
        type = "1"
        target = "libcurl"
        pattern = "libcurl[ /](([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libcurl[ \/](([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libcurl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libdaemon {
    meta:
        app_name = "libdaemon"
        type = "1"
        target = "libdaemon"
        pattern = "libdaemon-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libdaemon-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdaemon.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule berkeley_db {
    meta:
        app_name = "berkeley_db"
        type = "1"
        target = "libdb-5.3"
        pattern = "Berkeley DB (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Berkeley DB (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdb-5.3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_16 {
    meta:
        app_name = "dbus"
        type = "1"
        target = "libdbus-1"
        pattern = "libdbus-1.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libdbus-1.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdbus-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule d_bus_5 {
    meta:
        app_name = "d-bus"
        type = "1"
        target = "libdbus-1"
        pattern = "libdbus (([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /libdbus (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdbus-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_glib_1 {
    meta:
        app_name = "dbus-glib"
        type = "1"
        target = "libdbus-glib-1"
        pattern = "dbus-glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdbus-glib-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_57 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdebuginfod"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdebuginfod.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2_2 {
    meta:
        app_name = "lvm2"
        type = "1"
        target = "libdevmapper"
        pattern = "libdevmapper.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libdevmapper.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdevmapper.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2_3 {
    meta:
        app_name = "lvm2"
        type = "1"
        target = "libdevmapper-event"
        pattern = "libdevmapper-event.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libdevmapper-event.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdevmapper-event.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_25 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libdl-2.26"
        pattern = "libdl-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libdl-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdl-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_2 {
    meta:
        app_name = "bind"
        type = "1"
        target = "libdns"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdns.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_58 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdw"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_59 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdw-0.168"
        pattern = "libdw-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libdw-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdw-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_60 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdw-0.168"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdw-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_61 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdw-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdw-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_62 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libdw-0.178"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libdw-0.178.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_25 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libe2p"
        pattern = "libe2p.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libe2p.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libe2p.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_63 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_aarch64-0.168"
        pattern = "libebl_aarch64-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_aarch64-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_aarch64-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_64 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_aarch64-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_aarch64-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_65 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_alpha-0.168"
        pattern = "libebl_alpha-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_alpha-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_alpha-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_66 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_alpha-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_alpha-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_67 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_arm-0.168"
        pattern = "libebl_arm-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_arm-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_arm-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_68 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_arm-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_arm-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_69 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_bpf-0.168"
        pattern = "libebl_bpf-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_bpf-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_bpf-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_70 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_bpf-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_bpf-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_71 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_i386-0.168"
        pattern = "libebl_i386-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_i386-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_i386-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_72 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_i386-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_i386-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_73 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ia64-0.168"
        pattern = "libebl_ia64-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_ia64-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ia64-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_74 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ia64-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ia64-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_75 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_m68k-0.168"
        pattern = "libebl_m68k-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_m68k-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_m68k-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_76 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_m68k-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_m68k-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_77 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_mips-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_mips-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_78 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_parisc-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_parisc-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_79 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ppc-0.168"
        pattern = "libebl_ppc-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_ppc-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ppc-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_80 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ppc-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ppc-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_81 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ppc64-0.168"
        pattern = "libebl_ppc64-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_ppc64-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ppc64-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_82 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_ppc64-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_ppc64-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_83 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_s390-0.168"
        pattern = "libebl_s390-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_s390-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_s390-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_84 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_s390-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_s390-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_85 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_sh-0.168"
        pattern = "libebl_sh-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_sh-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_sh-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_86 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_sh-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_sh-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_87 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_sparc-0.168"
        pattern = "libebl_sparc-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_sparc-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_sparc-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_88 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_sparc-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_sparc-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_89 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_tilegx-0.168"
        pattern = "libebl_tilegx-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_tilegx-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_tilegx-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_90 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_tilegx-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_tilegx-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_91 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_x86_64-0.168"
        pattern = "libebl_x86_64-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebl_x86_64-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_x86_64-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_92 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libebl_x86_64-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebl_x86_64-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_1 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_among"
        pattern = "libebt_among.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_among.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_among.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_2 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_AUDIT"
        pattern = "libebt_AUDIT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_AUDIT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_AUDIT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_7 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libebt_dnat"
        pattern = "libebt_dnat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_dnat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_dnat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_3 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_limit"
        pattern = "libebt_limit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_limit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_limit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_4 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_nat"
        pattern = "libebt_nat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_nat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_nat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_8 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libebt_snat"
        pattern = "libebt_snat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_snat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_snat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_5 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_standard"
        pattern = "libebt_standard.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_standard.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_standard.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_6 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebt_ulog"
        pattern = "libebt_ulog.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebt_ulog.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebt_ulog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_7 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebtable_broute"
        pattern = "libebtable_broute.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebtable_broute.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebtable_broute.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_8 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebtable_filter"
        pattern = "libebtable_filter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebtable_filter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebtable_filter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_9 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebtable_nat"
        pattern = "libebtable_nat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebtable_nat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebtable_nat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_10 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebtc"
        pattern = "libebtc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libebtc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebtc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ebtables_11 {
    meta:
        app_name = "ebtables"
        type = "1"
        target = "libebtc"
        pattern = "ebtables v(([0-9]+\\.){1,}[0-9]+(-[0-9])?)"

    strings:
        $pattern = /ebtables v(([0-9]{1,4}\.){1,}[0-9]{1,4}(-[0-9])?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libebtc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libedit {
    meta:
        app_name = "libedit"
        type = "1"
        target = "libedit"
        pattern = "libedit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libedit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libedit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libedit_1 {
    meta:
        app_name = "libedit"
        type = "1"
        target = "libedit"
        pattern = "libedit-[0-9]+-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libedit-[0-9]{1,4}-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libedit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_93 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_94 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf-0.148"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf-0.148.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_95 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf-0.168"
        pattern = "libelf-0.168.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libelf-0.168.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf-0.168.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_96 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf-0.170"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf-0.170.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_97 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf-0.178"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf-0.178.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_98 {
    meta:
        app_name = "elfutils"
        type = "1"
        target = "libelf-0.186"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libelf-0.186.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libestr {
    meta:
        app_name = "libestr"
        type = "1"
        target = "libestr"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libestr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_1 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libevent"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-stable"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libevent.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_2 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libevent-2.0"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)-stable"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libevent-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_3 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libevent-2.1"
        pattern = "libevent-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libevent-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libevent-2.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_4 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libevent_core-2.1"
        pattern = "libevent-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libevent-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libevent_core-2.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_5 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libevent_extra-2.1"
        pattern = "libevent-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libevent-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libevent_extra-2.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_8 {
    meta:
        app_name = "weston"
        type = "1"
        target = "libexec_weston"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libexec_weston.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exiv2 {
    meta:
        app_name = "exiv2"
        type = "1"
        target = "libexiv2"
        pattern = "exiv2/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /exiv2\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libexiv2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule expat {
    meta:
        app_name = "expat"
        type = "1"
        target = "libexpat"
        pattern = "libexpat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libexpat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libexpat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libexpat_1 {
    meta:
        app_name = "libexpat"
        type = "1"
        target = "libexpat"
        pattern = "expat_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /expat_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libexpat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxslt {
    meta:
        app_name = "libxslt"
        type = "1"
        target = "libexslt"
        pattern = "libxslt-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxslt-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libexslt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_26 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libext2fs"
        pattern = "libext2fs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libext2fs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libext2fs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_27 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libext2fs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libext2fs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_28 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libext2fs"
        pattern = "EXT2FS Library version (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /EXT2FS Library version (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libext2fs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libfastjson {
    meta:
        app_name = "libfastjson"
        type = "1"
        target = "libfastjson"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfastjson.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libfastrtps"
        pattern = "^([1-3]\\.([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /([1-3]\.([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfastrtps.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule x_server {
    meta:
        app_name = "x_server"
        type = "1"
        target = "libfb"
        pattern = "xorg-server-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /xorg-server-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfb.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_105 {
    meta:
        app_name = "util-linux"
        type = "1"
        target = "libfdisk"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfdisk.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule flac_1 {
    meta:
        app_name = "flac"
        type = "1"
        target = "libFLAC"
        pattern = "libFLAC (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libFLAC (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libFLAC.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule fontconfig {
    meta:
        app_name = "fontconfig"
        type = "1"
        target = "libfontconfig"
        pattern = "fontconfig-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /fontconfig-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfontconfig.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_2 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libform"
        pattern = "libform.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libform.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libform.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_3 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libformw"
        pattern = "libformw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libformw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libformw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_4 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libfreeblpriv3"
        pattern = "NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfreeblpriv3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libjpeg {
    meta:
        app_name = "libjpeg"
        type = "1"
        target = "libfreeimage-3.17.0"
        pattern = "([0-9]+(\\.[0-9]+)*[a-z]?)  [0-9]{2}-[A-Z][a-z][a-z]-[0-9]+"

    strings:
        $pattern = /([0-9]{1,4}(\.[0-9]{1,4})*[a-z]?)  [0-9]{2}-[A-Z][a-z][a-z]-[0-9]{1,4}/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfreeimage-3.17.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule fribidi {
    meta:
        app_name = "fribidi"
        type = "1"
        target = "libfribidi"
        pattern = "\\(GNU FriBidi\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\(GNU FriBidi\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfribidi.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libfuse_1 {
    meta:
        app_name = "libfuse"
        type = "1"
        target = "libfuse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libfuse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_6 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgailutil"
        pattern = "gtk\\+-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /gtk\+-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgailutil.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_7 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgailutil-3"
        pattern = "gtk\\+-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /gtk\+-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgailutil-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_17 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libgcc_s"
        pattern = "libgcc_s.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libgcc_s.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgcc_s.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgcrypt {
    meta:
        app_name = "libgcrypt"
        type = "1"
        target = "libgcrypt"
        pattern = "libgcrypt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libgcrypt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgcrypt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgcrypt_1 {
    meta:
        app_name = "libgcrypt"
        type = "1"
        target = "libgcrypt"
        pattern = "This is Libgcrypt ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /This is Libgcrypt ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgcrypt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_8 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgdk-3"
        pattern = "gtk\\+-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /gtk\+-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgdk-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_9 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgdk-x11-2.0"
        pattern = "gtk\\+-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /gtk\+-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgdk-x11-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_5 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libgdk_pixbuf-2.0"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgdk_pixbuf-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_6 {
    meta:
        app_name = "gettext"
        type = "1"
        target = "libgettextlib-0.21"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgettextlib-0.21.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_7 {
    meta:
        app_name = "gettext"
        type = "1"
        target = "libgettextpo"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgettextpo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_8 {
    meta:
        app_name = "gettext"
        type = "1"
        target = "libgettextsrc-0.21"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgettextsrc-0.21.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_122 {
    meta:
        app_name = "glib"
        type = "1"
        target = "libgio-2.0"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgio-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_networking {
    meta:
        app_name = "glib-networking"
        type = "1"
        target = "libgiognutls"
        pattern = "glib-networking-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-networking-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgiognutls.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_123 {
    meta:
        app_name = "glib"
        type = "1"
        target = "libglib-2.0"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libglib-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gmp {
    meta:
        app_name = "gmp"
        type = "1"
        target = "libgmp"
        pattern = "(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgmp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnutls_1 {
    meta:
        app_name = "gnutls"
        type = "1"
        target = "libgnutls"
        pattern = "gnutls-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gnutls-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgnutls.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_124 {
    meta:
        app_name = "glib"
        type = "1"
        target = "libgobject-2.0"
        pattern = "glib-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /glib-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgobject-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_18 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libgomp"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgomp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgpg_error_1 {
    meta:
        app_name = "libgpg-error"
        type = "1"
        target = "libgpg-error"
        pattern = "libgpg-error.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libgpg-error.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpg-error.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgpg_error_2 {
    meta:
        app_name = "libgpg-error"
        type = "1"
        target = "libgpg-error"
        pattern = "This is Libgpg-error (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /This is Libgpg-error (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpg-error.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_5 {
    meta:
        app_name = "gpgme"
        type = "1"
        target = "libgpgme"
        pattern = "gpgme-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpgme-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpgme.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpgme_6 {
    meta:
        app_name = "gpgme"
        type = "1"
        target = "libgpgmepp"
        pattern = "gpgme-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpgme-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpgmepp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgpr"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gpsd_7 {
    meta:
        app_name = "gpsd"
        type = "1"
        target = "libgpsdpacket"
        pattern = "gpsd-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpsd-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgpsdpacket.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_1 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgrpc"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgrpc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_2 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgrpc++"
        pattern = "grpc/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /grpc\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgrpc\+\+.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_3 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgrpc++_alts"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgrpc\+\+_alts.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_4 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgrpc++_reflection"
        pattern = "grpc/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /grpc\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgrpc\+\+_reflection.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_5 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libgrpc_unsecure"
        pattern = "grpc/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /grpc\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgrpc_unsecure.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gsoap {
    meta:
        app_name = "gsoap"
        type = "1"
        target = "libgsoap"
        pattern = "soap_init_REQUIRE_lib_v([0-9]{5})"

    strings:
        $pattern = /soap_init_REQUIRE_lib_v([0-9]{5})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsoap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_78 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaccurip"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaccurip.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_79 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstadaptivedemux-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)/gst-libs"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/gst-libs/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstadaptivedemux-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_80 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstadder"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstadder.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_81 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstadpcmdec"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstadpcmdec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_82 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstadpcmenc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstadpcmenc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_83 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaes"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_84 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaiff"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaiff.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_85 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstalaw"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstalaw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_86 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstallocators-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstallocators-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_87 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstalpha"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstalpha.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_88 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstalphacolor"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstalphacolor.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_89 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstalsa"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstalsa.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_90 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstapetag"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstapetag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_91 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstapp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstapp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_92 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstapp-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstapp-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_93 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstasfmux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstasfmux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_94 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudio-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)/gst-libs"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/gst-libs/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudio-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_95 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiobuffersplit"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiobuffersplit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_96 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudioconvert"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudioconvert.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_97 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiofx"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiofx.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_98 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiofxbad"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiofxbad.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_99 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiolatency"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiolatency.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_100 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiomixer"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiomixer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_101 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiomixmatrix"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiomixmatrix.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_102 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudioparsers"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudioparsers.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_103 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiorate"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiorate.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_104 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudioresample"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudioresample.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_105 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiotestsrc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiotestsrc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_106 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstaudiovisualizers"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstaudiovisualizers.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_107 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstauparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstauparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_108 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstautoconvert"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstautoconvert.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_109 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstautodetect"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstautodetect.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_110 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstavi"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstavi.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_111 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbadvideo-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbadvideo-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_112 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbase-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)/libs"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/libs/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbase-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_113 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbasecamerabinsrc-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbasecamerabinsrc-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_114 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbayer"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbayer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_115 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbluez"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbluez.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_116 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbwhdcp"
        pattern = "([0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbwhdcp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_117 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstbz2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstbz2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_118 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcairo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcairo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_119 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcamerabin"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcamerabin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_120 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcheck-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcheck-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_121 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstclosedcaption"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstclosedcaption.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_122 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcodecalpha"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcodecalpha.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_123 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcodecparsers-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcodecparsers-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_124 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcoloreffects"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcoloreffects.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_125 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcompositor"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcompositor.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_126 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcontroller-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcontroller-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_127 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcoreelements"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcoreelements.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_128 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcurl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcurl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_129 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstcutter"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstcutter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_130 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdashdemux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdashdemux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_131 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdebug"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdebug.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_132 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdebugutilsbad"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdebugutilsbad.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_133 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdecklink"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdecklink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_134 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdeinterlace"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdeinterlace.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_135 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdrm-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdrm-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_136 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdtls"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdtls.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_137 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdtmf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdtmf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_138 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdvb"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdvb.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_139 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdvbsubenc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdvbsubenc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_140 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdvbsuboverlay"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdvbsuboverlay.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_141 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstdvdspu"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstdvdspu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_142 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsteffectv"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsteffectv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_143 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstencoding"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstencoding.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_144 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstequalizer"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstequalizer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_145 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfaceoverlay"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfaceoverlay.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_146 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfbdevsink"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfbdevsink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_147 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfestival"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfestival.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_148 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfft-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfft-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_149 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfieldanalysis"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfieldanalysis.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_150 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstflac"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstflac.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_151 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstflv"
        pattern = "GStreamer (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /GStreamer (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstflv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_152 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstflxdec"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstflxdec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_153 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfreeverb"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfreeverb.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_154 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstfrei0r"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstfrei0r.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_155 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgaudieffects"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgaudieffects.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_156 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgdkpixbuf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgdkpixbuf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_157 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgdp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgdp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_158 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgeometrictransform"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgeometrictransform.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_159 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgio"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_160 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgl-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgl-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_161 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgoom"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgoom.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_162 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstgoom2k1"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstgoom2k1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_163 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsthls"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsthls.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_164 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsticydemux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsticydemux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_165 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstid3demux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstid3demux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_166 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstid3tag"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstid3tag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_167 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstimagefreeze"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstimagefreeze.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_168 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstinsertbin-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstinsertbin-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_169 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstinter"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstinter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_170 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstinterlace"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstinterlace.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_171 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstinterleave"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstinterleave.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_172 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstipcpipeline"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstipcpipeline.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_173 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstisoff-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstisoff-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_174 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstisomp4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstisomp4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_175 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstivfparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstivfparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_176 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstivtc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstivtc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_177 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstjp2kdecimator"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstjp2kdecimator.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_178 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstjpeg"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstjpeg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_179 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstjpegformat"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstjpegformat.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_180 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstkms"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstkms.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_181 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstlame"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstlame.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_182 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstlegacyrawparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstlegacyrawparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_183 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstlevel"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstlevel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_184 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstlibav"
        pattern = "gst-libav-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-libav-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstlibav.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_185 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmatroska"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmatroska.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_186 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmidi"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmidi.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_187 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmms"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmms.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_188 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmonoscope"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmonoscope.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_189 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmpegpsdemux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmpegpsdemux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_190 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmpegpsmux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmpegpsmux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_191 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmpegtsdemux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmpegtsdemux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_192 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmpegtsmux"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmpegtsmux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_193 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmpg123"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmpg123.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_194 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmtkhuffman"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmtkhuffman.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_195 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmtkmdp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmtkmdp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_196 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmulaw"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmulaw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_197 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmultifile"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmultifile.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_198 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmultipart"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmultipart.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_199 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstmxf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstmxf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_200 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstnavigationtest"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstnavigationtest.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_201 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstnet-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstnet-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_202 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstnetsim"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstnetsim.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_203 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstogg"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstogg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_204 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstopengl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstopengl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_205 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstopenglmixers"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstopenglmixers.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_206 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstopusparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstopusparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_207 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstossaudio"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstossaudio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_208 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstoverlaycomposition"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstoverlaycomposition.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_209 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpango"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpango.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_210 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpbtypes"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpbtypes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_211 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpbutils-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)/gst-libs"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/gst-libs/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpbutils-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_212 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpcapparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpcapparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_213 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstplayback"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstplayback.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_214 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstplayer-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstplayer-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_215 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpng"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpng.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_216 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpnm"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpnm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_217 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstproxy"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstproxy.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_218 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstpulseaudio"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstpulseaudio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_219 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrawparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrawparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_220 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstreamer-1.0"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstreamer-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_221 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstremovesilence"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstremovesilence.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_222 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstreplaygain"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstreplaygain.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_223 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrfbsrc"
        pattern = "^([0-1]\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-1]\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrfbsrc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_224 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstriff-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstriff-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_225 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrist"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrist.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_226 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrsvg"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrsvg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_227 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtmp2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtmp2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_228 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_229 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtp-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtp-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_230 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtpmanager"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtpmanager.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_231 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtpmanagerbad"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtpmanagerbad.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_232 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtponvif"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtponvif.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_233 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtsp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtsp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_234 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstrtsp-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtsp-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gst_rtsp_server {
    meta:
        app_name = "gst-rtsp-server"
        type = "1"
        target = "libgstrtspserver-1.0"
        pattern = "gst-rtsp-server-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-rtsp-server-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstrtspserver-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_235 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsbc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsbc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_236 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsdp-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsdp-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_237 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsdpelem"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsdpelem.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_238 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsegmentclip"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsegmentclip.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_239 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstshapewipe"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstshapewipe.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_240 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstshm"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstshm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_241 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsiren"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsiren.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_242 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsmooth"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsmooth.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_243 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsmoothstreaming"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsmoothstreaming.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_244 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsmpte"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsmpte.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_245 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsndfile"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsndfile.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_246 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsoup"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsoup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_247 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstspectrum"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstspectrum.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_248 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstspeed"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstspeed.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_249 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstspeex"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstspeex.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_250 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgststereo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgststereo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_251 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsubenc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsubenc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_252 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstsubparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstsubparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_253 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstswitchbin"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstswitchbin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_254 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttag-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)/gst-libs"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})\/gst-libs/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttag-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_255 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttaglib"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttaglib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_256 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttcp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttcp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_257 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttheora"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttheora.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_258 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttimecode"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttimecode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_259 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttranscode"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttranscode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pitivi {
    meta:
        app_name = "pitivi"
        type = "1"
        target = "libgsttranscoder-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttranscoder-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_260 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstttmlsubs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstttmlsubs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_261 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsttypefindfunctions"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsttypefindfunctions.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_262 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstudp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstudp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_263 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsturidownloader-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsturidownloader-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_264 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstuvch264"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstuvch264.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_265 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvcdsrc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvcdsrc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_266 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideo-1.0"
        pattern = "gst-plugins-base-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-base-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideo-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_267 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideo4linux2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideo4linux2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_268 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideobox"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideobox.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_269 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideoconvert"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideoconvert.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_270 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideocrop"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideocrop.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_271 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideofilter"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideofilter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_272 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideofiltersbad"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideofiltersbad.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_273 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideoframe_audiolevel"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideoframe_audiolevel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_274 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideomixer"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideomixer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_275 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideoparsersbad"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideoparsersbad.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_276 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideorate"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideorate.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_277 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideoscale"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideoscale.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_278 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideosignal"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideosignal.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_279 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvideotestsrc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvideotestsrc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_280 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvmnc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvmnc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_281 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvolume"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvolume.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_282 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstvorbis"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstvorbis.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_283 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstwavenc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstwavenc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_284 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstwavparse"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstwavparse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_285 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstwaylandsink"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstwaylandsink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_286 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstwebp"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstwebp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_287 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstwebrtc-1.0"
        pattern = "gst-plugins-bad-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gst-plugins-bad-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstwebrtc-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_288 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsty4mdec"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsty4mdec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_289 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgsty4menc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgsty4menc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_290 {
    meta:
        app_name = "gstreamer"
        type = "1"
        target = "libgstyadif"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgstyadif.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_125 {
    meta:
        app_name = "glib"
        type = "1"
        target = "libgthread-2.0"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgthread-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_10 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgtk-3"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgtk-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_11 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libgtk-x11-2.0"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libgtk-x11-2.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule harfbuzz {
    meta:
        app_name = "harfbuzz"
        type = "1"
        target = "libharfbuzz"
        pattern = "harfbuzz-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /harfbuzz-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libharfbuzz.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule harfbuzz_1 {
    meta:
        app_name = "harfbuzz"
        type = "1"
        target = "libharfbuzz-icu"
        pattern = "harfbuzz-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /harfbuzz-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libharfbuzz-icu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule harfbuzz_2 {
    meta:
        app_name = "harfbuzz"
        type = "1"
        target = "libharfbuzz-subset"
        pattern = "harfbuzz-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /harfbuzz-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libharfbuzz-subset.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule harfbuzz_3 {
    meta:
        app_name = "harfbuzz"
        type = "1"
        target = "libharfbuzz_ng"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libharfbuzz_ng.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_103 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "libhe6"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libhe6.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_48 {
    meta:
        app_name = "nettle"
        type = "1"
        target = "libhogweed"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libhogweed.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_19 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libhwasan"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libhwasan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libical {
    meta:
        app_name = "libical"
        type = "1"
        target = "libical"
        pattern = "libical-(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /libical-(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libical.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libical_1 {
    meta:
        app_name = "libical"
        type = "1"
        target = "libical_cxx"
        pattern = "libical-(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /libical-(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libical_cxx.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libical_2 {
    meta:
        app_name = "libical"
        type = "1"
        target = "libicalss"
        pattern = "libical-(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /libical-(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libicalss.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libical_3 {
    meta:
        app_name = "libical"
        type = "1"
        target = "libicalvcal"
        pattern = "libical-(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /libical-(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libicalvcal.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule international_components_for_unicode_2 {
    meta:
        app_name = "international_components_for_unicode"
        type = "1"
        target = "libicutu"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libicutu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule international_components_for_unicode_3 {
    meta:
        app_name = "international_components_for_unicode"
        type = "1"
        target = "libicuuc"
        pattern = "^([0-9]+\\.[0-9]+\\.?[0-9]*)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libicuuc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mad_libmad {
    meta:
        app_name = "mad_libmad"
        type = "1"
        target = "libid3tag"
        pattern = "libid3tag-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /libid3tag-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libid3tag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libidn {
    meta:
        app_name = "libidn"
        type = "1"
        target = "libidn"
        pattern = "([0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libidn.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libidn2 {
    meta:
        app_name = "libidn2"
        type = "1"
        target = "libidn2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libidn2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_13 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libimcv"
        pattern = "libimcv.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libimcv.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libimcv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput {
    meta:
        app_name = "libinput"
        type = "1"
        target = "libinput"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_1 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-debug-events"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-debug-events/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_2 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-debug-tablet"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-debug-tablet/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_3 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-fuzz-extract"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-fuzz-extract/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_4 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-list-devices"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-list-devices/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_5 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-measure"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-measure/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_6 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-measure-touchpad-tap"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-measure-touchpad-tap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_7 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-quirks"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-quirks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libinput_8 {
    meta:
        app_name = "libinput"
        type = "2"
        target = "libinput-record"
        pattern = "libinput-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libinput-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libinput-record/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_9 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip4tc"
        pattern = "libip4tc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip4tc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip4tc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_10 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_ah"
        pattern = "libip6t_ah.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_ah.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_ah.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_11 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_DNAT"
        pattern = "libip6t_DNAT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_DNAT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_DNAT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_12 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_DNPT"
        pattern = "libip6t_DNPT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_DNPT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_DNPT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_13 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_dst"
        pattern = "libip6t_dst.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_dst.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_dst.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_14 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_eui64"
        pattern = "libip6t_eui64.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_eui64.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_eui64.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_15 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_frag"
        pattern = "libip6t_frag.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_frag.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_frag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_16 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_hbh"
        pattern = "libip6t_hbh.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_hbh.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_hbh.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_17 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_HL"
        pattern = "libip6t_HL.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_HL.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_HL.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_18 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_icmp6"
        pattern = "libip6t_icmp6.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_icmp6.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_icmp6.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_19 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_ipv6header"
        pattern = "libip6t_ipv6header.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_ipv6header.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_ipv6header.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_20 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_LOG"
        pattern = "libip6t_LOG.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_LOG.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_LOG.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_21 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_MASQUERADE"
        pattern = "libip6t_MASQUERADE.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_MASQUERADE.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_MASQUERADE.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_22 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_mh"
        pattern = "libip6t_mh.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_mh.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_mh.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_23 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_NETMAP"
        pattern = "libip6t_NETMAP.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_NETMAP.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_NETMAP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_24 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_REDIRECT"
        pattern = "libip6t_REDIRECT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_REDIRECT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_REDIRECT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_25 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_REJECT"
        pattern = "libip6t_REJECT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_REJECT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_REJECT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_26 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_rt"
        pattern = "libip6t_rt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_rt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_rt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_27 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_SNAT"
        pattern = "libip6t_SNAT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_SNAT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_SNAT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_28 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_SNPT"
        pattern = "libip6t_SNPT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_SNPT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_SNPT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_29 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6t_srh"
        pattern = "libip6t_srh.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6t_srh.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6t_srh.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_30 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libip6tc"
        pattern = "libip6tc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libip6tc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libip6tc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iperf3_1 {
    meta:
        app_name = "iperf3"
        type = "1"
        target = "libiperf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libiperf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_31 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_ah"
        pattern = "libipt_ah.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_ah.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_ah.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_32 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_CLUSTERIP"
        pattern = "libipt_CLUSTERIP.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_CLUSTERIP.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_CLUSTERIP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_33 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_DNAT"
        pattern = "libipt_DNAT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_DNAT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_DNAT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_34 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_ECN"
        pattern = "libipt_ECN.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_ECN.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_ECN.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_35 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_icmp"
        pattern = "libipt_icmp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_icmp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_icmp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_36 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_LOG"
        pattern = "libipt_LOG.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_LOG.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_LOG.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_37 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_MASQUERADE"
        pattern = "libipt_MASQUERADE.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_MASQUERADE.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_MASQUERADE.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_38 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_NETMAP"
        pattern = "libipt_NETMAP.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_NETMAP.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_NETMAP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_39 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_realm"
        pattern = "libipt_realm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_realm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_realm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_40 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_REDIRECT"
        pattern = "libipt_REDIRECT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_REDIRECT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_REDIRECT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_41 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_REJECT"
        pattern = "libipt_REJECT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_REJECT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_REJECT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_42 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_SNAT"
        pattern = "libipt_SNAT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_SNAT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_SNAT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_43 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_TTL"
        pattern = "libipt_TTL.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_TTL.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_TTL.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_44 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libipt_ULOG"
        pattern = "libipt_ULOG.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libipt_ULOG.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libipt_ULOG.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_3 {
    meta:
        app_name = "bind"
        type = "1"
        target = "libirs"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libirs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_4 {
    meta:
        app_name = "bind"
        type = "1"
        target = "libisc"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libisc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_5 {
    meta:
        app_name = "bind"
        type = "1"
        target = "libisccfg"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libisccfg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule jansson {
    meta:
        app_name = "jansson"
        type = "1"
        target = "libjansson"
        pattern = "jansson-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /jansson-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjansson.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule jasper {
    meta:
        app_name = "jasper"
        type = "1"
        target = "libjasper"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjasper.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule jbig_kit {
    meta:
        app_name = "jbig-kit"
        type = "1"
        target = "libjbig"
        pattern = "JBIG-KIT ([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /JBIG-KIT ([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjbig.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule jemalloc {
    meta:
        app_name = "jemalloc"
        type = "1"
        target = "libjemalloc"
        pattern = "libjemalloc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libjemalloc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjemalloc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libjpeg_turbo {
    meta:
        app_name = "libjpeg-turbo"
        type = "1"
        target = "libjni_jpegstream"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjni_jpegstream.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libjpeg_turbo_1 {
    meta:
        app_name = "libjpeg-turbo"
        type = "1"
        target = "libjni_jpegutil"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjni_jpegutil.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libjpeg_turbo_2 {
    meta:
        app_name = "libjpeg-turbo"
        type = "1"
        target = "libjpeg"
        pattern = "libjpeg-turbo version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libjpeg-turbo version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjpeg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule json_c {
    meta:
        app_name = "json-c"
        type = "1"
        target = "libjson-c"
        pattern = "libjson-c.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libjson-c.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjson-c.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule json_c_1 {
    meta:
        app_name = "json-c"
        type = "1"
        target = "libjson-c"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libjson-c.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_8 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test01"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test01/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_9 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test02"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test02/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_10 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test03"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test03/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_11 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test04"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test04/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_12 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test05"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test05/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_13 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test06"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test06/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_14 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test07"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test07/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_15 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test08"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test08/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_16 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test09"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test09/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_17 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test10"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test10/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_18 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test11"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test11/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_19 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkbdfile-test12"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkbdfile-test12/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_20 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-bkeymap"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-bkeymap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_21 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-dumpkeys"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-dumpkeys/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_22 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-mktable"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-mktable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_23 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-showmaps"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-showmaps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_24 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test01"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test01/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_25 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test02"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test02/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_26 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test03"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test03/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_27 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test04"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test04/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_28 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test05"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test05/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_29 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test06"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test06/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_30 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test07"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test07/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_31 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test08"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test08/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_32 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test09"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test09/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_33 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test10"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test10/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_34 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test11"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test11/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_35 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test12"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test12/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_36 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test13"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test13/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_37 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test14"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test14/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_38 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test15"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test15/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_39 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test16"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test16/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_40 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test17"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test17/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_41 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "libkeymap-test18"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeymap-test18/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule keyutils_2 {
    meta:
        app_name = "keyutils"
        type = "1"
        target = "libkeyutils"
        pattern = "libkeyutils.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libkeyutils.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeyutils.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule keyutils_3 {
    meta:
        app_name = "keyutils"
        type = "1"
        target = "libkeyutils"
        pattern = "keyutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /keyutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkeyutils.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kmod_2 {
    meta:
        app_name = "kmod"
        type = "1"
        target = "libkmod"
        pattern = "libkmod.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libkmod.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkmod.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kerberos {
    meta:
        app_name = "kerberos"
        type = "1"
        target = "libkrb5"
        pattern = "KRB5_BRAND: [ 0-9a-z/-]+([0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /KRB5_BRAND: [ 0-9a-z\/-]+([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libkrb5.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libskba {
    meta:
        app_name = "libskba"
        type = "1"
        target = "libksba"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)-"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libksba.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule little_cms_color_engine {
    meta:
        app_name = "little_cms_color_engine"
        type = "1"
        target = "liblcms2"
        pattern = "lcms2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lcms2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblcms2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite_1 {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libldm"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libldm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule liblogging {
    meta:
        app_name = "liblogging"
        type = "1"
        target = "liblogging-stdlog"
        pattern = "liblogging-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /liblogging-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblogging-stdlog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_20 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "liblsan"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblsan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libtool {
    meta:
        app_name = "libtool"
        type = "1"
        target = "libltdl"
        pattern = "libtool-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libtool-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libltdl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_21 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "liblto_plugin"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblto_plugin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_3 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ctl"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ctl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_4 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust"
        pattern = "lttng-ust-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-ust-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_5 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust-common"
        pattern = "lttng-ust-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /lttng-ust-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust-common.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_6 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust-ctl"
        pattern = "lttng-ust-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-ust-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust-ctl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_7 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust-dl"
        pattern = "lttng-ust-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-ust-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust-dl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_8 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust-libc-wrapper"
        pattern = "lttng-ust-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-ust-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust-libc-wrapper.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_9 {
    meta:
        app_name = "ust"
        type = "1"
        target = "liblttng-ust-tracepoint"
        pattern = "lttng-ust-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-ust-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblttng-ust-tracepoint.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua {
    meta:
        app_name = "lua"
        type = "1"
        target = "liblua"
        pattern = "LuaVersion: Lua ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LuaVersion: Lua ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblua.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_1 {
    meta:
        app_name = "lua"
        type = "1"
        target = "liblua5.3"
        pattern = "liblua5.3.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /liblua5.3.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblua5.3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_2 {
    meta:
        app_name = "lua"
        type = "1"
        target = "liblua5.3"
        pattern = "LuaVersion: Lua ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LuaVersion: Lua ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblua5.3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2_4 {
    meta:
        app_name = "lvm2"
        type = "1"
        target = "liblvm2cmd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)\\([0-9]\\) \\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})\([0-9]\) \([0-9]{4}-[0-9]{2}-[0-9]{2}\)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblvm2cmd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bind_6 {
    meta:
        app_name = "bind"
        type = "1"
        target = "liblwres"
        pattern = "bind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblwres.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lz4 {
    meta:
        app_name = "lz4"
        type = "1"
        target = "liblz4"
        pattern = "liblz4.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /liblz4.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblz4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lz4_1 {
    meta:
        app_name = "lz4"
        type = "1"
        target = "liblz4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblz4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz {
    meta:
        app_name = "xz"
        type = "1"
        target = "liblzma"
        pattern = "liblzma.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /liblzma.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblzma.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_1 {
    meta:
        app_name = "xz"
        type = "1"
        target = "liblzma"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblzma.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lzo_1 {
    meta:
        app_name = "lzo"
        type = "1"
        target = "liblzo2"
        pattern = "liblzo2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /liblzo2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblzo2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule liblzo2 {
    meta:
        app_name = "liblzo2"
        type = "1"
        target = "liblzo2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /liblzo2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_26 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libm-2.26"
        pattern = "libm-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libm-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libm-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule file_2 {
    meta:
        app_name = "file"
        type = "1"
        target = "libmagic"
        pattern = "libmagic.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmagic.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmagic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule file_3 {
    meta:
        app_name = "file"
        type = "1"
        target = "libmagic"
        pattern = "^([0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmagic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mbedtls {
    meta:
        app_name = "mbedtls"
        type = "1"
        target = "libmbedcrypto"
        pattern = "libmbedcrypto.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmbedcrypto.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmbedcrypto.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mbed_tls {
    meta:
        app_name = "mbed_tls"
        type = "1"
        target = "libmbedcrypto"
        pattern = "mbed TLS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mbed TLS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmbedcrypto.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmbim {
    meta:
        app_name = "libmbim"
        type = "1"
        target = "libmbim-glib"
        pattern = "libmbim-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmbim-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmbim-glib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_4 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libmenu"
        pattern = "libmenu.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmenu.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmenu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_5 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libmenuw"
        pattern = "libmenuw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmenuw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmenuw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmicrohttpd {
    meta:
        app_name = "libmicrohttpd"
        type = "1"
        target = "libmicrohttpd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmicrohttpd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule miniupnpd {
    meta:
        app_name = "miniupnpd"
        type = "1"
        target = "libminiupnpc"
        pattern = "MiniUPnPc/([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /MiniUPnPc\/([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libminiupnpc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmnl {
    meta:
        app_name = "libmnl"
        type = "1"
        target = "libmnl"
        pattern = "libmnl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmnl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmnl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_106 {
    meta:
        app_name = "util-linux"
        type = "1"
        target = "libmount"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmount.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule firefox_esr_1 {
    meta:
        app_name = "firefox_esr"
        type = "1"
        target = "libmozjs-60"
        pattern = "mozjs/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mozjs\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmozjs-60.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lame_1 {
    meta:
        app_name = "lame"
        type = "1"
        target = "libmp3lame"
        pattern = "LAME(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LAME(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmp3lame.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnu_mpfr {
    meta:
        app_name = "gnu_mpfr"
        type = "1"
        target = "libmpfr"
        pattern = "mpfr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpfr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmpfr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123 {
    meta:
        app_name = "mpg123"
        type = "1"
        target = "libmpg123"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmpg123.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp {
    meta:
        app_name = "libmtp"
        type = "1"
        target = "libmtp"
        pattern = "libmtp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmtp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_27 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libmvec-2.26"
        pattern = "libmvec-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libmvec-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libmvec-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_6 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libncurses"
        pattern = "libncurses.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libncurses.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libncurses.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_7 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libncurses++"
        pattern = "libncurses\\+\\+.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libncurses\+\+.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libncurses\+\+.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_8 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libncursesw"
        pattern = "libncursesw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libncursesw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libncursesw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_9 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libncursesw"
        pattern = "ncurses ([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /ncurses ([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libncursesw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule neon {
    meta:
        app_name = "neon"
        type = "1"
        target = "libneon"
        pattern = "neon (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /neon (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libneon.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnetfilter_conntrack {
    meta:
        app_name = "libnetfilter_conntrack"
        type = "1"
        target = "libnetfilter_conntrack"
        pattern = "libnetfilter_conntrack.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnetfilter_conntrack.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnetfilter_conntrack.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnetfilter_conntrack_1 {
    meta:
        app_name = "libnetfilter_conntrack"
        type = "1"
        target = "libnetfilter_conntrack"
        pattern = "libnetfilter_conntrack-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnetfilter_conntrack-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnetfilter_conntrack.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_49 {
    meta:
        app_name = "nettle"
        type = "1"
        target = "libnettle"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnettle.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnfnetlink {
    meta:
        app_name = "libnfnetlink"
        type = "1"
        target = "libnfnetlink"
        pattern = "libnfnetlink.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnfnetlink.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnfnetlink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnfnetlink_1 {
    meta:
        app_name = "libnfnetlink"
        type = "1"
        target = "libnfnetlink"
        pattern = "libnfnetlink-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnfnetlink-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnfnetlink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnftnl {
    meta:
        app_name = "libnftnl"
        type = "1"
        target = "libnftnl"
        pattern = "libnftnl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnftnl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnftnl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2_2 {
    meta:
        app_name = "nghttp2"
        type = "1"
        target = "libnghttp2"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnghttp2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_1 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-cli-3"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-cli-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_2 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-genl-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-genl-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_3 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-idiag-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-idiag-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_4 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-nf-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-nf-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_5 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-route-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-route-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_6 {
    meta:
        app_name = "libnl"
        type = "1"
        target = "libnl-xfrm-3"
        pattern = "libnl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libnl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnl-xfrm-3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule unixodbc {
    meta:
        app_name = "unixodbc"
        type = "1"
        target = "libnn"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnn.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnsl {
    meta:
        app_name = "libnsl"
        type = "1"
        target = "libnsl"
        pattern = "libnsl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnsl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnsl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_28 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnsl-2.26"
        pattern = "libnsl-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnsl-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnsl-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_17 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "1"
        target = "libnspr"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnspr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_18 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "1"
        target = "libnspr4"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnspr4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_5 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libnss3"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_29 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnss_compat-2.26"
        pattern = "libnss_compat-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnss_compat-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss_compat-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_30 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnss_db-2.26"
        pattern = "libnss_db-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnss_db-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss_db-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_31 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnss_dns-2.26"
        pattern = "libnss_dns-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnss_dns-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss_dns-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_32 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnss_files-2.26"
        pattern = "libnss_files-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnss_files-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss_files-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_33 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libnss_hesiod-2.26"
        pattern = "libnss_hesiod-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libnss_hesiod-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnss_hesiod-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_6 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libnssutil3"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libnssutil3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntfs_3g {
    meta:
        app_name = "ntfs-3g"
        type = "1"
        target = "libntfs-3g"
        pattern = "ntfs-3g_ntfsprogs-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntfs-3g_ntfsprogs-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libntfs-3g.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openjpeg {
    meta:
        app_name = "openjpeg"
        type = "1"
        target = "libopenjp2"
        pattern = "openjpeg/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openjpeg\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libopenjp2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule opus {
    meta:
        app_name = "opus"
        type = "1"
        target = "libopus"
        pattern = "libopus (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libopus (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libopus.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_1 {
    meta:
        app_name = "mpg123"
        type = "1"
        target = "libout123"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libout123.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_34 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libowcrypt-2.26"
        pattern = "libowcrypt-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libowcrypt-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libowcrypt-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_1 {
    meta:
        app_name = "pam"
        type = "1"
        target = "libpam"
        pattern = "libpam.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpam.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpam.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_2 {
    meta:
        app_name = "pam"
        type = "1"
        target = "libpam_misc"
        pattern = "libpam_misc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpam_misc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpam_misc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_pam {
    meta:
        app_name = "linux-pam"
        type = "1"
        target = "libpam_misc"
        pattern = "Linux-PAM-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Linux-PAM-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpam_misc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_3 {
    meta:
        app_name = "pam"
        type = "1"
        target = "libpamc"
        pattern = "libpamc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpamc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpamc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_pam_1 {
    meta:
        app_name = "linux-pam"
        type = "1"
        target = "libpamc"
        pattern = "Linux-PAM-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Linux-PAM-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpamc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_10 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libpanel"
        pattern = "libpanel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpanel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpanel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_11 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libpanelw"
        pattern = "libpanelw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpanelw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpanelw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango {
    meta:
        app_name = "pango"
        type = "1"
        target = "libpango-1.0"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpango-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_1 {
    meta:
        app_name = "pango"
        type = "1"
        target = "libpangocairo-1.0"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpangocairo-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_2 {
    meta:
        app_name = "pango"
        type = "1"
        target = "libpangoft2-1.0"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpangoft2-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_3 {
    meta:
        app_name = "pango"
        type = "1"
        target = "libpangoxft-1.0"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpangoxft-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted_2 {
    meta:
        app_name = "parted"
        type = "1"
        target = "libparted"
        pattern = "parted-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /parted-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libparted.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted_3 {
    meta:
        app_name = "parted"
        type = "1"
        target = "libparted-fs-resize"
        pattern = "parted-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /parted-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libparted-fs-resize.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_10 {
    meta:
        app_name = "ust"
        type = "1"
        target = "libpause_consumer"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpause_consumer.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpcap {
    meta:
        app_name = "libpcap"
        type = "1"
        target = "libpcap"
        pattern = "libpcap version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libpcap version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre {
    meta:
        app_name = "pcre"
        type = "1"
        target = "libpcre"
        pattern = "libpcre.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpcre.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre_1 {
    meta:
        app_name = "pcre"
        type = "1"
        target = "libpcre"
        pattern = "(([0-9]+\\.){1,}[0-9]+) [0-9]{4}-[0-9]{2}-[0-9]{2}"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}) [0-9]{4}-[0-9]{2}-[0-9]{2}/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre2 {
    meta:
        app_name = "pcre2"
        type = "1"
        target = "libpcre2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre2_1 {
    meta:
        app_name = "pcre2"
        type = "1"
        target = "libpcre2-16"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre2-16.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre2_2 {
    meta:
        app_name = "pcre2"
        type = "1"
        target = "libpcre2-32"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre2-32.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre2_3 {
    meta:
        app_name = "pcre2"
        type = "1"
        target = "libpcre2-8"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpcre2-8.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_27 {
    meta:
        app_name = "perl"
        type = "1"
        target = "libperl"
        pattern = "perl/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /perl\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libperl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_6 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-ani"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-ani.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_7 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-bmp"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-bmp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_8 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-gif"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-gif.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_9 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-icns"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-icns.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_10 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-ico"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-ico.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_11 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-jpeg"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-jpeg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_12 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-png"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-png.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_13 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-tga"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-tga.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_14 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-xbm"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-xbm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_15 {
    meta:
        app_name = "gdk-pixbuf"
        type = "1"
        target = "libpixbufloader-xpm"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixbufloader-xpm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pixman {
    meta:
        app_name = "pixman"
        type = "1"
        target = "libpixman-1"
        pattern = "pixman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pixman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixman-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gtk_12 {
    meta:
        app_name = "gtk"
        type = "1"
        target = "libpixmap"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpixmap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_6 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libplayreadycdm"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-stable"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libplayreadycdm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_19 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "1"
        target = "libplc4"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libplc4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_20 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "1"
        target = "libplds4"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libplds4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpng {
    meta:
        app_name = "libpng"
        type = "1"
        target = "libpng"
        pattern = "libpng version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libpng version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpng.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpng_1 {
    meta:
        app_name = "libpng"
        type = "1"
        target = "libpng12"
        pattern = "libpng version ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /libpng version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpng12.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpng_2 {
    meta:
        app_name = "libpng"
        type = "1"
        target = "libpng16"
        pattern = "libpng version (([0-9]+\\.){1,}[0-9]+([a-z]?|(-[0-9]+)?))"

    strings:
        $pattern = /libpng version (([0-9]{1,4}\.){1,}[0-9]{1,4}([a-z]?|(-[0-9]{1,4})?))/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpng16.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule poco {
    meta:
        app_name = "poco"
        type = "1"
        target = "libPocoFoundation"
        pattern = "poco/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /poco\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libPocoFoundation.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpng_3 {
    meta:
        app_name = "libpng"
        type = "1"
        target = "libPocoPDF"
        pattern = "libpng version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libpng version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libPocoPDF.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit {
    meta:
        app_name = "polkit"
        type = "1"
        target = "libpolkit-agent-1"
        pattern = "polkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /polkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpolkit-agent-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_1 {
    meta:
        app_name = "polkit"
        type = "1"
        target = "libpolkit-gobject-1"
        pattern = "polkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /polkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpolkit-gobject-1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule popt {
    meta:
        app_name = "popt"
        type = "1"
        target = "libpopt"
        pattern = "libpopt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpopt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpopt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_7 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libpostproc"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpostproc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_3 {
    meta:
        app_name = "procps-ng"
        type = "1"
        target = "libprocps"
        pattern = "libprocps.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libprocps.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprocps.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule proj {
    meta:
        app_name = "proj"
        type = "1"
        target = "libproj"
        pattern = "libproj.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libproj.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libproj.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule protobuf {
    meta:
        app_name = "protobuf"
        type = "1"
        target = "libprotobuf-c"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprotobuf-c.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule protobuf_1 {
    meta:
        app_name = "protobuf"
        type = "1"
        target = "libprotobuf-cpp-full-3.9.1"
        pattern = "libprotobuf-cpp-full-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libprotobuf-cpp-full-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprotobuf-cpp-full-3.9.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule protobuf_2 {
    meta:
        app_name = "protobuf"
        type = "1"
        target = "libprotobuf-cpp-lite-3.9.1"
        pattern = "libprotobuf-cpp-lite-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libprotobuf-cpp-lite-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprotobuf-cpp-lite-3.9.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_2 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libprotocol-cli"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprotocol-cli.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_3 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libprotocol-native"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libprotocol-native.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libproxy {
    meta:
        app_name = "libproxy"
        type = "1"
        target = "libproxy"
        pattern = "libproxy/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libproxy\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libproxy.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_35 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libpthread-2.26"
        pattern = "libpthread-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpthread-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpthread-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_36 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libpthread-2.26"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpthread-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_37 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libpthread-2.27"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpthread-2.27.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_38 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libpthread-2.28"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpthread-2.28.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_39 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libpthread-2.31"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpthread-2.31.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_4 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulse"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulse.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_5 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsecommon-12.2"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsecommon-12.2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_6 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsecore"
        pattern = "pulseaudio-([0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /pulseaudio-([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsecore.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_7 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsecore-10.0"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsecore-10.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_8 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsecore-11.1"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsecore-11.1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_9 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsecore-12.2"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsecore-12.2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_10 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "libpulsedsp"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpulsedsp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpurple {
    meta:
        app_name = "libpurple"
        type = "1"
        target = "libpurple"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpurple.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libpwquality {
    meta:
        app_name = "libpwquality"
        type = "1"
        target = "libpwquality"
        pattern = "libpwquality.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libpwquality.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpwquality.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_21 {
    meta:
        app_name = "python"
        type = "1"
        target = "libpython2.7"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpython2.7.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_22 {
    meta:
        app_name = "python"
        type = "1"
        target = "libpython3.10"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpython3.10.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_23 {
    meta:
        app_name = "python"
        type = "1"
        target = "libpython3.5m"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpython3.5m.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_24 {
    meta:
        app_name = "python"
        type = "1"
        target = "libpython3.8"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libpython3.8.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt {
    meta:
        app_name = "qt"
        type = "1"
        target = "libqmldbg_debugger"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqmldbg_debugger.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qrencode {
    meta:
        app_name = "qrencode"
        type = "1"
        target = "libqrencode"
        pattern = "libqrencode.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libqrencode.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqrencode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qrencode_1 {
    meta:
        app_name = "qrencode"
        type = "1"
        target = "libqrencode"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqrencode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite_2 {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libqsqlite"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqsqlite.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_1 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Core"
        pattern = "Qt (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Qt (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Core.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_2 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Gui"
        pattern = "Qt (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Qt (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Gui.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_3 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Location"
        pattern = "qtlocation/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtlocation\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Location.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_4 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Qml"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Qml.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_5 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Quick"
        pattern = "/(([0-9]+\\.){1,}[0-9]+)+"

    strings:
        $pattern = /\/(([0-9]{1,4}\.){1,}[0-9]{1,4})+/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Quick.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_6 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5QuickTest"
        pattern = "[/-](([0-9]+\\.){1,}[0-9]+)[+/]"

    strings:
        $pattern = /[\/-](([0-9]{1,4}\.){1,}[0-9]{1,4})[+\/]/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5QuickTest.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_7 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Test"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Test.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtwebkit {
    meta:
        app_name = "qtwebkit"
        type = "1"
        target = "libQt5WebKit"
        pattern = "/qtwebkit/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\/qtwebkit\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5WebKit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_8 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libQt5Widgets"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libQt5Widgets.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_9 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libqtgeoservices_mapboxgl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqtgeoservices_mapboxgl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_10 {
    meta:
        app_name = "qt"
        type = "1"
        target = "libqtvirtualkeyboard_pinyin"
        pattern = "qtvirtualkeyboard/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtvirtualkeyboard\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libqtvirtualkeyboard_pinyin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule readline {
    meta:
        app_name = "readline"
        type = "1"
        target = "libreadline"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libreadline.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule librelp {
    meta:
        app_name = "librelp"
        type = "1"
        target = "librelp"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librelp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule librepo_1 {
    meta:
        app_name = "librepo"
        type = "1"
        target = "librepo"
        pattern = "/(([0-9]+\\.){1,}[0-9]+)-"

    strings:
        $pattern = /\/(([0-9]{1,4}\.){1,}[0-9]{1,4})-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librepo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_40 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libresolv-2.26"
        pattern = "libresolv-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libresolv-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libresolv-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_3 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpm"
        pattern = "librpm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /librpm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_4 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpm"
        pattern = "rpmpopt-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rpmpopt-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_5 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpmbuild"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpmbuild.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_6 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpmio"
        pattern = "librpmio.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /librpmio.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpmio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_7 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpmio"
        pattern = "rpm-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rpm-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpmio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_8 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "librpmsign"
        pattern = "librpmsign.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /librpmsign.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librpmsign.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule librsvg {
    meta:
        app_name = "librsvg"
        type = "1"
        target = "librsvg-2"
        pattern = "librsvg-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /librsvg-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librsvg-2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_41 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "librt-2.26"
        pattern = "librt-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /librt-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /librt-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_291 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_adapter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_adapter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_292 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_aggregator"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_aggregator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_293 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_baseparse"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_baseparse/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_294 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_basesink"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_basesink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_295 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_basesrc"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_basesrc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_296 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bitreader"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bitreader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_297 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bitreader_noinline"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bitreader_noinline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_298 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bitwriter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bitwriter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_299 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bytereader"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bytereader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_300 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bytereader_noinline"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bytereader_noinline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_301 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bytewriter"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bytewriter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_302 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_bytewriter_noinline"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_bytewriter_noinline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_303 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_collectpads"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_collectpads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_304 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_controller"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_controller/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_305 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_flowcombiner"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_flowcombiner/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_306 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_gstharness"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_gstharness/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_307 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_gstlibscpp"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_gstlibscpp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_308 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_gstnetclientclock"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_gstnetclientclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_309 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_gstnettimeprovider"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_gstnettimeprovider/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_310 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_gsttestclock"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_gsttestclock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_311 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_libsabi"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_libsabi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_312 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_queuearray"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_queuearray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_313 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_sparsefile"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_sparsefile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_314 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_transform1"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_transform1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_315 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_transform2"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_transform2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_316 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "libs_typefindhelper"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libs_typefindhelper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsamplerate {
    meta:
        app_name = "libsamplerate"
        type = "1"
        target = "libsamplerate"
        pattern = "libsamplerate-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libsamplerate-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsamplerate.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libseccomp {
    meta:
        app_name = "libseccomp"
        type = "1"
        target = "libseccomp"
        pattern = "libseccomp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libseccomp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libseccomp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_42 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libSegFault"
        pattern = "libSegFault.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libSegFault.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libSegFault.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_3 {
    meta:
        app_name = "libselinux"
        type = "1"
        target = "libselinux"
        pattern = "libselinux.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libselinux.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libselinux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsemanage {
    meta:
        app_name = "libsemanage"
        type = "1"
        target = "libsemanage"
        pattern = "libsemanage.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libsemanage.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsemanage.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsepol {
    meta:
        app_name = "libsepol"
        type = "1"
        target = "libsepol"
        pattern = "libsepol.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libsepol.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsepol.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xorg_server {
    meta:
        app_name = "xorg-server"
        type = "1"
        target = "libshadow"
        pattern = "xorg-server-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xorg-server-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libshadow.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xorg_server_1 {
    meta:
        app_name = "xorg-server"
        type = "1"
        target = "libshadowfb"
        pattern = "xorg-server-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xorg-server-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libshadowfb.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_107 {
    meta:
        app_name = "util-linux"
        type = "1"
        target = "libsmartcols"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsmartcols.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_7 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libsmime3"
        pattern = "NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsmime3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsndfile {
    meta:
        app_name = "libsndfile"
        type = "1"
        target = "libsndfile"
        pattern = "libsndfile-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libsndfile-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsndfile.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule net_snmp {
    meta:
        app_name = "net-snmp"
        type = "1"
        target = "libsnmp"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsnmp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_8 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libsoftokn3"
        pattern = "NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsoftokn3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsolv {
    meta:
        app_name = "libsolv"
        type = "1"
        target = "libsolv"
        pattern = "libsolv/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libsolv\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsolv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsolv_1 {
    meta:
        app_name = "libsolv"
        type = "1"
        target = "libsolvext"
        pattern = "lib32-libsolv/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lib32-libsolv\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsolvext.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsoup {
    meta:
        app_name = "libsoup"
        type = "1"
        target = "libsoup"
        pattern = "libsoup/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /libsoup\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsoup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libsoup_1 {
    meta:
        app_name = "libsoup"
        type = "1"
        target = "libsoup-2.4"
        pattern = "libsoup-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libsoup-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsoup-2.4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule speex {
    meta:
        app_name = "speex"
        type = "1"
        target = "libspeex"
        pattern = "speex-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /speex-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libspeex.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule speex_1 {
    meta:
        app_name = "speex"
        type = "1"
        target = "libspeexdsp"
        pattern = "speexdsp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /speexdsp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libspeexdsp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite_3 {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libsqlite"
        pattern = "(3\\.([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(3\.([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsqlite.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite_4 {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libsqlite3"
        pattern = "libsqlite3.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libsqlite3.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsqlite3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sqlite_5 {
    meta:
        app_name = "sqlite"
        type = "1"
        target = "libsqlite3"
        pattern = "(3\\.([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(3\.([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsqlite3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_29 {
    meta:
        app_name = "e2fsprogs"
        type = "1"
        target = "libss"
        pattern = "libss.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libss.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libss.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libssh {
    meta:
        app_name = "libssh"
        type = "1"
        target = "libssh"
        pattern = "(([0-9]+\\.){1,}[0-9]+) \\(c\\)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}) \(c\)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libssh.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_104 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "libssl"
        pattern = "libssl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libssl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libssl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_105 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "libssl"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libssl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_9 {
    meta:
        app_name = "nss"
        type = "1"
        target = "libssl3"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libssl3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule flac_2 {
    meta:
        app_name = "flac"
        type = "1"
        target = "libstagefright_flacdec"
        pattern = "libFLAC (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libFLAC (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstagefright_flacdec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rust {
    meta:
        app_name = "rust"
        type = "1"
        target = "libstd"
        pattern = "rustc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rustc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_22 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libstdc++"
        pattern = "libstdc++.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstdc++.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstdc\+\+.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_23 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libstdc++"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstdc\+\+.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_14 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan"
        pattern = "libstrongswan.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_15 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-addrblock"
        pattern = "libstrongswan-addrblock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-addrblock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-addrblock.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_16 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-aes"
        pattern = "libstrongswan-aes.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-aes.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-aes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_17 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-af-alg"
        pattern = "libstrongswan-af-alg.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-af-alg.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-af-alg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_18 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-attr"
        pattern = "libstrongswan-attr.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-attr.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-attr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_19 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-ccm"
        pattern = "libstrongswan-ccm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-ccm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-ccm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_20 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-certexpire"
        pattern = "libstrongswan-certexpire.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-certexpire.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-certexpire.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_21 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-cmac"
        pattern = "libstrongswan-cmac.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-cmac.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-cmac.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_22 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-constraints"
        pattern = "libstrongswan-constraints.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-constraints.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-constraints.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_23 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-counters"
        pattern = "libstrongswan-counters.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-counters.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-counters.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_24 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-ctr"
        pattern = "libstrongswan-ctr.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-ctr.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-ctr.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_25 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-curve25519"
        pattern = "libstrongswan-curve25519.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-curve25519.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-curve25519.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_26 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-dnskey"
        pattern = "libstrongswan-dnskey.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-dnskey.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-dnskey.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_27 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-error-notify"
        pattern = "libstrongswan-error-notify.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-error-notify.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-error-notify.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_28 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-fips-prf"
        pattern = "libstrongswan-fips-prf.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-fips-prf.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-fips-prf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_29 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-gcm"
        pattern = "libstrongswan-gcm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-gcm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-gcm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_30 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-hmac"
        pattern = "libstrongswan-hmac.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-hmac.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-hmac.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_31 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-kernel-netlink"
        pattern = "libstrongswan-kernel-netlink.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-kernel-netlink.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-kernel-netlink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_32 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-nonce"
        pattern = "libstrongswan-nonce.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-nonce.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-nonce.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_33 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-openssl"
        pattern = "libstrongswan-openssl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-openssl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-openssl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_34 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pem"
        pattern = "libstrongswan-pem.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pem.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pem.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_35 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pgp"
        pattern = "libstrongswan-pgp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pgp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pgp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_36 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pkcs1"
        pattern = "libstrongswan-pkcs1.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pkcs1.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pkcs1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_37 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pkcs11"
        pattern = "libstrongswan-pkcs11.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pkcs11.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pkcs11.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_38 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pkcs12"
        pattern = "libstrongswan-pkcs12.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pkcs12.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pkcs12.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_39 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pkcs7"
        pattern = "libstrongswan-pkcs7.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pkcs7.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pkcs7.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_40 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pkcs8"
        pattern = "libstrongswan-pkcs8.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pkcs8.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pkcs8.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_41 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-pubkey"
        pattern = "libstrongswan-pubkey.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-pubkey.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-pubkey.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_42 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-random"
        pattern = "libstrongswan-random.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-random.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-random.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_43 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-rc2"
        pattern = "libstrongswan-rc2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-rc2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-rc2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_44 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-resolve"
        pattern = "libstrongswan-resolve.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-resolve.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-resolve.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_45 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-revocation"
        pattern = "libstrongswan-revocation.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-revocation.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-revocation.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_46 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-sha2"
        pattern = "libstrongswan-sha2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-sha2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-sha2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_47 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-sha3"
        pattern = "libstrongswan-sha3.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-sha3.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-sha3.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_48 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-socket-default"
        pattern = "libstrongswan-socket-default.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-socket-default.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-socket-default.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_49 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-sshkey"
        pattern = "libstrongswan-sshkey.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-sshkey.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-sshkey.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_50 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-stroke"
        pattern = "libstrongswan-stroke.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-stroke.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-stroke.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_51 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-stroke"
        pattern = "Swan (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Swan (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-stroke.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_52 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-updown"
        pattern = "libstrongswan-updown.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-updown.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-updown.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_53 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-vici"
        pattern = "libstrongswan-vici.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-vici.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-vici.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_54 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-vici"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-vici.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_55 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-x509"
        pattern = "libstrongswan-x509.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-x509.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-x509.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_56 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libstrongswan-xauth-generic"
        pattern = "libstrongswan-xauth-generic.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libstrongswan-xauth-generic.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libstrongswan-xauth-generic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_2 {
    meta:
        app_name = "sudo"
        type = "1"
        target = "libsudo_util"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsudo_util.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_8 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libswresample"
        pattern = "FFmpeg version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /FFmpeg version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libswresample.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ffmpeg_9 {
    meta:
        app_name = "ffmpeg"
        type = "1"
        target = "libswscale"
        pattern = "ffmpeg/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ffmpeg\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libswscale.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_11 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd"
        pattern = "libsystemd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libsystemd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_12 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-234"
        pattern = "libsystemd-shared-234.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libsystemd-shared-234.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-234.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_13 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-234"
        pattern = "systemd ([0-9]+)"

    strings:
        $pattern = /systemd ([0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-234.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_14 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-237"
        pattern = "systemd ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /systemd ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-237.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_15 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-239"
        pattern = "systemd ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /systemd ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-239.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_16 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-241"
        pattern = "systemd ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /systemd ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-241.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_17 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-244"
        pattern = "systemd ([0-9]+)"

    strings:
        $pattern = /systemd ([0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-244.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_18 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libsystemd-shared-250"
        pattern = "systemd ([0-9]+)"

    strings:
        $pattern = /systemd ([0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libsystemd-shared-250.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule taglib {
    meta:
        app_name = "taglib"
        type = "1"
        target = "libtag"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtag.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libtasn1 {
    meta:
        app_name = "libtasn1"
        type = "1"
        target = "libtasn1"
        pattern = "([0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtasn1.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rust_1 {
    meta:
        app_name = "rust"
        type = "1"
        target = "libtest"
        pattern = "rustc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rustc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtest.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_43 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libthread_db"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libthread_db.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_44 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libthread_db-1.0"
        pattern = "libthread_db-1.0.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libthread_db-1.0.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libthread_db-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_45 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libthread_db-1.0"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libthread_db-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_12 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libtic"
        pattern = "libtic.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libtic.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_13 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libticw"
        pattern = "libticw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libticw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libticw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libtiff {
    meta:
        app_name = "libtiff"
        type = "1"
        target = "libtiff"
        pattern = "LIBTIFF, Version ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LIBTIFF, Version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtiff.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_14 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libtinfo"
        pattern = "libtinfo.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libtinfo.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtinfo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_15 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libtinfo"
        pattern = "ncurses (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ncurses (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtinfo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_16 {
    meta:
        app_name = "ncurses"
        type = "1"
        target = "libtinfow"
        pattern = "libtinfow.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libtinfow.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtinfow.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libtirpc {
    meta:
        app_name = "libtirpc"
        type = "1"
        target = "libtirpc"
        pattern = "libtirpc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libtirpc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtirpc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libtirpc_1 {
    meta:
        app_name = "libtirpc"
        type = "1"
        target = "libtirpc"
        pattern = "libtirpc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libtirpc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtirpc.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_57 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libtpmtss"
        pattern = "libtpmtss.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libtpmtss.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtpmtss.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_24 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libtsan"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libtsan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libjpeg_turbo_3 {
    meta:
        app_name = "libjpeg-turbo"
        type = "1"
        target = "libturbojpeg"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libturbojpeg.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_25 {
    meta:
        app_name = "gcc"
        type = "1"
        target = "libubsan"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libubsan.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_19 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "libudev"
        pattern = "libudev.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libudev.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libudev.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libunistring {
    meta:
        app_name = "libunistring"
        type = "1"
        target = "libunistring"
        pattern = "libunistring-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libunistring-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libunistring.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule grpc_6 {
    meta:
        app_name = "grpc"
        type = "1"
        target = "libupb"
        pattern = "grpc/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /grpc\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libupb.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libusb {
    meta:
        app_name = "libusb"
        type = "1"
        target = "libusb-1.0"
        pattern = "libusb-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libusb-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libusb-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libuser {
    meta:
        app_name = "libuser"
        type = "1"
        target = "libuser"
        pattern = "libuser-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libuser-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libuser.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule utempter {
    meta:
        app_name = "utempter"
        type = "1"
        target = "libutempter"
        pattern = "libutempter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libutempter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libutempter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_46 {
    meta:
        app_name = "glibc"
        type = "1"
        target = "libutil-2.26"
        pattern = "libutil-2.26.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libutil-2.26.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libutil-2.26.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_108 {
    meta:
        app_name = "util-linux"
        type = "1"
        target = "libuuid"
        pattern = "libuuid.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libuuid.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libuuid.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libuv {
    meta:
        app_name = "libuv"
        type = "1"
        target = "libuv"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libuv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_2 {
    meta:
        app_name = "vala"
        type = "1"
        target = "libvala-0.46"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvala-0.46.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_3 {
    meta:
        app_name = "vala"
        type = "1"
        target = "libvala-0.56"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvala-0.56.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_4 {
    meta:
        app_name = "vala"
        type = "1"
        target = "libvalaccodegen"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvalaccodegen.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_58 {
    meta:
        app_name = "strongswan"
        type = "1"
        target = "libvici"
        pattern = "libvici.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libvici.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvici.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libvirt {
    meta:
        app_name = "libvirt"
        type = "1"
        target = "libvirt"
        pattern = "libvirt version: ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /libvirt version: ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvirt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libvncserver {
    meta:
        app_name = "libvncserver"
        type = "1"
        target = "libvncserver"
        pattern = "LibVNCServer ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LibVNCServer ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvncserver.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_3 {
    meta:
        app_name = "lua"
        type = "1"
        target = "libvocvoc_lua"
        pattern = "Lua (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Lua (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvocvoc_lua.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libvorbis {
    meta:
        app_name = "libvorbis"
        type = "1"
        target = "libvorbis"
        pattern = "lib[v,V]orbis.(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lib[v,V]orbis.(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvorbis.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libvpx {
    meta:
        app_name = "libvpx"
        type = "1"
        target = "libvpx"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libvpx.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wavpack {
    meta:
        app_name = "wavpack"
        type = "1"
        target = "libwavpack"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwavpack.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_7 {
    meta:
        app_name = "wayland"
        type = "1"
        target = "libwayland-client"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwayland-client.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_8 {
    meta:
        app_name = "wayland"
        type = "1"
        target = "libwayland-server"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwayland-server.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_9 {
    meta:
        app_name = "weston"
        type = "1"
        target = "libweston-6"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libweston-6.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_10 {
    meta:
        app_name = "weston"
        type = "1"
        target = "libweston-8"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libweston-8.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_11 {
    meta:
        app_name = "weston"
        type = "1"
        target = "libweston-desktop-6"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libweston-desktop-6.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_12 {
    meta:
        app_name = "weston"
        type = "1"
        target = "libweston-desktop-8"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libweston-desktop-8.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_7 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libwidevinececdm"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-stable"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwidevinececdm.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libevent_8 {
    meta:
        app_name = "libevent"
        type = "1"
        target = "libwidevinececdmhw"
        pattern = "(([0-9]+\\.){1,}[0-9]+)-stable"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})-stable/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwidevinececdmhw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_4 {
    meta:
        app_name = "lua"
        type = "1"
        target = "libwireplumber-module-lua-scripting"
        pattern = "LuaVersion\\: Lua (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LuaVersion\: Lua (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwireplumber-module-lua-scripting.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wolfssl {
    meta:
        app_name = "wolfssl"
        type = "1"
        target = "libwolfssl"
        pattern = "wolfssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wolfssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwolfssl.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wpe_webkit {
    meta:
        app_name = "wpe_webkit"
        type = "1"
        target = "libWPEWebKit-1.0"
        pattern = "wpewebkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wpewebkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libWPEWebKit-1.0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tcpd {
    meta:
        app_name = "tcpd"
        type = "1"
        target = "libwrap"
        pattern = "libwrap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libwrap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libwrap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libx11 {
    meta:
        app_name = "libx11"
        type = "1"
        target = "libX11"
        pattern = "libX11-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libX11-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libX11.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxkbcommon {
    meta:
        app_name = "libxkbcommon"
        type = "1"
        target = "libxkbcommon"
        pattern = "libxkbcommon-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxkbcommon-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxkbcommon.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxkbcommon_1 {
    meta:
        app_name = "libxkbcommon"
        type = "1"
        target = "libxkbcommon-x11"
        pattern = "libxkbcommon-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxkbcommon-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxkbcommon-x11.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xkbcommon {
    meta:
        app_name = "xkbcommon"
        type = "1"
        target = "libxkbregistry"
        pattern = "libxkbcommon-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxkbcommon-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxkbregistry.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxml2 {
    meta:
        app_name = "libxml2"
        type = "1"
        target = "libxml2"
        pattern = "(2[0-9]{4})$"

    strings:
        $pattern = /(2[0-9]{4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxml2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxml2_1 {
    meta:
        app_name = "libxml2"
        type = "1"
        target = "libxml2mod"
        pattern = "libxml2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxml2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxml2mod.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxslt_1 {
    meta:
        app_name = "libxslt"
        type = "1"
        target = "libxslt"
        pattern = "libxslt-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxslt-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxslt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_45 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_addrtype"
        pattern = "libxt_addrtype.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_addrtype.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_addrtype.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_46 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_AUDIT"
        pattern = "libxt_AUDIT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_AUDIT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_AUDIT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_47 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_bpf"
        pattern = "libxt_bpf.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_bpf.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_bpf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_48 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_cgroup"
        pattern = "libxt_cgroup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_cgroup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_cgroup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_49 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_CHECKSUM"
        pattern = "libxt_CHECKSUM.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_CHECKSUM.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_CHECKSUM.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_50 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_CLASSIFY"
        pattern = "libxt_CLASSIFY.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_CLASSIFY.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_CLASSIFY.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_51 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_cluster"
        pattern = "libxt_cluster.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_cluster.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_cluster.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_52 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_comment"
        pattern = "libxt_comment.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_comment.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_comment.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_53 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_connbytes"
        pattern = "libxt_connbytes.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_connbytes.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_connbytes.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_54 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_connlabel"
        pattern = "libxt_connlabel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_connlabel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_connlabel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_55 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_connlimit"
        pattern = "libxt_connlimit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_connlimit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_connlimit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_56 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_CONNMARK"
        pattern = "libxt_CONNMARK.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_CONNMARK.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_CONNMARK.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_57 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_CONNSECMARK"
        pattern = "libxt_CONNSECMARK.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_CONNSECMARK.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_CONNSECMARK.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_58 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_conntrack"
        pattern = "libxt_conntrack.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_conntrack.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_conntrack.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_59 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_cpu"
        pattern = "libxt_cpu.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_cpu.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_cpu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_60 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_CT"
        pattern = "libxt_CT.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_CT.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_CT.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_61 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_dccp"
        pattern = "libxt_dccp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_dccp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_dccp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_62 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_devgroup"
        pattern = "libxt_devgroup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_devgroup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_devgroup.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_63 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_DSCP"
        pattern = "libxt_DSCP.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_DSCP.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_DSCP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_64 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_ecn"
        pattern = "libxt_ecn.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_ecn.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_ecn.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_65 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_esp"
        pattern = "libxt_esp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_esp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_esp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_66 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_hashlimit"
        pattern = "libxt_hashlimit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_hashlimit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_hashlimit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_67 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_helper"
        pattern = "libxt_helper.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_helper.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_helper.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_68 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_HMARK"
        pattern = "libxt_HMARK.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_HMARK.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_HMARK.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_69 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_IDLETIMER"
        pattern = "libxt_IDLETIMER.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_IDLETIMER.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_IDLETIMER.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_70 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_ipcomp"
        pattern = "libxt_ipcomp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_ipcomp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_ipcomp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_71 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_iprange"
        pattern = "libxt_iprange.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_iprange.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_iprange.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_72 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_ipvs"
        pattern = "libxt_ipvs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_ipvs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_ipvs.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_73 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_LED"
        pattern = "libxt_LED.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_LED.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_LED.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_74 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_length"
        pattern = "libxt_length.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_length.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_length.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_75 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_limit"
        pattern = "libxt_limit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_limit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_limit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_76 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_mac"
        pattern = "libxt_mac.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_mac.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_mac.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_77 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_MARK"
        pattern = "libxt_MARK.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_MARK.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_MARK.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_78 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_multiport"
        pattern = "libxt_multiport.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_multiport.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_multiport.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_79 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_nfacct"
        pattern = "libxt_nfacct.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_nfacct.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_nfacct.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_80 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_NFLOG"
        pattern = "libxt_NFLOG.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_NFLOG.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_NFLOG.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_81 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_NFQUEUE"
        pattern = "libxt_NFQUEUE.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_NFQUEUE.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_NFQUEUE.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_82 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_osf"
        pattern = "libxt_osf.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_osf.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_osf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_83 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_owner"
        pattern = "libxt_owner.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_owner.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_owner.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_84 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_physdev"
        pattern = "libxt_physdev.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_physdev.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_physdev.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_85 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_pkttype"
        pattern = "libxt_pkttype.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_pkttype.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_pkttype.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_86 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_policy"
        pattern = "libxt_policy.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_policy.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_policy.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_87 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_quota"
        pattern = "libxt_quota.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_quota.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_quota.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_88 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_RATEEST"
        pattern = "libxt_RATEEST.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_RATEEST.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_RATEEST.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_89 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_recent"
        pattern = "libxt_recent.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_recent.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_recent.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_90 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_rpfilter"
        pattern = "libxt_rpfilter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_rpfilter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_rpfilter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_91 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_sctp"
        pattern = "libxt_sctp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_sctp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_sctp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_92 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_SECMARK"
        pattern = "libxt_SECMARK.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_SECMARK.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_SECMARK.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_93 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_SET"
        pattern = "libxt_SET.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_SET.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_SET.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_94 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_socket"
        pattern = "libxt_socket.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_socket.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_socket.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_95 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_standard"
        pattern = "libxt_standard.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_standard.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_standard.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_96 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_statistic"
        pattern = "libxt_statistic.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_statistic.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_statistic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_97 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_string"
        pattern = "libxt_string.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_string.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_string.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_98 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_SYNPROXY"
        pattern = "libxt_SYNPROXY.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_SYNPROXY.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_SYNPROXY.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_99 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_tcp"
        pattern = "libxt_tcp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_tcp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_tcp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_100 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TCPMSS"
        pattern = "libxt_TCPMSS.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TCPMSS.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TCPMSS.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_101 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TCPOPTSTRIP"
        pattern = "libxt_TCPOPTSTRIP.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TCPOPTSTRIP.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TCPOPTSTRIP.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_102 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TEE"
        pattern = "libxt_TEE.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TEE.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TEE.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_103 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_time"
        pattern = "libxt_time.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_time.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_time.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_104 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TOS"
        pattern = "libxt_TOS.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TOS.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TOS.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_105 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TPROXY"
        pattern = "libxt_TPROXY.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TPROXY.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TPROXY.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_106 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_TRACE"
        pattern = "libxt_TRACE.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_TRACE.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_TRACE.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_107 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_u32"
        pattern = "libxt_u32.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_u32.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_u32.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_108 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxt_udp"
        pattern = "libxt_udp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxt_udp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxt_udp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_109 {
    meta:
        app_name = "iptables"
        type = "1"
        target = "libxtables"
        pattern = "libxtables.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libxtables.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libxtables.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxtst {
    meta:
        app_name = "libxtst"
        type = "1"
        target = "libXtst"
        pattern = "libXtst-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libXtst-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libXtst.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libyaml {
    meta:
        app_name = "libyaml"
        type = "1"
        target = "libyaml-0"
        pattern = "yaml-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /yaml-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libyaml-0.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib_3 {
    meta:
        app_name = "zlib"
        type = "1"
        target = "libz"
        pattern = "libz.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libz.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libz.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib_4 {
    meta:
        app_name = "zlib"
        type = "1"
        target = "libz"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+\\.?[0-9]*)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libz.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule quagga {
    meta:
        app_name = "quagga"
        type = "1"
        target = "libzebra"
        pattern = "version ([0-9]+\\.[0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /version ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libzebra.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libzio {
    meta:
        app_name = "libzio"
        type = "1"
        target = "libzio"
        pattern = "libzio.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libzio.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libzio.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libzip {
    meta:
        app_name = "libzip"
        type = "1"
        target = "libzip"
        pattern = "(([0-9]+\\.){1,}[0-9])$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9])/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libzip.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zstd {
    meta:
        app_name = "zstd"
        type = "1"
        target = "libzstd"
        pattern = "libzstd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /libzstd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libzstd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zstandard {
    meta:
        app_name = "zstandard"
        type = "1"
        target = "libzstd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /libzstd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lightdm {
    meta:
        app_name = "lightdm"
        type = "2"
        target = "lightdm"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lightdm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lighttpd {
    meta:
        app_name = "lighttpd"
        type = "2"
        target = "lighttpd"
        pattern = "lighttpd.([0-9]+\\.[0-9]+\\.{0,1}[0-9]{0,4})"

    strings:
        $pattern = /lighttpd.([0-9]{1,4}\.[0-9]{1,4}\.{0,1}[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lighttpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_109 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "line"
        pattern = "line.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /line.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /line/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_99 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "line2addr"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /line2addr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_66 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "link.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /link.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_292 {
    meta:
        app_name = "strace"
        type = "2"
        target = "linkat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /linkat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_293 {
    meta:
        app_name = "strace"
        type = "2"
        target = "linkat--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /linkat--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_294 {
    meta:
        app_name = "strace"
        type = "2"
        target = "linkat--secontext_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /linkat--secontext_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule little_cms {
    meta:
        app_name = "little_cms"
        type = "2"
        target = "linkicc"
        pattern = "little cms ICC device link generator - v(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /little cms ICC device link generator - v(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /linkicc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_126 {
    meta:
        app_name = "glib"
        type = "2"
        target = "list"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /list/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_9 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "list-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /list-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_127 {
    meta:
        app_name = "glib"
        type = "2"
        target = "live-g-file"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /live-g-file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_11 {
    meta:
        app_name = "ust"
        type = "2"
        target = "live_test"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /live_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_8 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmcry_gcry"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmcry_gcry.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_9 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmnet"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmnet.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_10 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmnetstrms"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmnetstrms.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_11 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmnsd_gtls"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmnsd_gtls.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_12 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmnsd_ptcp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmnsd_ptcp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_13 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmregexp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmregexp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_14 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmstrmsrv"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmstrmsrv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_15 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmtcpclt"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmtcpclt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_16 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmtcpsrv"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmtcpsrv.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_17 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "lmzlibw"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lmzlibw.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_67 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ln.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ln.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_5 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "lnstat"
        pattern = "lnstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lnstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lnstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_106 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "loader_attic"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /loader_attic.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_42 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "loadkeys"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /loadkeys/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_43 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "loadunimap"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /loadunimap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_47 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "locale"
        pattern = "locale.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /locale.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /locale/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_48 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "locale"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /locale/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_20 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "localectl"
        pattern = "localectl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /localectl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /localectl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_49 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "localedef"
        pattern = "localedef.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /localedef.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /localedef/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_50 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "localedef"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /localedef/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_107 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "localetest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /localetest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_295 {
    meta:
        app_name = "strace"
        type = "2"
        target = "localtime"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /localtime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule findutils_2 {
    meta:
        app_name = "findutils"
        type = "2"
        target = "locate"
        pattern = "findutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /findutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /locate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_21 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "lock"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_22 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "lockfile"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lockfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_110 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "logger"
        pattern = "logger.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /logger.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_111 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "logger"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_112 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "logger.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logger.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_128 {
    meta:
        app_name = "glib"
        type = "2"
        target = "logging"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logging/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_113 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "login"
        pattern = "login.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /login.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /login/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_114 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "login"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /login/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_28 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "login.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /login.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_21 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "loginctl"
        pattern = "loginctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /loginctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /loginctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_22 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "loginctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /loginctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_23 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "logind-compat-tasks-max-generator"
        pattern = "logind-compat-tasks-max-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /logind-compat-tasks-max-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logind-compat-tasks-max-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_68 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "logname"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logname/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_69 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "logname.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logname.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule logrotate {
    meta:
        app_name = "logrotate"
        type = "2"
        target = "logrotate"
        pattern = "logrotate.([0-9]+\\.[0-9]+\\.{0,1}[0-9]{0,4})"

    strings:
        $pattern = /logrotate.([0-9]{1,4}\.[0-9]{1,4}\.{0,1}[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logrotate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_30 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "logsave"
        pattern = "logsave.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /logsave.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /logsave/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_115 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "look"
        pattern = "look.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /look.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /look/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_116 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "look"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /look/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_296 {
    meta:
        app_name = "strace"
        type = "2"
        target = "lookup_dcookie"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lookup_dcookie/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_297 {
    meta:
        app_name = "strace"
        type = "2"
        target = "looping_threads"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /looping_threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_117 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "losetup"
        pattern = "losetup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /losetup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /losetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_118 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "losetup"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /losetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_119 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "losetup.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /losetup.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_100 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "low_high_pc"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /low_high_pc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lrzsz {
    meta:
        app_name = "lrzsz"
        type = "2"
        target = "lrz"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lrz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_70 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ls"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ls/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_71 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ls.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ls.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_31 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "lsattr"
        pattern = "lsattr.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsattr.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_32 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "lsattr"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_33 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "lsattr.e2fsprogs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsattr.e2fsprogs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_120 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsblk"
        pattern = "lsblk.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsblk.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsblk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_121 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsblk"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsblk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_122 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lscpu"
        pattern = "lscpu.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lscpu.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lscpu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_123 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lscpu"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lscpu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_298 {
    meta:
        app_name = "strace"
        type = "2"
        target = "lseek"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lseek/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_124 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsipc"
        pattern = "lsipc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsipc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsipc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_125 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsipc"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsipc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_126 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsirq"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsirq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_127 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lslocks"
        pattern = "lslocks.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lslocks.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lslocks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_128 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lslocks"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lslocks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_129 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lslogins"
        pattern = "lslogins.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lslogins.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lslogins/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_130 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lslogins"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lslogins/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_131 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsmem"
        pattern = "lsmem.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsmem.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsmem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_132 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsmem"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsmem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_21 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "lsmtd"
        pattern = "lsmtd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsmtd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsmtd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_22 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "lsmtd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsmtd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_133 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsns"
        pattern = "lsns.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /lsns.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsns/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_134 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "lsns"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsns/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lsof {
    meta:
        app_name = "lsof"
        type = "2"
        target = "lsof"
        pattern = "(4\\.[0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /(4\.[0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsof/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lrzsz_1 {
    meta:
        app_name = "lrzsz"
        type = "2"
        target = "lsz"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lsz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_26 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "lto-wrapper"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lto-wrapper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gcc_27 {
    meta:
        app_name = "gcc"
        type = "2"
        target = "lto1"
        pattern = "gcc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gcc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lto1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_12 {
    meta:
        app_name = "ust"
        type = "2"
        target = "lttng"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lttng/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_13 {
    meta:
        app_name = "ust"
        type = "2"
        target = "lttng-consumerd"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lttng-consumerd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_14 {
    meta:
        app_name = "ust"
        type = "2"
        target = "lttng-crash"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lttng-crash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_15 {
    meta:
        app_name = "ust"
        type = "2"
        target = "lttng-relayd"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lttng-relayd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_16 {
    meta:
        app_name = "ust"
        type = "2"
        target = "lttng-sessiond"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lttng-sessiond/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_5 {
    meta:
        app_name = "lua"
        type = "2"
        target = "lua"
        pattern = "LuaVersion: Lua ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LuaVersion: Lua ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lua/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lua_6 {
    meta:
        app_name = "lua"
        type = "2"
        target = "luac"
        pattern = "LuaVersion: Lua ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /LuaVersion: Lua ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /luac/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lvm2_5 {
    meta:
        app_name = "lvm2"
        type = "2"
        target = "lvm"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)\\([0-9]\\) \\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})\([0-9]\) \([0-9]{4}-[0-9]{2}-[0-9]{2}\)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lvm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lz4_2 {
    meta:
        app_name = "lz4"
        type = "2"
        target = "lz4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lz4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_2 {
    meta:
        app_name = "xz"
        type = "2"
        target = "lzmadec"
        pattern = "lzmadec \\(XZ Utils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lzmadec \(XZ Utils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lzmadec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_3 {
    meta:
        app_name = "xz"
        type = "2"
        target = "lzmainfo"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lzmainfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule lzo_2 {
    meta:
        app_name = "lzo"
        type = "2"
        target = "lzotest"
        pattern = "lzo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lzo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /lzotest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4 {
    meta:
        app_name = "m4"
        type = "2"
        target = "m4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /m4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_6 {
    meta:
        app_name = "iproute2"
        type = "1"
        target = "m_xt"
        pattern = "m_xt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /m_xt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /m_xt.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_24 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "machinectl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /machinectl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_299 {
    meta:
        app_name = "strace"
        type = "2"
        target = "madvise"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /madvise/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_129 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mainloop"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mainloop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_130 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mainloop-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mainloop-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule make {
    meta:
        app_name = "make"
        type = "2"
        target = "make"
        pattern = "make-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /make-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /make/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule f2fs_tools_1 {
    meta:
        app_name = "f2fs-tools"
        type = "2"
        target = "make_f2fs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /make_f2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_51 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "makedb"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /makedb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_12 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "mali-dp_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mali-dp_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_17 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "manual-authz"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /manual-authz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_18 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "manual-backtrace"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /manual-backtrace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_19 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "manual-dir-iter"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /manual-dir-iter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_20 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "manual-tcp"
        pattern = "LIBDBUS_PRIVATE_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /LIBDBUS_PRIVATE_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /manual-tcp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_21 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "manual-test-thread-blocking"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /manual-test-thread-blocking/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_23 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "many_cv"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /many_cv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_10 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "map-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /map-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_131 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mappedfile"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mappedfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_132 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mapping-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mapping-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_44 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "mapscrn"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mapscrn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_133 {
    meta:
        app_name = "glib"
        type = "2"
        target = "markup"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /markup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_134 {
    meta:
        app_name = "glib"
        type = "2"
        target = "markup-collect"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /markup-collect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_135 {
    meta:
        app_name = "glib"
        type = "2"
        target = "markup-escape"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /markup-escape/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_136 {
    meta:
        app_name = "glib"
        type = "2"
        target = "markup-subparser"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /markup-subparser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_9 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "massif-arm64-linux"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /massif-arm64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_4 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "matchpathcon"
        pattern = "matchpathcon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /matchpathcon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /matchpathcon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_300 {
    meta:
        app_name = "strace"
        type = "2"
        target = "maybe_switch_current_tcp"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /maybe_switch_current_tcp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_301 {
    meta:
        app_name = "strace"
        type = "2"
        target = "maybe_switch_current_tcp--quiet-thread-execve"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /maybe_switch_current_tcp--quiet-thread-execve/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmbim_1 {
    meta:
        app_name = "libmbim"
        type = "2"
        target = "mbim-proxy"
        pattern = "libmbim-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmbim-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbim-proxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmbim_2 {
    meta:
        app_name = "libmbim"
        type = "2"
        target = "mbimcli"
        pattern = "libmbim-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmbim-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbimcli/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_302 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mbind"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbind/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_303 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mbind-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbind-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_304 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mbind-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbind-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_305 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mbind-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mbind-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule midnight_commander {
    meta:
        app_name = "midnight_commander"
        type = "2"
        target = "mc"
        pattern = "mc-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mc-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_14 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "mcaptest"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mcaptest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_13 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "mcde_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mcde_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_135 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mcookie"
        pattern = "mcookie.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mcookie.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mcookie/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_136 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mcookie"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mcookie/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_137 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mcookie.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mcookie.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_50 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "md2-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md2-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_108 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "md2test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md2test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_51 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "md4-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md4-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_28 {
    meta:
        app_name = "perl"
        type = "1"
        target = "MD5"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /MD5.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_52 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "md5-compat-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md5-compat-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_53 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "md5-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md5-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_72 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "md5sum"
        pattern = "0123456789abcdef(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /0123456789abcdef(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md5sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_73 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "md5sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /md5sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_109 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "mdc2_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mdc2_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_110 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "mdc2test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mdc2test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_14 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "mediatek_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mediatek_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_137 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mem-overflow"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mem-overflow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule memcached {
    meta:
        app_name = "memcached"
        type = "2"
        target = "memcached"
        pattern = "memcached ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /memcached ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memcached/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_10 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "memcheck-amd64-linux"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memcheck-amd64-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_54 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "memeql-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memeql-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_306 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_create"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_create/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_307 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_create-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_create-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_308 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_create-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_create-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_309 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_create-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_create-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_310 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_secret-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_secret-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_311 {
    meta:
        app_name = "strace"
        type = "2"
        target = "memfd_secret-success-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memfd_secret-success-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_138 {
    meta:
        app_name = "glib"
        type = "2"
        target = "memory-input-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memory-input-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_139 {
    meta:
        app_name = "glib"
        type = "2"
        target = "memory-monitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memory-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_140 {
    meta:
        app_name = "glib"
        type = "2"
        target = "memory-output-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memory-output-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_55 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "memxor-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /memxor-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_138 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mesg"
        pattern = "mesg.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mesg.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_139 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mesg"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_140 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mesg.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mesg.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_15 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "meson_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meson_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_11 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "message-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /message-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_56 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "meta-aead-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meta-aead-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_57 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "meta-armor-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meta-armor-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_58 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "meta-cipher-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meta-cipher-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_59 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "meta-hash-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meta-hash-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_60 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "meta-mac-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /meta-mac-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_16 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "mi0283qt_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mi0283qt_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_312 {
    meta:
        app_name = "strace"
        type = "2"
        target = "migrate_pages"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /migrate_pages/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_141 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mimeapps"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mimeapps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_313 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mincore"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mincore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule minicom {
    meta:
        app_name = "minicom"
        type = "2"
        target = "minicom"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /minicom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_74 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mkdir.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkdir.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_314 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mkdirat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkdirat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_34 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mke2fs"
        pattern = "mke2fs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mke2fs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mke2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_35 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mke2fs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mke2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_36 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mke2fs.e2fsprogs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mke2fs.e2fsprogs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_37 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mke2fs_static"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mke2fs_static/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exfat_3 {
    meta:
        app_name = "exfat"
        type = "2"
        target = "mkexfatfs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkexfatfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_75 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mkfifo"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfifo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_76 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mkfifo.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfifo.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_141 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs"
        pattern = "mkfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_142 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_143 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.bfs"
        pattern = "mkfs.bfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.bfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.bfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_144 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.bfs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.bfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_145 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.cramfs"
        pattern = "mkfs.cramfs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.cramfs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.cramfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_146 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.cramfs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.cramfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_38 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mkfs.ext2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ext2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_39 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mkfs.ext2.e2fsprogs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ext2.e2fsprogs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_40 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mkfs.ext3"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ext3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_41 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mkfs.ext4"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ext4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_23 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mkfs.jffs2"
        pattern = "mkfs.jffs2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.jffs2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.jffs2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_24 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mkfs.jffs2"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.jffs2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_147 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.minix"
        pattern = "mkfs.minix.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.minix.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.minix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_148 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkfs.minix"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.minix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntfs_3g_1 {
    meta:
        app_name = "ntfs-3g"
        type = "2"
        target = "mkfs.ntfs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ntfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_25 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mkfs.ubifs"
        pattern = "mkfs.ubifs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkfs.ubifs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ubifs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_26 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mkfs.ubifs"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkfs.ubifs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_4 {
    meta:
        app_name = "pam"
        type = "2"
        target = "mkhomedir_helper"
        pattern = "mkhomedir_helper.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkhomedir_helper.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkhomedir_helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_6 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "mkill"
        pattern = "mkill.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkill.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_42 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mklost+found"
        pattern = "mklost\\+found.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mklost\+found.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mklost\+found/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_43 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "mklost+found"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mklost\+found/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_77 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mknod.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mknod.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_315 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mknodat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mknodat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_149 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkswap"
        pattern = "mkswap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkswap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkswap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_150 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkswap"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkswap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_151 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkswap.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkswap.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_78 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mktemp"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mktemp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_79 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mktemp.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mktemp.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_152 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mkzimage_cmdline"
        pattern = "mkzimage_cmdline.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mkzimage_cmdline.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mkzimage_cmdline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_316 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mlock"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mlock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_317 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mlock2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mlock2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_318 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mlockall"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mlockall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_319 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_29 {
    meta:
        app_name = "perl"
        type = "1"
        target = "mmap"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_320 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_321 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_322 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_323 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap64"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_324 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap64-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap64-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_325 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap64-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap64-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_326 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmap64-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmap64-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_18 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "mmexternal"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmexternal.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_327 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_328 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmsg_name"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmsg_name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_329 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mmsg_name-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mmsg_name-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_111 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "modes_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /modes_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_11 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-alsa-card"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-alsa-card.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_12 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-alsa-sink"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-alsa-sink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_13 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-alsa-source"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-alsa-source.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_14 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-always-sink"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-always-sink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_15 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-anwbt-sink"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-anwbt-sink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_16 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-augment-properties"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-augment-properties.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_17 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-card-restore"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-card-restore.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_18 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-cli-protocol-unix"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-cli-protocol-unix.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_19 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-combine-sink"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-combine-sink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_20 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-default-device-restore"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-default-device-restore.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_21 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-detect"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-detect.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_22 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-device-restore"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-device-restore.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_23 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-filter-apply"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-filter-apply.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_24 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-filter-heuristics"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-filter-heuristics.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_25 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-intended-roles"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-intended-roles.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_26 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-loopback"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-loopback.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_27 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-native-protocol-unix"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-native-protocol-unix.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_28 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-null-sink"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-null-sink.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_29 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-position-event-sounds"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-position-event-sounds.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_30 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-rescue-streams"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-rescue-streams.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_31 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-role-cork"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-role-cork.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_32 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-stream-restore"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-stream-restore.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_33 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-suspend-on-idle"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-suspend-on-idle.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_34 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-switch-on-port-available."
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-switch-on-port-available..so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_35 {
    meta:
        app_name = "pulseaudio"
        type = "1"
        target = "module-udev-detect"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /module-udev-detect.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_153 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "more"
        pattern = "more.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /more.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /more/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_154 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "more"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /more/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_155 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "more.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /more.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mosquitto {
    meta:
        app_name = "mosquitto"
        type = "2"
        target = "mosquitto"
        pattern = "([0-9]+\\.[0-9]+\\.{0,1}[0-9]{0,3})"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.{0,1}[0-9]{0,3})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mosquitto/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mosquitto_1 {
    meta:
        app_name = "mosquitto"
        type = "2"
        target = "mosquitto_ctrl"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mosquitto_ctrl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_156 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mount"
        pattern = "mount.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mount.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_330 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mount"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_157 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mount"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_142 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mount-operation"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount-operation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_331 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mount-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_332 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mount-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_333 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mount-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule exfat_4 {
    meta:
        app_name = "exfat"
        type = "2"
        target = "mount.exfat-fuse"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount.exfat-fuse/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nfs_utils {
    meta:
        app_name = "nfs-utils"
        type = "2"
        target = "mount.nfs"
        pattern = "linux nfs-utils (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /linux nfs-utils (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount.nfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntfs_3g_2 {
    meta:
        app_name = "ntfs-3g"
        type = "2"
        target = "mount.ntfs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount.ntfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_158 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mount.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mount.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_159 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mountpoint"
        pattern = "mountpoint.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mountpoint.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mountpoint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_160 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mountpoint"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mountpoint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_161 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "mountpoint.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mountpoint.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_334 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_mount"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_335 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_mount-P"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_mount-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_336 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_pages"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_pages/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_337 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_pages--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_pages--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_338 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_pages-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_pages-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_339 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_pages-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_pages-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_340 {
    meta:
        app_name = "strace"
        type = "2"
        target = "move_pages-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /move_pages-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpd {
    meta:
        app_name = "mpd"
        type = "2"
        target = "mpd"
        pattern = "mpd/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpd\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_2 {
    meta:
        app_name = "mpg123"
        type = "2"
        target = "mpg123"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpg123/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_3 {
    meta:
        app_name = "mpg123"
        type = "2"
        target = "mpg123-id3dump"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpg123-id3dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_4 {
    meta:
        app_name = "mpg123"
        type = "2"
        target = "mpg123-strip"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpg123-strip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_15 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "mpris-proxy"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpris-proxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_2 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "mpstat"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mpstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_341 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mq_sendrecv"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mq_sendrecv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_342 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mq_sendrecv-read"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mq_sendrecv-read/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_343 {
    meta:
        app_name = "strace"
        type = "2"
        target = "mq_sendrecv-write"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mq_sendrecv-write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_30 {
    meta:
        app_name = "perl"
        type = "1"
        target = "mro"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mro.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_344 {
    meta:
        app_name = "strace"
        type = "2"
        target = "msg_control"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msg_control/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_345 {
    meta:
        app_name = "strace"
        type = "2"
        target = "msg_control-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msg_control-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_346 {
    meta:
        app_name = "strace"
        type = "2"
        target = "msg_name"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msg_name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_9 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgattrib"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgattrib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_10 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgcat"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgcat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_11 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgcmp"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgcmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_12 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgcomm"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgcomm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_13 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgconv"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_14 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgen"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_15 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgexec"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgexec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_16 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgfilter"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgfilter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_17 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msggrep"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msggrep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_18 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msginit"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msginit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_19 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgmerge"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgmerge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_20 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msgunfmt"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msgunfmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_21 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "msguniq"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /msguniq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_27 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mtd_debug"
        pattern = "mtd_debug.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mtd_debug.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtd_debug/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_25 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "mtd_probe"
        pattern = "mtd_probe.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mtd_probe.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtd_probe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_28 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mtdinfo"
        pattern = "mtdinfo.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mtdinfo.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtdinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_29 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mtdinfo"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtdinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_30 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mtdpart"
        pattern = "mtdpart.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /mtdpart.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtdpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_31 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "mtdpart"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtdpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_1 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-albumart"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-albumart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_2 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-albums"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-albums/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_3 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-connect"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-connect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_4 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-detect"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-detect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_5 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-emptyfolders"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-emptyfolders/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_6 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-files"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-files/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_7 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-format"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-format/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_8 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-getplaylist"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-getplaylist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_9 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-newplaylist"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-newplaylist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_10 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-playlists"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-playlists/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_11 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-reset"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-reset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_12 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-thumb"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-thumb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libmtp_13 {
    meta:
        app_name = "libmtp"
        type = "2"
        target = "mtp-trexist"
        pattern = "libmtp version: (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libmtp version: (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mtp-trexist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_24 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "multiwait"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /multiwait/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_347 {
    meta:
        app_name = "strace"
        type = "2"
        target = "munlockall"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /munlockall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_143 {
    meta:
        app_name = "glib"
        type = "2"
        target = "mutex"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mutex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_80 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "mv.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mv.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_17 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "mxsfb-drm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /mxsfb-drm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_31 {
    meta:
        app_name = "perl"
        type = "1"
        target = "NamedCapture"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /NamedCapture.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_162 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "namei"
        pattern = "namei.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /namei.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /namei/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_163 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "namei"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /namei/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_112 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "namemap_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /namemap_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_25 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "nameshm1"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nameshm1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_32 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nanddump"
        pattern = "nanddump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nanddump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nanddump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_33 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nanddump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nanddump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_34 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nanddump.mtd-utils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nanddump.mtd-utils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_35 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nandtest"
        pattern = "nandtest.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nandtest.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nandtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_36 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nandtest"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nandtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_37 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nandwrite"
        pattern = "nandwrite.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nandwrite.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nandwrite/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_38 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nandwrite"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nandwrite/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_39 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nandwrite.mtd-utils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nandwrite.mtd-utils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_348 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nanosleep"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nanosleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule network_block_device {
    meta:
        app_name = "network_block_device"
        type = "2"
        target = "nbd-server"
        pattern = "nbd-server version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nbd-server version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nbd-server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_26 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "nblayer"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nblayer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_32 {
    meta:
        app_name = "perl"
        type = "1"
        target = "NDBM_File"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /NDBM_File.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_349 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net--decode-fds-all-netlink"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net--decode-fds-all-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_350 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net--decode-fds-dev-netlink"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net--decode-fds-dev-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_351 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net--decode-fds-none-netlink"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net--decode-fds-none-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_352 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net--decode-fds-path-netlink"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net--decode-fds-path-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_353 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net--decode-fds-socket-netlink"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net--decode-fds-socket-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_354 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-accept-connect"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-accept-connect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_355 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-icmp_filter"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-icmp_filter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_356 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-net-packet_mreq-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-net-packet_mreq-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_357 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-packet_mreq"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-packet_mreq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_358 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-packet_mreq-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-packet_mreq-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_359 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-packet_mreq-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-packet_mreq-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_360 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-packet_mreq-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-packet_mreq-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_361 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-sockaddr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-sockaddr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_362 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-tpacket_req"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-tpacket_req/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_363 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-tpacket_stats"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-tpacket_stats/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_364 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-tpacket_stats-success"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-tpacket_stats-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_365 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-y-unix"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-y-unix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_366 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-yy-inet"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-yy-inet/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_367 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-yy-inet6"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-yy-inet6/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_368 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-yy-netlink"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-yy-netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_369 {
    meta:
        app_name = "strace"
        type = "2"
        target = "net-yy-unix"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /net-yy-unix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_6 {
    meta:
        app_name = "connman"
        type = "2"
        target = "netlink-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_370 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_audit"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_audit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_371 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_audit--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_audit--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_372 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_crypto"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_crypto/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_373 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_generic"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_generic/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_374 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_kobject_uevent"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_kobject_uevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_375 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_netfilter"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_netfilter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_376 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_protocol"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_protocol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_377 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_route"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_route/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_378 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_selinux"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_selinux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_379 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_sock_diag"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_sock_diag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_380 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_unix_diag"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_unix_diag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_381 {
    meta:
        app_name = "strace"
        type = "2"
        target = "netlink_xfrm"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netlink_xfrm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule net_tools_1 {
    meta:
        app_name = "net-tools"
        type = "2"
        target = "netstat.net-tools"
        pattern = "net-tools (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /net-tools (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /netstat.net-tools/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_61 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "nettle-hash"
        pattern = "nettle (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nettle-hash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_62 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "nettle-pbkdf2"
        pattern = "nettle (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nettle-pbkdf2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_144 {
    meta:
        app_name = "glib"
        type = "2"
        target = "network-address"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /network-address/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_145 {
    meta:
        app_name = "glib"
        type = "2"
        target = "network-monitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /network-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_146 {
    meta:
        app_name = "glib"
        type = "2"
        target = "network-monitor-race"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /network-monitor-race/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_26 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "networkctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /networkctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_382 {
    meta:
        app_name = "strace"
        type = "2"
        target = "newfstatat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newfstatat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_29 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newgidmap"
        pattern = "newgidmap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /newgidmap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newgidmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_30 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newgidmap"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newgidmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_31 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newgrp"
        pattern = "newgrp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /newgrp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newgrp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_32 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newgrp.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newgrp.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_101 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "newscn"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newscn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_12 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "newsignal-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newsignal-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_33 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newuidmap"
        pattern = "newuidmap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /newuidmap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newuidmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_34 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newuidmap"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newuidmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_35 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newusers"
        pattern = "newusers.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /newusers.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newusers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_36 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "newusers"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /newusers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_383 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_acct"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_acct/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_384 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_cthelper"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_cthelper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_385 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_ctnetlink"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_ctnetlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_386 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_ctnetlink_exp"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_ctnetlink_exp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_387 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_cttimeout"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_cttimeout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_388 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_ipset"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_ipset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_389 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_nft_compat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_nft_compat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_390 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_nftables"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_nftables/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_391 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_osf"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_osf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_392 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_queue"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_queue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_393 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nfnetlink_ulog"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnetlink_ulog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_110 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "nfnl_osf"
        pattern = "nfnl_osf.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nfnl_osf.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nfnl_osf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_40 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nftl_format"
        pattern = "nftl_format.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nftl_format.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nftl_format/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_41 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nftl_format"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nftl_format/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_42 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "nftldump"
        pattern = "nftldump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nftldump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nftldump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_22 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "ngettext"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ngettext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2_3 {
    meta:
        app_name = "nghttp2"
        type = "2"
        target = "nghttp"
        pattern = "nghttp2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nghttp2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nghttp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2_4 {
    meta:
        app_name = "nghttp2"
        type = "2"
        target = "nghttpd"
        pattern = "nghttp2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nghttp2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nghttpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nghttp2_5 {
    meta:
        app_name = "nghttp2"
        type = "2"
        target = "nghttpx"
        pattern = "nghttpx nghttp2/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nghttpx nghttp2\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nghttpx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nginx {
    meta:
        app_name = "nginx"
        type = "2"
        target = "nginx"
        pattern = "nginx/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /nginx\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nginx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_81 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nice"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_82 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nice.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nice.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_83 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nl"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libnl_7 {
    meta:
        app_name = "libnl"
        type = "2"
        target = "nl-route-delete"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nl-route-delete/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_84 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nl.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nl.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_394 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_395 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_br_port_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_br_port_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_396 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_crypto_user_alg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_crypto_user_alg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_397 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_dcbmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_dcbmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_398 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_fib_rule_hdr"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_fib_rule_hdr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_399 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifaddrlblmsg"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifaddrlblmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_400 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifaddrmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifaddrmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_401 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifinfomsg"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifinfomsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_402 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_af_spec"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_af_spec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_403 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_brport"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_brport/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_404 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_brport-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_brport-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_405 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_linkinfo"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_linkinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_406 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_port"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_port/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_407 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_protinfo-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_protinfo-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_408 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_protinfo-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_protinfo-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_409 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_protinfo-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_protinfo-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_410 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_vfinfo-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_vfinfo-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_411 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_vfinfo-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_vfinfo-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_412 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifla_xdp"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifla_xdp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_413 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifstats"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifstats/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_414 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifstats-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifstats-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_415 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ifstats-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ifstats-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_416 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_inet_diag_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_inet_diag_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_417 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_inet_diag_req_compat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_inet_diag_req_compat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_418 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_inet_diag_req_v2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_inet_diag_req_v2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_419 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_mdba_mdb_entry"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_mdba_mdb_entry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_420 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_mdba_router_port"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_mdba_router_port/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_421 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ndmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ndmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_422 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_ndtmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_ndtmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_423 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_netconfmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_netconfmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_424 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_netlink_diag_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_netlink_diag_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_425 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_nhmsg-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_nhmsg-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_426 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_nhmsg-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_nhmsg-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_427 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_nlmsgerr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_nlmsgerr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_428 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_packet_diag_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_packet_diag_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_429 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_rtgenmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_rtgenmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_430 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_rtmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_rtmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_431 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_smc_diag_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_smc_diag_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_432 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_tc_stats"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_tc_stats/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_433 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_tca_stab"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_tca_stab/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_434 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_tcamsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_tcamsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_435 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_tcmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_tcmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_436 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nlattr_unix_diag_msg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nlattr_unix_diag_msg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_102 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "nm"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule node_js {
    meta:
        app_name = "node.js"
        type = "2"
        target = "node"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /node/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_147 {
    meta:
        app_name = "glib"
        type = "2"
        target = "node"
        pattern = "/glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /\/glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /node/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_85 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nohup"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nohup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_86 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nohup.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nohup.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_164 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nologin"
        pattern = "nologin.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nologin.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nologin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_165 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nologin"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nologin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_166 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nologin.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nologin.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_27 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "nonblock"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nonblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_33 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Normalize"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Normalize.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_17 {
    meta:
        app_name = "ust"
        type = "2"
        target = "notification"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /notification/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_87 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nproc"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nproc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_88 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "nproc.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nproc.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_167 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nsenter"
        pattern = "nsenter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nsenter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nsenter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_168 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nsenter"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nsenter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_169 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "nsenter.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nsenter.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_7 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "nstat"
        pattern = "nstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /nstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_437 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nsyscalls"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nsyscalls/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_438 {
    meta:
        app_name = "strace"
        type = "2"
        target = "nsyscalls-d"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /nsyscalls-d/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntfs_3g_3 {
    meta:
        app_name = "ntfs-3g"
        type = "2"
        target = "ntfs-3g"
        pattern = "ntfs-3g_ntfsprogs-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntfs-3g_ntfsprogs-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntfs-3g/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntfs_3g_4 {
    meta:
        app_name = "ntfs-3g"
        type = "2"
        target = "ntfs-3g.probe"
        pattern = "ntfs-3g_ntfsprogs-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntfs-3g_ntfsprogs-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntfs-3g.probe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntp-keygen"
        pattern = "ntp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntp-keygen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp_1 {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntpd"
        pattern = "Ver. ([0-9]+\\.[0-9]+\\.[0-9a-z]+)"

    strings:
        $pattern = /Ver. ([0-9]{1,4}\.[0-9]{1,4}\.[0-9a-z]+)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp_2 {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntpd.ntp"
        pattern = "ntp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntpd.ntp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp_3 {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntpdc"
        pattern = "ntp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntpdc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp_4 {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntpq"
        pattern = "ntp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ntp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntpq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ntp_5 {
    meta:
        app_name = "ntp"
        type = "2"
        target = "ntptime"
        pattern = "ntp-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /ntp-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ntptime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_89 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "numfmt"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /numfmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_16 {
    meta:
        app_name = "bluez"
        type = "1"
        target = "obexd"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /obexd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_103 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "objdump"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /objdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_113 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ocspapitest"
        pattern = "openssl-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /openssl-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ocspapitest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_90 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "od"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /od/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_91 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "od.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /od.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_19 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "omrelp"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /omrelp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dhcp_3 {
    meta:
        app_name = "dhcp"
        type = "2"
        target = "omshell"
        pattern = "dhcp-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dhcp-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /omshell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_20 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "omstdout"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /omstdout.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_21 {
    meta:
        app_name = "rsyslog"
        type = "1"
        target = "omtesting"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /omtesting.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_148 {
    meta:
        app_name = "glib"
        type = "2"
        target = "once"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /once/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_149 {
    meta:
        app_name = "glib"
        type = "2"
        target = "onceinit"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /onceinit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_34 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Opcode"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Opcode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_439 {
    meta:
        app_name = "strace"
        type = "2"
        target = "open_tree"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /open_tree/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_440 {
    meta:
        app_name = "strace"
        type = "2"
        target = "open_tree-P"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /open_tree-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_441 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_442 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat--secontext"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat--secontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_443 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat--secontext_full_mismatch"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat--secontext_full_mismatch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_444 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_445 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-v-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-v-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_446 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-v-y-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-v-y-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_447 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-v-y-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-v-y-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_448 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_449 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_450 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_451 {
    meta:
        app_name = "strace"
        type = "2"
        target = "openat2-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openat2-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_114 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "openssl"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openssl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openvpn {
    meta:
        app_name = "openvpn"
        type = "2"
        target = "openvpn"
        pattern = "OpenVPN ([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /OpenVPN ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openvpn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_45 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "openvt.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /openvt.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openjpeg_1 {
    meta:
        app_name = "openjpeg"
        type = "2"
        target = "opj_compress"
        pattern = "lib32-openjpeg/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lib32-openjpeg\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /opj_compress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openjpeg_2 {
    meta:
        app_name = "openjpeg"
        type = "2"
        target = "opj_decompress"
        pattern = "lib32-openjpeg/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lib32-openjpeg\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /opj_decompress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openjpeg_3 {
    meta:
        app_name = "openjpeg"
        type = "2"
        target = "opj_dump"
        pattern = "lib32-openjpeg/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lib32-openjpeg\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /opj_dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_150 {
    meta:
        app_name = "glib"
        type = "2"
        target = "option-argv0"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /option-argv0/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_151 {
    meta:
        app_name = "glib"
        type = "2"
        target = "option-context"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /option-context/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_452 {
    meta:
        app_name = "strace"
        type = "2"
        target = "orphaned_process_group"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /orphaned_process_group/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_13 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "os-wrappers-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /os-wrappers-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_115 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ossl_store_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ossl_store_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_116 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "ossltest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ossltest.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_5 {
    meta:
        app_name = "mpg123"
        type = "2"
        target = "out123"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /out123/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mpg123_6 {
    meta:
        app_name = "mpg123"
        type = "1"
        target = "output_alsa"
        pattern = "mpg123-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mpg123-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /output_alsa.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_152 {
    meta:
        app_name = "glib"
        type = "2"
        target = "overflow"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /overflow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_153 {
    meta:
        app_name = "glib"
        type = "2"
        target = "overflow-fallback"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /overflow-fallback/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_154 {
    meta:
        app_name = "glib"
        type = "2"
        target = "override"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /override/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_117 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "p_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /p_test.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_36 {
    meta:
        app_name = "pulseaudio"
        type = "2"
        target = "pacat"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pacat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_118 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "packettest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /packettest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_37 {
    meta:
        app_name = "pulseaudio"
        type = "2"
        target = "pacmd"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pacmd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_38 {
    meta:
        app_name = "pulseaudio"
        type = "2"
        target = "pactl"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pactl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_119 {
    meta:
        app_name = "openssl"
        type = "1"
        target = "padlock"
        pattern = "padlock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /padlock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /padlock.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_config_suse {
    meta:
        app_name = "pam-config-suse"
        type = "2"
        target = "pam-config"
        pattern = "pam-config.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam-config.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam-config/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_config {
    meta:
        app_name = "pam-config"
        type = "2"
        target = "pam-config"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam-config/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_5 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_access"
        pattern = "pam_access.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_access.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_access.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_6 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_cracklib"
        pattern = "pam_cracklib.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_cracklib.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_cracklib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_7 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_debug"
        pattern = "pam_debug.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_debug.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_debug.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_8 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_deny"
        pattern = "pam_deny.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_deny.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_deny.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_9 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_echo"
        pattern = "pam_echo.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_echo.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_echo.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_10 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_env"
        pattern = "pam_env.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_env.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_env.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_11 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_exec"
        pattern = "pam_exec.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_exec.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_exec.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_12 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_faildelay"
        pattern = "pam_faildelay.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_faildelay.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_faildelay.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_13 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_faillock"
        pattern = "pam_faillock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_faillock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_faillock.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_14 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_filter"
        pattern = "pam_filter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_filter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_filter.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_15 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_ftp"
        pattern = "pam_ftp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_ftp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_ftp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_16 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_group"
        pattern = "pam_group.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_group.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_group.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule linux_pam_2 {
    meta:
        app_name = "linux-pam"
        type = "1"
        target = "pam_group"
        pattern = "Linux-PAM-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Linux-PAM-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_group.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_17 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_issue"
        pattern = "pam_issue.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_issue.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_issue.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_18 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_keyinit"
        pattern = "pam_keyinit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_keyinit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_keyinit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_19 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_lastlog"
        pattern = "pam_lastlog.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_lastlog.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_lastlog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_20 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_limits"
        pattern = "pam_limits.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_limits.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_limits.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_21 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_listfile"
        pattern = "pam_listfile.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_listfile.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_listfile.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_22 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_localuser"
        pattern = "pam_localuser.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_localuser.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_localuser.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_23 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_loginuid"
        pattern = "pam_loginuid.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_loginuid.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_loginuid.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_24 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_mail"
        pattern = "pam_mail.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_mail.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_mail.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_25 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_mkhomedir"
        pattern = "pam_mkhomedir.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_mkhomedir.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_mkhomedir.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_26 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_motd"
        pattern = "pam_motd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_motd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_motd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_27 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_namespace"
        pattern = "pam_namespace.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_namespace.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_namespace.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_28 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_nologin"
        pattern = "pam_nologin.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_nologin.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_nologin.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_29 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_permit"
        pattern = "pam_permit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_permit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_permit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_30 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_pwhistory"
        pattern = "pam_pwhistory.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_pwhistory.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_pwhistory.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_31 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_rhosts"
        pattern = "pam_rhosts.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_rhosts.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_rhosts.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_32 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_rootok"
        pattern = "pam_rootok.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_rootok.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_rootok.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_33 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_securetty"
        pattern = "pam_securetty.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_securetty.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_securetty.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_34 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_selinux"
        pattern = "pam_selinux.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_selinux.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_selinux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_35 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_sepermit"
        pattern = "pam_sepermit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_sepermit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_sepermit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_36 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_shells"
        pattern = "pam_shells.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_shells.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_shells.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_37 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_stress"
        pattern = "pam_stress.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_stress.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_stress.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_38 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_succeed_if"
        pattern = "pam_succeed_if.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_succeed_if.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_succeed_if.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_27 {
    meta:
        app_name = "systemd"
        type = "1"
        target = "pam_systemd"
        pattern = "pam_systemd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_systemd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_systemd.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_39 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_tally2"
        pattern = "pam_tally2.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_tally2.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_tally2.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_40 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_time"
        pattern = "pam_time.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_time.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_time.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_41 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_timestamp"
        pattern = "pam_timestamp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_timestamp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_timestamp.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_42 {
    meta:
        app_name = "pam"
        type = "2"
        target = "pam_timestamp_check"
        pattern = "pam_timestamp_check.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_timestamp_check.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_timestamp_check/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_43 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_tty_audit"
        pattern = "pam_tty_audit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_tty_audit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_tty_audit.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_44 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_umask"
        pattern = "pam_umask.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_umask.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_umask.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_45 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_unix"
        pattern = "pam_unix.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_unix.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_unix.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_46 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_warn"
        pattern = "pam_warn.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_warn.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_warn.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_47 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_wheel"
        pattern = "pam_wheel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_wheel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_wheel.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_48 {
    meta:
        app_name = "pam"
        type = "1"
        target = "pam_xauth"
        pattern = "pam_xauth.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pam_xauth.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pam_xauth.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_4 {
    meta:
        app_name = "pango"
        type = "2"
        target = "pango-view"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pango-view/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule panic {
    meta:
        app_name = "panic"
        type = "2"
        target = "panic.ko"
        pattern = "panic.ko.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /panic.ko.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /panic.ko/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_155 {
    meta:
        app_name = "glib"
        type = "2"
        target = "param"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /param/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_120 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "param_build_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /param_build_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_121 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "params_api_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /params_api_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_122 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "params_conversion_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /params_conversion_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_123 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "params_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /params_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_156 {
    meta:
        app_name = "glib"
        type = "2"
        target = "paramspec-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /paramspec-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_25 {
    meta:
        app_name = "python"
        type = "1"
        target = "parser.cpython-35m-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /parser.cpython-35m-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_26 {
    meta:
        app_name = "python"
        type = "1"
        target = "parser.cpython-35m-arm-linux-gnueabihf"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /parser.cpython-35m-arm-linux-gnueabihf.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_27 {
    meta:
        app_name = "python"
        type = "1"
        target = "parser.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /parser.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted_4 {
    meta:
        app_name = "parted"
        type = "2"
        target = "parted"
        pattern = "parted-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /parted-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /parted/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule parted_5 {
    meta:
        app_name = "parted"
        type = "2"
        target = "partprobe.parted"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /partprobe.parted/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_170 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "partx"
        pattern = "partx.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /partx.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /partx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_171 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "partx"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /partx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_37 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "passwd"
        pattern = "passwd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /passwd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /passwd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_38 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "passwd.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /passwd.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_92 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "paste"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /paste/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_93 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "paste.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /paste.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_39 {
    meta:
        app_name = "pulseaudio"
        type = "2"
        target = "pasuspender"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pasuspender/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule patch {
    meta:
        app_name = "patch"
        type = "2"
        target = "patch.patch"
        pattern = "patch-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /patch-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /patch.patch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_28 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "path_id_compat"
        pattern = "path_id_compat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /path_id_compat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /path_id_compat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_94 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pathchk"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pathchk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_95 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pathchk.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pathchk.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_157 {
    meta:
        app_name = "glib"
        type = "2"
        target = "pattern"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pattern/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_124 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pbelutest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pbelutest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_125 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pbetest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pbetest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_63 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pbkdf2-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pbkdf2-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_453 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pc"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_52 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "pcprofiledump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pcprofiledump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcre_2 {
    meta:
        app_name = "pcre"
        type = "2"
        target = "pcre_stringpiece_unittest"
        pattern = "pcre-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pcre-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pcre_stringpiece_unittest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pcsc_lite {
    meta:
        app_name = "pcsc-lite"
        type = "2"
        target = "pcscd"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pcscd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_35 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Peek"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Peek.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_104 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "peel_type"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /peel_type/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_126 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pem_read_depr_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pem_read_depr_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_127 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pemtes"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pemtes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_128 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pemtest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pemtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_454 {
    meta:
        app_name = "strace"
        type = "2"
        target = "perf_event_open"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /perf_event_open/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_455 {
    meta:
        app_name = "strace"
        type = "2"
        target = "perf_event_open_nonverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /perf_event_open_nonverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_456 {
    meta:
        app_name = "strace"
        type = "2"
        target = "perf_event_open_unabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /perf_event_open_unabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_36 {
    meta:
        app_name = "perl"
        type = "2"
        target = "perl5.24.4"
        pattern = "perl/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /perl\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /perl5.24.4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_158 {
    meta:
        app_name = "glib"
        type = "2"
        target = "permission"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /permission/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_4 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pgrep"
        pattern = "pgrep.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pgrep.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pgrep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_5 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pgrep"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pgrep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_1 {
    meta:
        app_name = "procps"
        type = "2"
        target = "pgrep.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pgrep.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_457 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_getfd"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_getfd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_458 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_getfd-yy"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_getfd-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_459 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_460 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open--decode-fd-none"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open--decode-fd-none/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_461 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open--decode-fd-path"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open--decode-fd-path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_462 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open--decode-fd-pidfd"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open--decode-fd-pidfd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_463 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open--decode-fd-socket"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open--decode-fd-socket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_464 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_465 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open-P"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_466 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open-y"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_467 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_open-yy"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_open-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_468 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_send_signal"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_send_signal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_469 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pidfd_send_signal--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidfd_send_signal--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_6 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pidof.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidof.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_3 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "pidstat"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pidstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_37 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Piece"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Piece.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_96 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pinky"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pinky/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_97 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pinky.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pinky.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_470 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pipe2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipe2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_317 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_cleanup"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_cleanup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_318 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_parse_launch"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_parse_launch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_319 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_queue_error"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_queue_error/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_320 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_seek"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_seek/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_321 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_simple_launch_lines"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_simple_launch_lines/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_322 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "pipelines_stress"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pipelines_stress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_172 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "pivot_root"
        pattern = "pivot_root.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pivot_root.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pivot_root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_173 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "pivot_root"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pivot_root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_174 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "pivot_root.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pivot_root.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_16 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-area-updated"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-area-updated/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_17 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-composite"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-composite/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_18 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-construction"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-construction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_19 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-dpi"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-dpi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_20 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-fail"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-fail/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_21 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-gif"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-gif/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_22 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-gif-circular-table"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-gif-circular-table/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_23 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-icc"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-icc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_24 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-icon-serialize"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-icon-serialize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_25 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-jpeg"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-jpeg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_26 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-pixdata"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-pixdata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_27 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-randomly-modified"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-randomly-modified/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_28 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-readonly-to-mutable"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-readonly-to-mutable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_29 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-reftest"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-reftest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_30 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-resource"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-resource/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_31 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-save"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-save/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_32 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-scale"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-scale/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_33 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-scale-two-step"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-scale-two-step/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_34 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-short-gif-write"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-short-gif-write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_35 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-stream"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gdk_pixbuf_36 {
    meta:
        app_name = "gdk-pixbuf"
        type = "2"
        target = "pixbuf-threads"
        pattern = "gdk-pixbuf-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gdk-pixbuf-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pixbuf-threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_10 {
    meta:
        app_name = "nss"
        type = "2"
        target = "pk11ectest"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pk11ectest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_2 {
    meta:
        app_name = "polkit"
        type = "2"
        target = "pkaction"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_3 {
    meta:
        app_name = "polkit"
        type = "2"
        target = "pkcheck"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcheck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_64 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pkcs1-conv"
        pattern = "nettle (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /nettle (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcs1-conv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_65 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pkcs1-sec-decrypt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcs1-sec-decrypt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_66 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pkcs1-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcs1-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_129 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pkcs12_format_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcs12_format_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_130 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pkcs7_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkcs7_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_4 {
    meta:
        app_name = "polkit"
        type = "2"
        target = "pkexec"
        pattern = "polkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /polkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkexec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_471 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pkey_alloc"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkey_alloc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_472 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pkey_free"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkey_free/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_131 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pkey_meth_kdf_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkey_meth_kdf_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_132 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "pkey_meth_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkey_meth_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_473 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pkey_mprotect"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkey_mprotect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_59 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "pki"
        pattern = "pki.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pki.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pki/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_7 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pkill.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkill.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_5 {
    meta:
        app_name = "polkit"
        type = "2"
        target = "pkttyagent"
        pattern = "polkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /polkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pkttyagent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_18 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "pl111_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pl111_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_53 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "pldd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pldd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_8 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pmap"
        pattern = "pmap.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pmap.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_9 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pmap"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_10 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pmap.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pmap.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule polkit_6 {
    meta:
        app_name = "polkit"
        type = "2"
        target = "polkitd"
        pattern = "polkit-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /polkit-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /polkitd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_28 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "poll_nm"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /poll_nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_29 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "pollabe"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pollabe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_67 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "poly1305-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /poly1305-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_133 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "poly1305_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /poly1305_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_38 {
    meta:
        app_name = "perl"
        type = "1"
        target = "POSIX"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /POSIX.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_54 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "POSIX_V6_LP64_OFF64"
        pattern = "POSIX_V6_LP64_OFF64.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /POSIX_V6_LP64_OFF64.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /POSIX_V6_LP64_OFF64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_159 {
    meta:
        app_name = "glib"
        type = "2"
        target = "power-profile-monitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /power-profile-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_474 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ppoll"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ppoll/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_475 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ppoll-P"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ppoll-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_476 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ppoll-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ppoll-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ppp {
    meta:
        app_name = "ppp"
        type = "2"
        target = "pppd"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pppd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ppp_1 {
    meta:
        app_name = "ppp"
        type = "1"
        target = "pppol2tp-android"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pppol2tp-android.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ppp_2 {
    meta:
        app_name = "ppp"
        type = "1"
        target = "pppopptp-android"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pppopptp-android.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_39 {
    meta:
        app_name = "perl"
        type = "1"
        target = "PPPort"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /PPPort.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_98 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pr"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_99 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pr.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pr.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_477 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-arg2-intptr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-arg2-intptr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_478 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-cap-ambient"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-cap-ambient/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_479 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-capbset"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-capbset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_480 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-dumpable"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-dumpable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_481 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-fp-mode"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-fp-mode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_482 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-mce-kill"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-mce-kill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_483 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-name"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-name/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_484 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-no-args"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-no-args/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_485 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-pac-enabled-keys-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-pac-enabled-keys-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_486 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-pac-enabled-keys-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-pac-enabled-keys-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_487 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-pdeathsig"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-pdeathsig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_488 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_489 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core--pidns-translation-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core--pidns-translation-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_490 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core--pidns-translation-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core--pidns-translation-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_491 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core--pidns-translation-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core--pidns-translation-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_492 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_493 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_494 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success--pidns-translation-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success--pidns-translation-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_495 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success--pidns-translation-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success--pidns-translation-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_496 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_497 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_498 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-sched-core-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-sched-core-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_499 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-seccomp-filter-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-seccomp-filter-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_500 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-seccomp-strict"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-seccomp-strict/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_501 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-securebits"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-securebits/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_502 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-securebits-success-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-securebits-success-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_503 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-securebits-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-securebits-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_504 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-securebits-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-securebits-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_505 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-set-ptracer-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-set-ptracer-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_506 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-set-ptracer-success-Xraw--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-set-ptracer-success-Xraw--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_507 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-spec-inject"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-spec-inject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_508 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tagged-addr-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tagged-addr-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_509 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tagged-addr-success-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tagged-addr-success-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_510 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tagged-addr-success-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tagged-addr-success-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_511 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tagged-addr-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tagged-addr-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_512 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tagged-addr-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tagged-addr-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_513 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tid_address"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tid_address/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_514 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prctl-tsc"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prctl-tsc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_515 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pread64-pwrite64"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pread64-pwrite64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_516 {
    meta:
        app_name = "strace"
        type = "2"
        target = "preadv"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /preadv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_517 {
    meta:
        app_name = "strace"
        type = "2"
        target = "preadv-pwritev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /preadv-pwritev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_518 {
    meta:
        app_name = "strace"
        type = "2"
        target = "preadv2-pwritev2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /preadv2-pwritev2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_519 {
    meta:
        app_name = "strace"
        type = "2"
        target = "print_maxfd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /print_maxfd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_520 {
    meta:
        app_name = "strace"
        type = "2"
        target = "print_ppid_tracerpid"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /print_ppid_tracerpid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_100 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "printenv.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printenv.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_101 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "printf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_102 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "printf.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printf.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_521 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printpath-umovestr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printpath-umovestr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_522 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printpath-umovestr-peekdata"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printpath-umovestr-peekdata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_523 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printpath-umovestr-undumpable"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printpath-umovestr-undumpable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_524 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printsignal-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printsignal-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_525 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printsignal-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printsignal-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_526 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printsignal-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printsignal-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_527 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printstr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printstr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_528 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printstrn-umoven"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printstrn-umoven/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_529 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printstrn-umoven-peekdata"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printstrn-umoven-peekdata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_530 {
    meta:
        app_name = "strace"
        type = "2"
        target = "printstrn-umoven-undumpable"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /printstrn-umoven-undumpable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_9 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "prioreset"
        pattern = "prioreset.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /prioreset.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prioreset.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_160 {
    meta:
        app_name = "glib"
        type = "2"
        target = "private"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /private/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_175 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "prlimit"
        pattern = "prlimit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /prlimit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_176 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "prlimit"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_177 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "prlimit.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_531 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prlimit64"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit64/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_532 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prlimit64--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit64--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_533 {
    meta:
        app_name = "strace"
        type = "2"
        target = "prlimit64-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prlimit64-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_534 {
    meta:
        app_name = "strace"
        type = "2"
        target = "process_madvise-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /process_madvise-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_535 {
    meta:
        app_name = "strace"
        type = "2"
        target = "process_madvise-yy"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /process_madvise-yy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_536 {
    meta:
        app_name = "strace"
        type = "2"
        target = "process_mrelease-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /process_mrelease-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_537 {
    meta:
        app_name = "strace"
        type = "2"
        target = "process_vm_readv"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /process_vm_readv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_538 {
    meta:
        app_name = "strace"
        type = "2"
        target = "process_vm_writev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /process_vm_writev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_161 {
    meta:
        app_name = "glib"
        type = "2"
        target = "properties"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /properties/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_162 {
    meta:
        app_name = "glib"
        type = "2"
        target = "properties2"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /properties2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_163 {
    meta:
        app_name = "glib"
        type = "2"
        target = "properties3"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /properties3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_164 {
    meta:
        app_name = "glib"
        type = "2"
        target = "properties4"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /properties4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_134 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "property_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /property_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_165 {
    meta:
        app_name = "glib"
        type = "2"
        target = "protocol"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /protocol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_14 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "protocol-logger-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /protocol-logger-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_135 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "prov_config_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /prov_config_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_136 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provfetchtest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provfetchtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_30 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "provider"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_137 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provider_fallback_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider_fallback_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_138 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provider_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_139 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provider_pkey_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider_pkey_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_140 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provider_status_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider_status_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_141 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "provider_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /provider_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_166 {
    meta:
        app_name = "glib"
        type = "2"
        target = "proxy-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /proxy-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_11 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "ps"
        pattern = "ps.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ps.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_12 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "ps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_2 {
    meta:
        app_name = "procps"
        type = "2"
        target = "ps.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ps.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_539 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pselect6"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pselect6/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_46 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "psfxtable"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /psfxtable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule little_cms_1 {
    meta:
        app_name = "little_cms"
        type = "2"
        target = "psicc"
        pattern = "little CMS ICC PostScript generator - v(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /little CMS ICC PostScript generator - v(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /psicc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_68 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pss-mgf1-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pss-mgf1-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_69 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "pss-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pss-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_540 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_541 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_542 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_543 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_544 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace_syscall_info"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace_syscall_info/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_545 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace_syscall_info-Xabbrev"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace_syscall_info-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_546 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ptrace_syscall_info-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptrace_syscall_info-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_103 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ptx"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_104 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "ptx.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ptx.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pulseaudio_40 {
    meta:
        app_name = "pulseaudio"
        type = "2"
        target = "pulseaudio"
        pattern = "pulseaudio-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pulseaudio-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pulseaudio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_39 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwck"
        pattern = "pwck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pwck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_40 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwck"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_41 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwconv"
        pattern = "pwconv.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pwconv.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_42 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwconv"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_105 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "pwd.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwd.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_13 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pwdx"
        pattern = "pwdx.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pwdx.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwdx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_14 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pwdx"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwdx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_15 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "pwdx.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwdx.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_547 {
    meta:
        app_name = "strace"
        type = "2"
        target = "pwritev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwritev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_43 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwunconv"
        pattern = "pwunconv.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /pwunconv.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwunconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_44 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "pwunconv"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pwunconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_28 {
    meta:
        app_name = "python"
        type = "1"
        target = "pyexpat.cpython-310-aarch64-linux-gnu"
        pattern = "python3/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /python3\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pyexpat.cpython-310-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libexpat_2 {
    meta:
        app_name = "libexpat"
        type = "1"
        target = "pyexpat.cpython-35m-aarch64-linux-gnu"
        pattern = "expat_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /expat_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pyexpat.cpython-35m-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libexpat_3 {
    meta:
        app_name = "libexpat"
        type = "1"
        target = "pyexpat.cpython-38-aarch64-linux-gnu"
        pattern = "Python-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Python-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pyexpat.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zstandard_1 {
    meta:
        app_name = "zstandard"
        type = "2"
        target = "pzstd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /pzstd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_167 {
    meta:
        app_name = "glib"
        type = "2"
        target = "qdata"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qdata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qdbuscpp2xml"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qdbuscpp2xml/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_1 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qdbusxml2cpp"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qdbusxml2cpp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dnsmasq_1 {
    meta:
        app_name = "dnsmasq"
        type = "2"
        target = "ql_dnsmasq"
        pattern = "dnsmasq-(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /dnsmasq-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ql_dnsmasq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_2 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qlalr"
        pattern = "gpl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gpl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qlalr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_3 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmake"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmake/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libqmi {
    meta:
        app_name = "libqmi"
        type = "2"
        target = "qmi-firmware-update"
        pattern = "qmi-firmware-update (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qmi-firmware-update (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmi-firmware-update/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libqmi_1 {
    meta:
        app_name = "libqmi"
        type = "2"
        target = "qmi-proxy"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmi-proxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libqmi_2 {
    meta:
        app_name = "libqmi"
        type = "2"
        target = "qmicli"
        pattern = "qmicli (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qmicli (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmicli/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_4 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qml"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qml/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_5 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlcachegen"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlcachegen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_6 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmleasing"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmleasing/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_7 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlimportscanner"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlimportscanner/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_8 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmllint"
        pattern = "qtdeclarative/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtdeclarative\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmllint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_9 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlmin"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlmin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_10 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlplugindump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlplugindump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_11 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlprofiler"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlprofiler/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_12 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qmlscene"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qmlscene/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_168 {
    meta:
        app_name = "glib"
        type = "2"
        target = "qsort-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qsort-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_13 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qtwaylandscanner"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qtwaylandscanner/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_548 {
    meta:
        app_name = "strace"
        type = "2"
        target = "qual_fault"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qual_fault/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_549 {
    meta:
        app_name = "strace"
        type = "2"
        target = "qual_inject-error-signal"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qual_inject-error-signal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_550 {
    meta:
        app_name = "strace"
        type = "2"
        target = "qual_inject-retval"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qual_inject-retval/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_551 {
    meta:
        app_name = "strace"
        type = "2"
        target = "qual_inject-signal"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qual_inject-signal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_552 {
    meta:
        app_name = "strace"
        type = "2"
        target = "qual_signal"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qual_signal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_169 {
    meta:
        app_name = "glib"
        type = "2"
        target = "queue"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /queue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_15 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "queue-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /queue-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_553 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_554 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_555 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-success-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_556 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_557 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_558 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-xfs"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-xfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_559 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-xfs-success"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-xfs-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_560 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-xfs-success-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-xfs-success-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_561 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-xfs-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-xfs-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_562 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_563 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl-Xverbose"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_564 {
    meta:
        app_name = "strace"
        type = "2"
        target = "quotactl_fd-P"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /quotactl_fd-P/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_14 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "qvkgen"
        pattern = "^([0-9]\\.[0-9]+(\\.[0-9]+)?)$"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /qvkgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_170 {
    meta:
        app_name = "glib"
        type = "2"
        target = "rand"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rand/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_142 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rand_status_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rand_status_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_143 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rand_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rand_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qnx_software_development_platform_2 {
    meta:
        app_name = "qnx_software_development_platform"
        type = "2"
        target = "random"
        pattern = "VERSION=(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /VERSION=(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /random/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == "QNX_info") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_70 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "random-prime-test"
        pattern = "nettle-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nettle-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /random-prime-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tcl {
    meta:
        app_name = "tcl"
        type = "2"
        target = "randseed"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /randseed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_178 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "raw"
        pattern = "raw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /raw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /raw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_179 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "raw"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /raw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_144 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rc2test"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rc2test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_145 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rc4test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rc4test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_146 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rc5test"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rc5test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_19 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "rcar-du_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rcar-du_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_171 {
    meta:
        app_name = "glib"
        type = "2"
        target = "rcbox"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rcbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_15 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "rcc"
        pattern = "^([0-9]\\.[0-9]+(\\.[0-9]+)?)$"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rcc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_8 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "rdma"
        pattern = "rdma.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rdma.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rdma/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_147 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rdrand_sanitytest"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rdrand_sanitytest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_565 {
    meta:
        app_name = "strace"
        type = "2"
        target = "read-write"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /read-write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_105 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "read_unaligned"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /read_unaligned/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_566 {
    meta:
        app_name = "strace"
        type = "2"
        target = "readahead"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readahead/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_106 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "readelf"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readelf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_106 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "readlink.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readlink.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_567 {
    meta:
        app_name = "strace"
        type = "2"
        target = "readlinkat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readlinkat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_180 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "readprofile"
        pattern = "readprofile.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /readprofile.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readprofile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_181 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "readprofile"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readprofile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_182 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "readprofile.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readprofile.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_568 {
    meta:
        app_name = "strace"
        type = "2"
        target = "readv"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_172 {
    meta:
        app_name = "glib"
        type = "2"
        target = "readwrite"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /readwrite/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_107 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "realpath"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /realpath/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_108 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "realpath.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /realpath.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_173 {
    meta:
        app_name = "glib"
        type = "2"
        target = "rec-mutex"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rec-mutex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_148 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "recordlentest"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recordlentest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_569 {
    meta:
        app_name = "strace"
        type = "2"
        target = "recv-MSG_TRUNC"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recv-MSG_TRUNC/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_43 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "recv_image"
        pattern = "recv_image.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /recv_image.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recv_image/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_570 {
    meta:
        app_name = "strace"
        type = "2"
        target = "recvfrom"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recvfrom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_571 {
    meta:
        app_name = "strace"
        type = "2"
        target = "recvfrom-MSG_TRUNC"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recvfrom-MSG_TRUNC/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_572 {
    meta:
        app_name = "strace"
        type = "2"
        target = "recvmmsg-timeout"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recvmmsg-timeout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_573 {
    meta:
        app_name = "strace"
        type = "2"
        target = "recvmsg"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /recvmsg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_574 {
    meta:
        app_name = "strace"
        type = "2"
        target = "redirect-fds"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /redirect-fds/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_174 {
    meta:
        app_name = "glib"
        type = "2"
        target = "refcount"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /refcount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_175 {
    meta:
        app_name = "glib"
        type = "2"
        target = "refcount-macro"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /refcount-macro/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_176 {
    meta:
        app_name = "glib"
        type = "2"
        target = "reference"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /reference/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_177 {
    meta:
        app_name = "glib"
        type = "2"
        target = "references"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /references/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_178 {
    meta:
        app_name = "glib"
        type = "2"
        target = "refstring"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /refstring/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_179 {
    meta:
        app_name = "glib"
        type = "2"
        target = "regex"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /regex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_180 {
    meta:
        app_name = "glib"
        type = "2"
        target = "relation"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /relation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_181 {
    meta:
        app_name = "glib"
        type = "2"
        target = "relation-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /relation-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_575 {
    meta:
        app_name = "strace"
        type = "2"
        target = "remap_file_pages"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /remap_file_pages/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_576 {
    meta:
        app_name = "strace"
        type = "2"
        target = "remap_file_pages-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /remap_file_pages-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_577 {
    meta:
        app_name = "strace"
        type = "2"
        target = "remap_file_pages-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /remap_file_pages-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_578 {
    meta:
        app_name = "strace"
        type = "2"
        target = "remap_file_pages-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /remap_file_pages-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_183 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rename"
        pattern = "rename.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rename.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rename/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_184 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rename"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rename/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_579 {
    meta:
        app_name = "strace"
        type = "2"
        target = "renameat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /renameat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_580 {
    meta:
        app_name = "strace"
        type = "2"
        target = "renameat2"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /renameat2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_185 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "renice"
        pattern = "renice.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /renice.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /renice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_186 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "renice"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /renice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_187 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "renice.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /renice.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_20 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "repaper_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /repaper_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule keyutils_4 {
    meta:
        app_name = "keyutils"
        type = "2"
        target = "request-key"
        pattern = "request-key.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /request-key.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /request-key/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_581 {
    meta:
        app_name = "strace"
        type = "2"
        target = "request_key"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /request_key/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_107 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "rerequest_tag"
        pattern = "elfutils-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /elfutils-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rerequest_tag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_44 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "resize2fs"
        pattern = "resize2fs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /resize2fs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resize2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_45 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "resize2fs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resize2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_188 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "resizepart"
        pattern = "resizepart.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /resizepart.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resizepart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_189 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "resizepart"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resizepart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_7 {
    meta:
        app_name = "connman"
        type = "2"
        target = "resolv-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resolv-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_182 {
    meta:
        app_name = "glib"
        type = "2"
        target = "resolver-parsing"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resolver-parsing/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_183 {
    meta:
        app_name = "glib"
        type = "2"
        target = "resources"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resources/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_16 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "resources-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /resources-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_582 {
    meta:
        app_name = "strace"
        type = "2"
        target = "restart_syscall"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /restart_syscall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_190 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rev"
        pattern = "rev.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rev.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_191 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rev"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_192 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rev.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rev.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_17 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "rfcomm"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfcomm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_44 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "rfddump"
        pattern = "rfddump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rfddump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfddump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_45 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "rfddump"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfddump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_46 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "rfdformat"
        pattern = "rfdformat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rfdformat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfdformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_47 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "rfdformat"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfdformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_193 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rfkill"
        pattern = "rfkill.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rfkill.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_194 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rfkill"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_195 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rfkill.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rfkill.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_71 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "ripemd160-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ripemd160-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_109 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "rm.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rm.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_110 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "rmdir.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rmdir.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_21 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "rockchip_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rockchip_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_18 {
    meta:
        app_name = "ust"
        type = "2"
        target = "rotation"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rotation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nfs_utils_1 {
    meta:
        app_name = "nfs-utils"
        type = "2"
        target = "rpc.mountd"
        pattern = "version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpc.mountd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nfs_utils_2 {
    meta:
        app_name = "nfs-utils"
        type = "2"
        target = "rpc.statd"
        pattern = "version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpc.statd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_10 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpm"
        pattern = "rpm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_11 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpm2cpio"
        pattern = "rpm2cpio.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpm2cpio.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpm2cpio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_12 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb"
        pattern = "rpmdb.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_13 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_dump"
        pattern = "rpmdb_dump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_dump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_dump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_14 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_load"
        pattern = "rpmdb_load.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_load.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_15 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_recover"
        pattern = "rpmdb_recover.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_recover.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_recover/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_16 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_stat"
        pattern = "rpmdb_stat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_stat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_stat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_17 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_upgrade"
        pattern = "rpmdb_upgrade.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_upgrade.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_upgrade/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_18 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdb_verify"
        pattern = "rpmdb_verify.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdb_verify.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdb_verify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_19 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmdeps"
        pattern = "rpmdeps.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmdeps.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmdeps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_20 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmgraph"
        pattern = "rpmgraph.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmgraph.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmgraph/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_21 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmkeys"
        pattern = "rpmkeys.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmkeys.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmkeys/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_22 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmqpack"
        pattern = "rpmqpack.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmqpack.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmqpack/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_23 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmsign"
        pattern = "rpmsign.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmsign.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmsign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_24 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "rpmspec"
        pattern = "rpmspec.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rpmspec.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rpmspec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_72 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-compute-root-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-compute-root-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_73 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-encrypt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-encrypt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_74 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-keygen-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-keygen-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_75 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-pss-sign-tr-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-pss-sign-tr-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_76 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-sec-decrypt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-sec-decrypt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_77 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-sign-tr-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-sign-tr-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_78 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_79 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "rsa2sexp-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa2sexp-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_149 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rsa_mp_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa_mp_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_150 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rsa_sp800_56b_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa_sp800_56b_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_151 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "rsa_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsa_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_11 {
    meta:
        app_name = "nss"
        type = "2"
        target = "rsaperf"
        pattern = "Version: NSS (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Version: NSS (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsaperf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsync {
    meta:
        app_name = "rsync"
        type = "2"
        target = "rsync"
        pattern = "^([2-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([2-9]+\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsync/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsync_1 {
    meta:
        app_name = "rsync"
        type = "2"
        target = "rsync"
        pattern = "^(1\\.[067]\\.[0-9])$"

    strings:
        $pattern = /(1\.[067]\.[0-9])/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsync/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rsyslog_22 {
    meta:
        app_name = "rsyslog"
        type = "2"
        target = "rsyslogd"
        pattern = "rsyslog-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /rsyslog-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rsyslogd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_583 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigaction"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_584 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigpending"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigpending/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_585 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigprocmask"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigprocmask/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_586 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigqueueinfo"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigqueueinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_587 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigqueueinfo--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigqueueinfo--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_588 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigreturn"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigreturn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_589 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigsuspend"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigsuspend/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_590 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_sigtimedwait"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_sigtimedwait/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_591 {
    meta:
        app_name = "strace"
        type = "2"
        target = "rt_tgsigqueueinfo"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rt_tgsigqueueinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_9 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "rtacct"
        pattern = "rtacct.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rtacct.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rtacct/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_196 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rtcwake"
        pattern = "rtcwake.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rtcwake.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rtcwake/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_197 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rtcwake"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rtcwake/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_198 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "rtcwake.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rtcwake.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_10 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "rtmon"
        pattern = "rtmon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rtmon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rtmon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_592 {
    meta:
        app_name = "strace"
        type = "2"
        target = "run_expect_termsig"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /run_expect_termsig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_111 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "runcon"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /runcon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_112 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "runcon.coreutils"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /runcon.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_199 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "runuser"
        pattern = "runuser.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /runuser.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /runuser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_200 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "runuser"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /runuser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_7 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "rvmtab"
        pattern = "rvmtab.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /rvmtab.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rvmtab/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_184 {
    meta:
        app_name = "glib"
        type = "2"
        target = "rwlock"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rwlock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_31 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "rwlocktest"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /rwlocktest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_4 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "sadc"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sadc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_5 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "sadf"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sadf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_80 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "salsa20-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /salsa20-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_201 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sample-fdisk-mkpart"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sample-fdisk-mkpart/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_202 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sample-fdisk-mkpart-fullspec"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sample-fdisk-mkpart-fullspec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_203 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sample-scols-title"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sample-scols-title/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_3 {
    meta:
        app_name = "sudo"
        type = "1"
        target = "sample_approval"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sample_approval.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_17 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "sanity-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sanity-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_152 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sanitytest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sanitytest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_6 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "sar"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_40 {
    meta:
        app_name = "perl"
        type = "1"
        target = "scalar"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scalar.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_185 {
    meta:
        app_name = "glib"
        type = "2"
        target = "scannerapi"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scannerapi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_25 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "scdaemon"
        pattern = "gnupg-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /gnupg-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scdaemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_60 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "scepclient"
        pattern = "scepclient.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /scepclient.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scepclient/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_593 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_rr_get_interval"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_rr_get_interval/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_594 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetaffinity"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetaffinity/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_595 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetaffinity--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetaffinity--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_596 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetattr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_597 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetattr--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetattr--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_598 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetparam"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetparam/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_599 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sched_xetscheduler"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sched_xetscheduler/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_19 {
    meta:
        app_name = "ust"
        type = "2"
        target = "schedule_api"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /schedule_api/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_600 {
    meta:
        app_name = "strace"
        type = "2"
        target = "scm_rights"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scm_rights/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh {
    meta:
        app_name = "openssh"
        type = "2"
        target = "scp"
        pattern = "scp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /scp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_1 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "scp"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_204 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "script"
        pattern = "script.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /script.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /script/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_205 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "script"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /script/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_206 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "scriptlive"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scriptlive/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_207 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "scriptreplay"
        pattern = "scriptreplay.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /scriptreplay.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scriptreplay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_208 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "scriptreplay"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scriptreplay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_29 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "scsi_id"
        pattern = "scsi_id.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /scsi_id.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scsi_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_30 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "scsi_id"
        pattern = "(2[0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /(2[0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /scsi_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_41 {
    meta:
        app_name = "perl"
        type = "1"
        target = "SDBM_File"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /SDBM_File.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule diffutils_4 {
    meta:
        app_name = "diffutils"
        type = "2"
        target = "sdiff"
        pattern = "diffutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /diffutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sdiff/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_18 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "sdptool"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sdptool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_186 {
    meta:
        app_name = "glib"
        type = "2"
        target = "search-utils"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /search-utils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_601 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp-filter"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp-filter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_602 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp-filter-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp-filter-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_603 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp-strict"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp-strict/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_604 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp_get_action_avail"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp_get_action_avail/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_605 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp_get_notif_sizes"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp_get_notif_sizes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_606 {
    meta:
        app_name = "strace"
        type = "2"
        target = "seccomp_get_notif_sizes-success"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seccomp_get_notif_sizes-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_153 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "secmemtest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /secmemtest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule selinux {
    meta:
        app_name = "selinux"
        type = "2"
        target = "secon"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /secon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tomcat {
    meta:
        app_name = "tomcat"
        type = "2"
        target = "security-manager"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /security-manager/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tomcat_1 {
    meta:
        app_name = "tomcat"
        type = "2"
        target = "security-manager-cmd"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /security-manager-cmd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sed {
    meta:
        app_name = "sed"
        type = "2"
        target = "sed"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sed_1 {
    meta:
        app_name = "sed"
        type = "2"
        target = "sed.sed"
        pattern = "sed-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sed-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sed.sed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_5 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "sefcontext_compile"
        pattern = "sefcontext_compile.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sefcontext_compile.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sefcontext_compile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_32 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "sel_spd"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sel_spd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_6 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selabel_digest"
        pattern = "selabel_digest.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selabel_digest.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selabel_digest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_7 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selabel_lookup"
        pattern = "selabel_lookup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selabel_lookup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selabel_lookup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_8 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selabel_lookup_best_match"
        pattern = "selabel_lookup_best_match.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selabel_lookup_best_match.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selabel_lookup_best_match/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_9 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selabel_partial_match"
        pattern = "selabel_partial_match.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selabel_partial_match.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selabel_partial_match/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_33 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "selct_nm"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selct_nm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_25 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "selinux"
        pattern = "selinux.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinux.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinux.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_10 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selinux_check_access"
        pattern = "selinux_check_access.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinux_check_access.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinux_check_access/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_11 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selinuxconlist"
        pattern = "selinuxconlist.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinuxconlist.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinuxconlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_12 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selinuxdefcon"
        pattern = "selinuxdefcon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinuxdefcon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinuxdefcon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_13 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selinuxenabled"
        pattern = "selinuxenabled.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinuxenabled.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinuxenabled/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_14 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "selinuxexeccon"
        pattern = "selinuxexeccon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /selinuxexeccon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /selinuxexeccon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_607 {
    meta:
        app_name = "strace"
        type = "2"
        target = "semop"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /semop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_608 {
    meta:
        app_name = "strace"
        type = "2"
        target = "semtimedop"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /semtimedop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_609 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sendfile"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sendfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_26 {
    meta:
        app_name = "rpm"
        type = "2"
        target = "sepdebugcrcfix"
        pattern = "sepdebugcrcfix.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sepdebugcrcfix.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sepdebugcrcfix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_113 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "seq"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_114 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "seq.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /seq.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_187 {
    meta:
        app_name = "glib"
        type = "2"
        target = "sequence"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sequence/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_81 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "serpent-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /serpent-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_48 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "serve_image"
        pattern = "serve_image.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /serve_image.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /serve_image/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_154 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "server-test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /server-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_155 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "servername_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /servername_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_4 {
    meta:
        app_name = "sudo"
        type = "1"
        target = "sesh"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sesh.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_8 {
    meta:
        app_name = "connman"
        type = "2"
        target = "session-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /session-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_610 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_mempolicy"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_mempolicy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_611 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_mempolicy-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_mempolicy-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_612 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_mempolicy-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_mempolicy-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_613 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_mempolicy-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_mempolicy-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_614 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_sigblock"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_sigblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_615 {
    meta:
        app_name = "strace"
        type = "2"
        target = "set_sigign"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /set_sigign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_209 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setarch"
        pattern = "setarch.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setarch.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setarch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_210 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setarch"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setarch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_211 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setctsid"
        pattern = "setctsid.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setctsid.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setctsid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_616 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setdomainname"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setdomainname/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_15 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "setenforce"
        pattern = "setenforce.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setenforce.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setenforce/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule acl_2 {
    meta:
        app_name = "acl"
        type = "2"
        target = "setfacl"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setfacl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule attr_2 {
    meta:
        app_name = "attr"
        type = "2"
        target = "setfattr.attr"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setfattr.attr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_47 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "setfont"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setfont/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_617 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setgid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setgid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_618 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setgroups"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setgroups/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_619 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sethostname"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sethostname/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_48 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "setkeycodes"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setkeycodes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_49 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "setleds"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setleds/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_50 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "setmetamode"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setmetamode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_620 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setns"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setns/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_621 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setpgrp-exec"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setpgrp-exec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_212 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setpriv"
        pattern = "setpriv.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setpriv.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setpriv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_213 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setpriv"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setpriv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_214 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setpriv.util-linux"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setpriv.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_622 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setregid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setregid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_623 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setresgid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setresgid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_624 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setresuid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setresuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_625 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setreuid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setreuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_626 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setrlimit"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setrlimit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_627 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setrlimit-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setrlimit-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_628 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setrlimit-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setrlimit-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_629 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setrlimit-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setrlimit-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_215 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setsid"
        pattern = "setsid.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setsid.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setsid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_216 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setsid"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setsid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_217 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setsid.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setsid.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_218 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setterm"
        pattern = "setterm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /setterm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setterm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_219 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "setterm"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setterm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_630 {
    meta:
        app_name = "strace"
        type = "2"
        target = "setuid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_51 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "setvtrgb"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /setvtrgb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_82 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sexp-conv"
        pattern = "nettle (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sexp-conv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_83 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sexp-format-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sexp-format-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_84 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sexp-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sexp-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_85 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sexp2rsa-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sexp2rsa-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_220 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sfdisk"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sfdisk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_2 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sftp"
        pattern = "sftp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sftp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sftp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_3 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sftp"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sftp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_4 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sftp-server"
        pattern = "sftp-server.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sftp-server.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sftp-server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_5 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sftp-server"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sftp-server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_42 {
    meta:
        app_name = "perl"
        type = "1"
        target = "SHA"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /SHA.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_86 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha1-huge-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha1-huge-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_87 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha1-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha1-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_115 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha1sum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha1sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_116 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha1sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha1sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_88 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha224-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha224-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_117 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha224sum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha224sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_118 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha224sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha224sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_89 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha256-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha256-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_119 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha256sum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha256sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_120 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha256sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha256sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_90 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha3-224-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha3-224-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_91 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha3-256-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha3-256-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_92 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha3-384-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha3-384-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_93 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha3-512-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha3-512-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_94 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha3-permute-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha3-permute-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_95 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha384-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha384-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_121 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha384sum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha384sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_122 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha384sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha384sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_96 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha512-224-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha512-224-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_97 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha512-256-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha512-256-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_98 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "sha512-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha512-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_123 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha512sum"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha512sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_124 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sha512sum.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha512sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_156 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sha_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sha_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_99 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "shake256-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shake256-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_43 {
    meta:
        app_name = "perl"
        type = "1"
        target = "shared"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shared.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_188 {
    meta:
        app_name = "glib"
        type = "2"
        target = "shell"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_631 {
    meta:
        app_name = "strace"
        type = "2"
        target = "shmxt"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shmxt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule blog_5 {
    meta:
        app_name = "blog"
        type = "2"
        target = "showconsole"
        pattern = "showconsole.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /showconsole.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /showconsole/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_52 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "showconsolefont"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /showconsolefont/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_53 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "showkey"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /showkey/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_54 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "showkey.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /showkey.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_125 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "shred"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shred/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_126 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "shred.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shred.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_127 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "shuf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shuf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_128 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "shuf.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /shuf.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_632 {
    meta:
        app_name = "strace"
        type = "2"
        target = "siginfo"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /siginfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_18 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "signal-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_189 {
    meta:
        app_name = "glib"
        type = "2"
        target = "signal1"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_190 {
    meta:
        app_name = "glib"
        type = "2"
        target = "signal3"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_191 {
    meta:
        app_name = "glib"
        type = "2"
        target = "signal4"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_633 {
    meta:
        app_name = "strace"
        type = "2"
        target = "signal_receive"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal_receive/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_634 {
    meta:
        app_name = "strace"
        type = "2"
        target = "signal_receive--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signal_receive--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_635 {
    meta:
        app_name = "strace"
        type = "2"
        target = "signalfd4"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signalfd4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_192 {
    meta:
        app_name = "glib"
        type = "2"
        target = "signalgroup"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signalgroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_193 {
    meta:
        app_name = "glib"
        type = "2"
        target = "signals"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signals/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_12 {
    meta:
        app_name = "nss"
        type = "2"
        target = "signtool"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signtool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nss_13 {
    meta:
        app_name = "nss"
        type = "2"
        target = "signver"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /signver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_194 {
    meta:
        app_name = "glib"
        type = "2"
        target = "simple-async-result"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /simple-async-result/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_195 {
    meta:
        app_name = "glib"
        type = "2"
        target = "simple-proxy"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /simple-proxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_196 {
    meta:
        app_name = "glib"
        type = "2"
        target = "singleton"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /singleton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_157 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "siphash_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /siphash_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_100 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "siv-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /siv-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_16 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "skill"
        pattern = "skill.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /skill.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /skill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_17 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "skill"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /skill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_3 {
    meta:
        app_name = "procps"
        type = "2"
        target = "skill.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /skill.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_18 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "slabtop"
        pattern = "slabtop.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /slabtop.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slabtop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_19 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "slabtop"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slabtop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openldap {
    meta:
        app_name = "openldap"
        type = "2"
        target = "slapd"
        pattern = "openldap-([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /openldap-([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slapd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_129 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sleep.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sleep.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_197 {
    meta:
        app_name = "glib"
        type = "2"
        target = "sleepy-stream"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sleepy-stream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_198 {
    meta:
        app_name = "glib"
        type = "2"
        target = "slice"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_199 {
    meta:
        app_name = "glib"
        type = "2"
        target = "slice-color"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slice-color/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_200 {
    meta:
        app_name = "glib"
        type = "2"
        target = "slice-concurrent"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slice-concurrent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_201 {
    meta:
        app_name = "glib"
        type = "2"
        target = "slist"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /slist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule f2fs_tools_2 {
    meta:
        app_name = "f2fs-tools"
        type = "2"
        target = "sload_f2fs"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sload_f2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_158 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sm2_internal_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sm2_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_159 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sm3_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sm3_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_160 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sm4_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sm4_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule samba {
    meta:
        app_name = "samba"
        type = "2"
        target = "smbd"
        pattern = "SAMBA_([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /SAMBA_([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /smbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_4 {
    meta:
        app_name = "procps"
        type = "2"
        target = "snice.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /snice.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_636 {
    meta:
        app_name = "strace"
        type = "2"
        target = "so_linger"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /so_linger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_637 {
    meta:
        app_name = "strace"
        type = "2"
        target = "so_peercred"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /so_peercred/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_638 {
    meta:
        app_name = "strace"
        type = "2"
        target = "so_peercred-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /so_peercred-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_639 {
    meta:
        app_name = "strace"
        type = "2"
        target = "so_peercred-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /so_peercred-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_640 {
    meta:
        app_name = "strace"
        type = "2"
        target = "so_peercred-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /so_peercred-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule socat {
    meta:
        app_name = "socat"
        type = "2"
        target = "socat"
        pattern = "socat-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /socat-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /socat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_641 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sock_filter-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sock_filter-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_642 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sock_filter-v-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sock_filter-v-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_643 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sock_filter-v-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sock_filter-v-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_644 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sock_filter-v-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sock_filter-v-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_645 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockaddr_xlat-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockaddr_xlat-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_646 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockaddr_xlat-Xabbrev-y"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockaddr_xlat-Xabbrev-y/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_647 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockaddr_xlat-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockaddr_xlat-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_648 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockaddr_xlat-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockaddr_xlat-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_44 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Socket"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Socket.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_202 {
    meta:
        app_name = "glib"
        type = "2"
        target = "socket-address"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /socket-address/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_203 {
    meta:
        app_name = "glib"
        type = "2"
        target = "socket-listener"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /socket-listener/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_204 {
    meta:
        app_name = "glib"
        type = "2"
        target = "socket-service"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /socket-service/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_19 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "socket-test"
        pattern = "wayland-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wayland-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /socket-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_649 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockopt-sol_netlink"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockopt-sol_netlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_650 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sockopt-timestamp"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sockopt-timestamp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_130 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sort.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sort.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_205 {
    meta:
        app_name = "glib"
        type = "2"
        target = "sources"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sources/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_161 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sparse_array_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sparse_array_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_206 {
    meta:
        app_name = "glib"
        type = "2"
        target = "spawn-multithreaded"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /spawn-multithreaded/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_207 {
    meta:
        app_name = "glib"
        type = "2"
        target = "spawn-path-search"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /spawn-path-search/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_208 {
    meta:
        app_name = "glib"
        type = "2"
        target = "spawn-singlethread"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /spawn-singlethread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_209 {
    meta:
        app_name = "glib"
        type = "2"
        target = "spawn-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /spawn-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule alsa_15 {
    meta:
        app_name = "alsa"
        type = "2"
        target = "speaker-test"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /speaker-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_651 {
    meta:
        app_name = "strace"
        type = "2"
        target = "splice"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /splice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_131 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "split"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /split/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_132 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "split.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /split.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_34 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "sprintf"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glibc_55 {
    meta:
        app_name = "glibc"
        type = "2"
        target = "sprof"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sprof/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule squid {
    meta:
        app_name = "squid"
        type = "2"
        target = "squid"
        pattern = "squid/([0-9]+\\.[0-9]+\\.[0-9]+)"

    strings:
        $pattern = /squid\/([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /squid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_162 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "srptest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /srptest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_210 {
    meta:
        app_name = "glib"
        type = "2"
        target = "srvtarget"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /srvtarget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_11 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "ss"
        pattern = "ss.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ss.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ss/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_6 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh"
        pattern = "ssh.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_7 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_8 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-add"
        pattern = "ssh-add.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-add.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-add/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_9 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-add"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-add/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_10 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-agent"
        pattern = "ssh-agent.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-agent.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_11 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-agent"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_12 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keygen"
        pattern = "ssh-keygen.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-keygen.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keygen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_13 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keygen"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keygen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_14 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keyscan"
        pattern = "ssh-keyscan.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-keyscan.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keyscan/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_15 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keyscan"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keyscan/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_16 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keysign"
        pattern = "ssh-keysign.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-keysign.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keysign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_17 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-keysign"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-keysign/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_18 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-pkcs11-helper"
        pattern = "ssh-pkcs11-helper.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ssh-pkcs11-helper.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-pkcs11-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_19 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh-pkcs11-helper"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh-pkcs11-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_20 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "ssh.openssh"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssh.openssh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_21 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sshd"
        pattern = "sshd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sshd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sshd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_22 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "sshd"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sshd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_163 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssl_cert_table_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssl_cert_table_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_164 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssl_ctx_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssl_ctx_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_165 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssl_old_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssl_old_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_166 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssl_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssl_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_167 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssl_test_ctx_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssl_test_ctx_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_168 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sslapitest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sslapitest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_169 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sslbuffertest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sslbuffertest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_170 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sslcorrupttest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sslcorrupttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_171 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "ssltest_old"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssltest_old/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_652 {
    meta:
        app_name = "strace"
        type = "2"
        target = "ssock_filter-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ssock_filter-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_22 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "st7586_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /st7586_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_23 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "st7735r_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /st7735r_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_108 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "stack"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stack/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_35 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "stack"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stack/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_172 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "stack_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stack_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemtap {
    meta:
        app_name = "systemtap"
        type = "2"
        target = "stap"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemtap_1 {
    meta:
        app_name = "systemtap"
        type = "2"
        target = "stapbpf"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stapbpf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemtap_2 {
    meta:
        app_name = "systemtap"
        type = "2"
        target = "stapio"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stapio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemtap_3 {
    meta:
        app_name = "systemtap"
        type = "2"
        target = "staprun"
        pattern = "commit release-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /commit release-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /staprun/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemtap_4 {
    meta:
        app_name = "systemtap"
        type = "2"
        target = "stapsh"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stapsh/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_61 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "starter"
        pattern = "starter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /starter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /starter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_62 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "starter"
        pattern = "Swan (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Swan (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /starter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_8 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "startpar"
        pattern = "startpar.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /startpar.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /startpar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_9 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "startproc"
        pattern = "startproc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /startproc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /startproc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_133 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "stat.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stat.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_653 {
    meta:
        app_name = "strace"
        type = "2"
        target = "statfs"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /statfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_654 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-all"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-all/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_655 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-failed"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-failed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_656 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-failed-long"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-failed-long/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_657 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-failed-status"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-failed-status/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_658 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-none-threads"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-none-threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_659 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-successful"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-successful/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_660 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-successful-long"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-successful-long/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_661 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-successful-status"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-successful-status/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_662 {
    meta:
        app_name = "strace"
        type = "2"
        target = "status-unfinished-threads"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /status-unfinished-threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_663 {
    meta:
        app_name = "strace"
        type = "2"
        target = "statx"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /statx/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_134 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "stdbuf"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stdbuf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_135 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "stdbuf.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stdbuf.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_36 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "stdio"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stdio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_24 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "stm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_45 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Storable"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Storable.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_664 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_665 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace--decode-pids-comm"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace--decode-pids-comm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_666 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace--strings-in-hex-all"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace--strings-in-hex-all/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_667 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace--strings-in-hex-none"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace--strings-in-hex-none/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_668 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace-n"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace-n/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_669 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace-no-x"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace-no-x/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_670 {
    meta:
        app_name = "strace"
        type = "2"
        target = "strace-Y-0123456789"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strace-Y-0123456789/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_211 {
    meta:
        app_name = "glib"
        type = "2"
        target = "stream-rw_all"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stream-rw_all/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_212 {
    meta:
        app_name = "glib"
        type = "2"
        target = "strfuncs"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strfuncs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_213 {
    meta:
        app_name = "glib"
        type = "2"
        target = "string"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /string/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_109 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "strip"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_63 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "stroke"
        pattern = "stroke.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /stroke.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stroke/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_214 {
    meta:
        app_name = "glib"
        type = "2"
        target = "strvbuilder"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /strvbuilder/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_136 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "stty.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /stty.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_221 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "su"
        pattern = "su.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /su.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /su/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_222 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "su"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /su/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_45 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "su.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /su.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_223 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "su.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /su.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_5 {
    meta:
        app_name = "sudo"
        type = "2"
        target = "sudo"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9a-z]+)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9a-z]+)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sudo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_6 {
    meta:
        app_name = "sudo"
        type = "1"
        target = "sudo_intercept"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sudo_intercept.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_7 {
    meta:
        app_name = "sudo"
        type = "1"
        target = "sudoers"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sudoers.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_8 {
    meta:
        app_name = "sudo"
        type = "2"
        target = "sudoreplay"
        pattern = "sudo-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /sudo-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sudoreplay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_224 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sulogin"
        pattern = "sulogin.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sulogin.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sulogin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_225 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sulogin"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sulogin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_226 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "sulogin.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sulogin.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_137 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sum"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_138 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sum.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sum.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_49 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "sumtool"
        pattern = "sumtool.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sumtool.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sumtool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_50 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "sumtool"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sumtool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_25 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "sun4i-drm_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sun4i-drm_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_64 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "swanctl"
        pattern = "swanctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /swanctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swanctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_65 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "swanctl"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swanctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_671 {
    meta:
        app_name = "strace"
        type = "2"
        target = "swap"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_227 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swaplabel"
        pattern = "swaplabel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /swaplabel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swaplabel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_228 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swaplabel"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swaplabel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_229 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapoff"
        pattern = "swapoff.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /swapoff.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapoff/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_230 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapoff"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapoff/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_231 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapoff.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapoff.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_232 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapon"
        pattern = "swapon.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /swapon.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_233 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapon"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_234 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "swapon.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swapon.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_37 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "switch"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /switch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_235 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "switch_root"
        pattern = "switch_root.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /switch_root.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /switch_root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_236 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "switch_root"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /switch_root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_237 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "switch_root.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /switch_root.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_26 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "swrast_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /swrast_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_46 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Symbol"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Symbol.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_672 {
    meta:
        app_name = "strace"
        type = "2"
        target = "symlinkat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /symlinkat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_139 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "sync.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sync.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_673 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sync_file_range"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sync_file_range/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_20 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "sysctl"
        pattern = "sysctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /sysctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sysctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_21 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "sysctl"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sysctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_5 {
    meta:
        app_name = "procps"
        type = "2"
        target = "sysctl.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sysctl.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_173 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "sysdefaulttest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sysdefaulttest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_674 {
    meta:
        app_name = "strace"
        type = "2"
        target = "sysinfo"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /sysinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule rpm_27 {
    meta:
        app_name = "rpm"
        type = "1"
        target = "syslog"
        pattern = "syslog.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /syslog.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /syslog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_47 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Syslog"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Syslog.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_675 {
    meta:
        app_name = "strace"
        type = "2"
        target = "syslog-success"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /syslog-success/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysklogd_1 {
    meta:
        app_name = "sysklogd"
        type = "2"
        target = "syslogd"
        pattern = "syslogd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /syslogd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /syslogd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_31 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemctl"
        pattern = "systemctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_32 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_33 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd"
        pattern = "systemd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_34 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd"
        pattern = "systemd ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /systemd ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_35 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-ac-power"
        pattern = "systemd-ac-power.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-ac-power.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-ac-power/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_36 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-ac-power"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-ac-power/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_37 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-analyze"
        pattern = "systemd-analyze.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-analyze.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-analyze/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_38 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-analyze"
        pattern = "^([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-analyze/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_39 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-ask-password"
        pattern = "systemd-ask-password.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-ask-password.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-ask-password/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_40 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-ask-password"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-ask-password/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_41 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-backlight"
        pattern = "systemd-backlight.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-backlight.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-backlight/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_42 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-backlight"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-backlight/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_43 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-binfmt"
        pattern = "systemd-binfmt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-binfmt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-binfmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_44 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-binfmt"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-binfmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_45 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-boot-check-no-failures"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-boot-check-no-failures/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_46 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cat"
        pattern = "systemd-cat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_47 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cat"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_48 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgls"
        pattern = "systemd-cgls.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cgls.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgls/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_49 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgls"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgls/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_50 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgroups-agent"
        pattern = "systemd-cgroups-agent.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cgroups-agent.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgroups-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_51 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgroups-agent"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgroups-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_52 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgtop"
        pattern = "systemd-cgtop.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cgtop.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgtop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_53 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cgtop"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cgtop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_54 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cryptsetup"
        pattern = "systemd-cryptsetup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cryptsetup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cryptsetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_55 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cryptsetup"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cryptsetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_56 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cryptsetup-generator"
        pattern = "systemd-cryptsetup-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-cryptsetup-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cryptsetup-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_57 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-cryptsetup-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-cryptsetup-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_58 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-debug-generator"
        pattern = "systemd-debug-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-debug-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-debug-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_59 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-debug-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-debug-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_60 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-delta"
        pattern = "systemd-delta.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-delta.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-delta/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_61 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-delta"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-delta/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_62 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-detect-virt"
        pattern = "systemd-detect-virt.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-detect-virt.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-detect-virt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_63 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-detect-virt"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-detect-virt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_64 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-dissect"
        pattern = "systemd-dissect.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-dissect.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-dissect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_65 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-dissect"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-dissect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_66 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-escape"
        pattern = "systemd-escape.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-escape.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-escape/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_67 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-escape"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-escape/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_68 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-export"
        pattern = "systemd-export.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-export.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-export/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_69 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-export"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-export/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_70 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-firstboot"
        pattern = "systemd-firstboot.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-firstboot.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-firstboot/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_71 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-firstboot"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-firstboot/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_72 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-fsck"
        pattern = "systemd-fsck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-fsck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_73 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-fsck"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-fsck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_74 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-fstab-generator"
        pattern = "systemd-fstab-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-fstab-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-fstab-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_75 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-fstab-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-fstab-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_76 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-getty-generator"
        pattern = "systemd-getty-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-getty-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-getty-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_77 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-getty-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-getty-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_78 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-gpt-auto-generator"
        pattern = "systemd-gpt-auto-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-gpt-auto-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-gpt-auto-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_79 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-gpt-auto-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-gpt-auto-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_80 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-growfs"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-growfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_81 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hibernate-resume"
        pattern = "systemd-hibernate-resume.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-hibernate-resume.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hibernate-resume/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_82 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hibernate-resume"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hibernate-resume/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_83 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hibernate-resume-generator"
        pattern = "systemd-hibernate-resume-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-hibernate-resume-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hibernate-resume-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_84 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hibernate-resume-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hibernate-resume-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_85 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hostnamed"
        pattern = "systemd-hostnamed.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-hostnamed.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hostnamed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_86 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hostnamed"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hostnamed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_87 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hwdb"
        pattern = "systemd-hwdb.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-hwdb.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hwdb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_88 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hwdb"
        pattern = "systemd ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /systemd ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hwdb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_89 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-hwdb"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-hwdb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_90 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-id128"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-id128/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_91 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-inhibit"
        pattern = "systemd-inhibit.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-inhibit.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-inhibit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_92 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-inhibit"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-inhibit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_93 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-initctl"
        pattern = "systemd-initctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-initctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-initctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_94 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-initctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-initctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_95 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-insserv-generator"
        pattern = "systemd-insserv-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-insserv-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-insserv-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_96 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-insserv-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-insserv-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_97 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-journald"
        pattern = "systemd-journald.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-journald.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-journald/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_98 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-journald"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-journald/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_99 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-localed"
        pattern = "systemd-localed.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-localed.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-localed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_100 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-localed"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-localed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_101 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-logind"
        pattern = "systemd-logind.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-logind.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-logind/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_102 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-logind"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-logind/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_103 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-machine-id-setup"
        pattern = "systemd-machine-id-setup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-machine-id-setup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-machine-id-setup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_104 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-machine-id-setup"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-machine-id-setup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_105 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-machined"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-machined/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_106 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-makefs"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-makefs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_107 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-modules-load"
        pattern = "systemd-modules-load.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-modules-load.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-modules-load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_108 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-modules-load"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-modules-load/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_109 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-mount"
        pattern = "systemd-mount.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-mount.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_110 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-mount"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-mount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_111 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-networkd"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-networkd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_112 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-networkd-wait-online"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-networkd-wait-online/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_113 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-notify"
        pattern = "systemd-notify.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-notify.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-notify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_114 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-notify"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-notify/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_115 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-nspawn"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-nspawn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_116 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-path"
        pattern = "systemd-path.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-path.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_117 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-path"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_118 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-quotacheck"
        pattern = "systemd-quotacheck.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-quotacheck.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-quotacheck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_119 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-quotacheck"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-quotacheck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_120 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-random-seed"
        pattern = "systemd-random-seed.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-random-seed.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-random-seed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_121 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-random-seed"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-random-seed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_122 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-rc-local-generator"
        pattern = "systemd-rc-local-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-rc-local-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-rc-local-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_123 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-rc-local-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-rc-local-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_124 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-remount-fs"
        pattern = "systemd-remount-fs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-remount-fs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-remount-fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_125 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-remount-fs"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-remount-fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_126 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-reply-password"
        pattern = "systemd-reply-password.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-reply-password.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-reply-password/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_127 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-reply-password"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-reply-password/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_128 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-resolved"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-resolved/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_129 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-rfkill"
        pattern = "systemd-rfkill.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-rfkill.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-rfkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_130 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-rfkill"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-rfkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_131 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-run"
        pattern = "systemd-run.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-run.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-run/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_132 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-run"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-run/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_133 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-run-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-run-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_134 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-shutdown"
        pattern = "systemd-shutdown.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-shutdown.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-shutdown/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_135 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-shutdown"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-shutdown/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_136 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sleep"
        pattern = "systemd-sleep.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-sleep.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_137 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sleep"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_138 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-socket-activate"
        pattern = "systemd-socket-activate.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-socket-activate.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-socket-activate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_139 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-socket-activate"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-socket-activate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_140 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-socket-proxyd"
        pattern = "systemd-socket-proxyd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-socket-proxyd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-socket-proxyd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_141 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-socket-proxyd"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-socket-proxyd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_142 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-stdio-bridge"
        pattern = "systemd-stdio-bridge.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-stdio-bridge.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-stdio-bridge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_143 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-stdio-bridge"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-stdio-bridge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_144 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sulogin-shell"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sulogin-shell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_145 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysctl"
        pattern = "systemd-sysctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-sysctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_146 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysctl"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_147 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-system-update-generator"
        pattern = "systemd-system-update-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-system-update-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-system-update-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_148 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-system-update-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-system-update-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_149 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysusers"
        pattern = "systemd-sysusers.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-sysusers.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysusers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_150 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysusers"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysusers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_151 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysv-generator"
        pattern = "systemd-sysv-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-sysv-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysv-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_152 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-sysv-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-sysv-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_153 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-timedated"
        pattern = "systemd-timedated.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-timedated.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-timedated/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_154 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-timedated"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-timedated/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_155 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-timesyncd"
        pattern = "systemd-timesyncd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-timesyncd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-timesyncd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_156 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-timesyncd"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-timesyncd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_157 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-tmpfiles"
        pattern = "systemd-tmpfiles.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-tmpfiles.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-tmpfiles/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_158 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-tmpfiles"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-tmpfiles/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_159 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-tty-ask-password-agent"
        pattern = "systemd-tty-ask-password-agent.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-tty-ask-password-agent.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-tty-ask-password-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_160 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-tty-ask-password-agent"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-tty-ask-password-agent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_161 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-udevd"
        pattern = "systemd-udevd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-udevd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-udevd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_162 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-udevd"
        pattern = "[Ss]tarting version ([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /[Ss]tarting version ([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-udevd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_163 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-update-done"
        pattern = "systemd-update-done.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-update-done.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-update-done/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_164 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-update-done"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-update-done/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_165 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-update-utmp"
        pattern = "systemd-update-utmp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-update-utmp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-update-utmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_166 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-update-utmp"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-update-utmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_167 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-user-runtime-dir"
        pattern = "systemd-user-runtime-dir.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-user-runtime-dir.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-user-runtime-dir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_168 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-user-runtime-dir"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-user-runtime-dir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_169 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-user-sessions"
        pattern = "systemd-user-sessions.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-user-sessions.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-user-sessions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_170 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-user-sessions"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-user-sessions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_171 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-vconsole-setup"
        pattern = "systemd-vconsole-setup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-vconsole-setup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-vconsole-setup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_172 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-vconsole-setup"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-vconsole-setup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_173 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-veritysetup"
        pattern = "systemd-veritysetup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-veritysetup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-veritysetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_174 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-veritysetup"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-veritysetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_175 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-veritysetup-generator"
        pattern = "systemd-veritysetup-generator.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-veritysetup-generator.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-veritysetup-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_176 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-veritysetup-generator"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-veritysetup-generator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_177 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-volatile-root"
        pattern = "systemd-volatile-root.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /systemd-volatile-root.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-volatile-root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_178 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "systemd-volatile-root"
        pattern = "libsystemd-shared-([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /libsystemd-shared-([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /systemd-volatile-root/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".dynstr") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_48 {
    meta:
        app_name = "perl"
        type = "1"
        target = "SysV"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /SysV.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_17 {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "tabs"
        pattern = "tabs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tabs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tabs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_140 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tac"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tac/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_141 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tac.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tac.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_142 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tail"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tail/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_143 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tail.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tail.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysstat_7 {
    meta:
        app_name = "sysstat"
        type = "2"
        target = "tapestat"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tapestat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tar {
    meta:
        app_name = "tar"
        type = "2"
        target = "tar"
        pattern = "tar \\(GNU tar\\) ([0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /tar \(GNU tar\) ([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tar_1 {
    meta:
        app_name = "tar"
        type = "2"
        target = "tar.tar"
        pattern = "tar-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /tar-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tar.tar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_215 {
    meta:
        app_name = "glib"
        type = "2"
        target = "task"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /task/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_238 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "taskset"
        pattern = "taskset.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /taskset.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /taskset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_239 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "taskset"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /taskset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_240 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "taskset.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /taskset.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_12 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "tc"
        pattern = "tc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tcpdump {
    meta:
        app_name = "tcpdump"
        type = "2"
        target = "tcpdump"
        pattern = "^([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tcpdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule tcpdump_1 {
    meta:
        app_name = "tcpdump"
        type = "2"
        target = "tcpdump"
        pattern = "([0134]\\.[0-9]{1,2}\\.[0-9])"

    strings:
        $pattern = /([0134]\.[0-9]{1,2}\.[0-9])/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tcpdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_144 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tee.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tee.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_29 {
    meta:
        app_name = "python"
        type = "1"
        target = "termios.cpython-38-aarch64-linux-gnu"
        pattern = "(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /termios.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_1 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-accept"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-accept/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_2 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-access"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-access/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_22 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-apparmor-activation"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-apparmor-activation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_3 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-array_list"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-array_list/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_4 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-array_oset"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-array_oset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_23 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-assertions"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-assertions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_24 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-atomic"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-atomic/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_19 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-avctp"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-avctp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_20 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-avdtp"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-avdtp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_5 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-avltree_oset"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-avltree_oset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_21 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-avrcp"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-avrcp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_6 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-binary-io"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-binary-io/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_7 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-bind"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-bind/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_5 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-break"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-break/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_8 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-btowc"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-btowc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_25 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-bus"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-bus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_26 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-bus-launch-helper"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-bus-launch-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_27 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-bus-system"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-bus-system/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_9 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-c-ctype"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-c-ctype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_10 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-c-strcasecmp"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-c-strcasecmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_11 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-c-strncasecmp"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-c-strncasecmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_12 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-calloc-gnu"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-calloc-gnu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_13 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-canonicalize"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-canonicalize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_14 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-chdir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-chdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_15 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-cloexec"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-cloexec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_16 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-close"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-close/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_17 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-connect"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-connect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_28 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-containers"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-containers/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_29 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-corrupt"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-corrupt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_6 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-coverage"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-coverage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_22 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-crc"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-crc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_18 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-creat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-creat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_23 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-crypto"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-crypto/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_30 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-dbus"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dbus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_31 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-dbus-daemon"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dbus-daemon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_32 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-dbus-daemon-eavesdrop"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dbus-daemon-eavesdrop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_33 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-desktop-file"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-desktop-file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_19 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-dup"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_20 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-dup-safer"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dup-safer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_21 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-dup2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-dup2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_24 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-ecc"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ecc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_25 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-eir"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-eir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_7 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-ellipsize"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ellipsize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_22 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fchdir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fchdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_23 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fclose"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fclose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_24 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fcntl"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fcntl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_25 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fdopen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fdopen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_26 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fdopendir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fdopendir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_34 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-fdpass"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fdpass/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_27 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fflush"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fflush/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_28 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fflush2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fflush2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_29 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fgetc"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fgetc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_30 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-float"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-float/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_8 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-font"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-font/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_31 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fopen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fopen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_32 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fopen-safer"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fopen-safer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_33 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fpending"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fpending/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_34 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fpurge"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fpurge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_35 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fputc"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fputc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_36 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fread"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_37 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-freadahead"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-freadahead/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_38 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-freading"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-freading/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_39 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-freopen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-freopen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_40 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-frexpl-nolibm"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-frexpl-nolibm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_41 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fseek"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fseek/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_42 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fseeko"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fseeko/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_43 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fseeko3"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fseeko3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_44 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fseeko4"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fseeko4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_45 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fstat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_46 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fstatat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fstatat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_47 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftell"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_48 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftell3"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftell3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_49 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftelld"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftelld/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_50 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftello"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftello/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_51 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftello3"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftello3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_52 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftello4"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftello4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_53 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ftruncate"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ftruncate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_54 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-fwrite"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-fwrite/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_26 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gatt"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gatt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_27 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gattrib"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gattrib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_28 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gdbus-client"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gdbus-client/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_55 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-getcwd-lgpl"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-getcwd-lgpl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_56 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-getdtablesize"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-getdtablesize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_57 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-getopt-gnu"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-getopt-gnu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_58 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-getopt-posix"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-getopt-posix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_59 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-getprogname"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-getprogname/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_29 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gobex"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gobex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_30 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gobex-apparam"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gobex-apparam/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_31 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gobex-header"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gobex-header/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_32 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gobex-packet"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gobex-packet/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_33 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-gobex-transfer"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-gobex-transfer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_9 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-harfbuzz"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-harfbuzz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_35 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-header-fields"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-header-fields/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_34 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-hfp"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-hfp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_35 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-hog"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-hog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_60 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-iconv"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-iconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_61 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-inet_pton"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-inet_pton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_62 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-inttostr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-inttostr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_63 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-ioctl"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ioctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_64 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-isblank"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-isblank/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_65 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-isnand-nolibm"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-isnand-nolibm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_66 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-isnanf-nolibm"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-isnanf-nolibm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_67 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-isnanl-nolibm"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-isnanl-nolibm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_68 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-iswblank"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-iswblank/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_69 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-iswdigit"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-iswdigit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_70 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-iswxdigit"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-iswxdigit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_10 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-itemize"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-itemize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_11 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-layout"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-layout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_36 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-lib"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-lib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_71 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-link"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-link/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_72 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-linked_list"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-linked_list/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_73 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-linkedhash_list"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-linkedhash_list/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_74 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-listen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-listen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_75 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-localeconv"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-localeconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_76 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-localename"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-localename/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_36 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-loopback"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-loopback/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_77 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-lseek"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-lseek/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_78 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-lstat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-lstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_79 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-malloc-gnu"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-malloc-gnu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_37 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-marshal"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-marshal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_80 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-math"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-math/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_81 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-mbsinit"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mbsinit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_82 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-mbsstr1"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mbsstr1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_83 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-mbsstr2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mbsstr2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_84 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-mbsstr3"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mbsstr3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_85 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-memchr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-memchr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_86 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-memchr2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-memchr2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_87 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-memrchr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-memrchr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_38 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-message"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-message/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_37 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-mgmt"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mgmt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_39 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-misc-internals"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-misc-internals/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_88 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-mkdir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-mkdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_40 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-monitor"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-monitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_41 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-names"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-names/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_89 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-nanosleep"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-nanosleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_90 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-nl_langinfo"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-nl_langinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_91 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-open"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-open/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_92 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-openat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-openat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_12 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-ot-tags"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ot-tags/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_13 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-pangocairo-threads"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-pangocairo-threads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_93 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-perror2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-perror2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_94 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-pipe"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-pipe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_95 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-pipe2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-pipe2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_96 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-posix_spawn_file_actions_addchdir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-posix_spawn_file_actions_addchdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_97 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-posix_spawn_file_actions_addclose"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-posix_spawn_file_actions_addclose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_98 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-posix_spawn_file_actions_adddup2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-posix_spawn_file_actions_adddup2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_99 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-posix_spawn_file_actions_addopen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-posix_spawn_file_actions_addopen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_100 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-printf-frexp"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-printf-frexp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_101 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-printf-frexpl"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-printf-frexpl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_102 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-pthread-thread"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-pthread-thread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_103 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-pthread_sigmask1"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-pthread_sigmask1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_38 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-queue"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-queue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_104 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-quotearg-simple"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-quotearg-simple/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_105 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-raise"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-raise/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_106 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-rawmemchr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-rawmemchr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_107 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-read-file"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-read-file/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_108 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-readlink"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-readlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_109 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-realloc-gnu"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-realloc-gnu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_110 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-reallocarray"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-reallocarray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_42 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-refs"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-refs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_43 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-relay"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-relay/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_111 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-rename"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-rename/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_39 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-ringbuf"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-ringbuf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_112 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-rmdir"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-rmdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_113 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-scratch-buffer"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-scratch-buffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_44 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-sd-activation"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sd-activation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_40 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-sdp"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sdp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_114 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-select"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-select/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_115 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-select-stdin"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-select-stdin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_45 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-server-oom"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-server-oom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_46 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-service"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-service/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_116 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-setenv"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-setenv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_117 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-setlocale1"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-setlocale1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_118 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-setsockopt"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-setsockopt/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_14 {
    meta:
        app_name = "pango"
        type = "2"
        target = "test-shape"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-shape/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_47 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-shell"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-shell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_119 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-sigaction"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sigaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_120 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-signbit"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-signbit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_121 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-sigprocmask"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sigprocmask/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_122 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-sleep"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_123 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-snprintf"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-snprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_124 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-spawn-pipe-child"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-spawn-pipe-child/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_125 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-spawn-pipe-main"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-spawn-pipe-main/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_126 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-stat"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-stat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_127 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-stat-time"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-stat-time/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_128 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strchrnul"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strchrnul/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_129 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strerror"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strerror/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_130 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strerror_r"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strerror_r/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_131 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-striconv"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-striconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_132 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strnlen"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strnlen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_133 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strsignal"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strsignal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_134 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strstr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strstr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_135 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strtod"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strtod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_136 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-strtod1"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-strtod1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_137 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-symlink"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-symlink/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_48 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-syntax"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-syntax/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_49 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-sysdeps"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-sysdeps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_50 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-syslog"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-syslog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_41 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-textfile"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-textfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_138 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-u8-mbtoucr"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-u8-mbtoucr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_139 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-u8-uctomb"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-u8-uctomb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_140 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-uc_width"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-uc_width/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_141 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-uc_width2"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-uc_width2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_42 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-uhid"
        pattern = "bluez-([0-9]+\\.[0-9]+)"

    strings:
        $pattern = /bluez-([0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-uhid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_51 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-uid-permissions"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-uid-permissions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_142 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-unsetenv"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-unsetenv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule bluez_43 {
    meta:
        app_name = "bluez"
        type = "2"
        target = "test-uuid"
        pattern = "bluez-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /bluez-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-uuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule dbus_52 {
    meta:
        app_name = "dbus"
        type = "2"
        target = "test-variant"
        pattern = "dbus-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /dbus-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-variant/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_143 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-vasnprintf"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-vasnprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_144 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-vasprintf"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-vasprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_145 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-vasprintf-posix"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-vasprintf-posix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_146 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-wcrtomb"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-wcrtomb/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_147 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-wctype-h"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-wctype-h/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_148 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-wcwidth"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-wcwidth/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_149 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-write"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule m4_150 {
    meta:
        app_name = "m4"
        type = "2"
        target = "test-xvasprintf"
        pattern = "m4-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /m4-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test-xvasprintf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_241 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_cal"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_cal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_242 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_colors"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_colors/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_20 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_directory_handle"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_directory_handle/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_243 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_dmesg"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_dmesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_244 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_ismounted"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_ismounted/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssh_23 {
    meta:
        app_name = "openssh"
        type = "2"
        target = "test_kex"
        pattern = "OpenSSH_(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /OpenSSH_(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_kex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_245 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_logger"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_logger/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_246 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_logindefs"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_logindefs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_247 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_more"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_more/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_21 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_notification"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_notification/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_248 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_path"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_249 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_pty"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_pty/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_250 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_script"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_script/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_22 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_session"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_session/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_23 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_string_utils"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_string_utils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_251 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_sysfs"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_sysfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_174 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "test_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_252 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "test_timeutils"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_timeutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_24 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_uri"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_uri/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_25 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_ust_data"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_ust_data/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_26 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_utils_compat_poll"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_utils_compat_poll/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_27 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_utils_expand_path"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_utils_expand_path/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_28 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_utils_parse_size_suffix"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_utils_parse_size_suffix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_29 {
    meta:
        app_name = "ust"
        type = "2"
        target = "test_utils_parse_time_suffix"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /test_utils_parse_time_suffix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_15 {
    meta:
        app_name = "pango"
        type = "2"
        target = "testattributes"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testattributes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_16 {
    meta:
        app_name = "pango"
        type = "2"
        target = "testboundaries_ucd"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testboundaries_ucd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_17 {
    meta:
        app_name = "pango"
        type = "2"
        target = "testcolor"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testcolor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_38 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "testfile"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_216 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testfilemonitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testfilemonitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_217 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testgdate"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testgdate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_218 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testglib"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testglib/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_219 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testgobject"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testgobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_220 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testing"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testing/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_221 {
    meta:
        app_name = "glib"
        type = "2"
        target = "testing-helper"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testing-helper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_18 {
    meta:
        app_name = "pango"
        type = "2"
        target = "testiter"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testiter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pango_19 {
    meta:
        app_name = "pango"
        type = "2"
        target = "testscript"
        pattern = "pango-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /pango-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /testscript/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_676 {
    meta:
        app_name = "strace"
        type = "2"
        target = "tgkill"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tgkill/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_677 {
    meta:
        app_name = "strace"
        type = "2"
        target = "tgkill--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tgkill--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_222 {
    meta:
        app_name = "glib"
        type = "2"
        target = "thread"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /thread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_223 {
    meta:
        app_name = "glib"
        type = "2"
        target = "thread-pool"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /thread-pool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_224 {
    meta:
        app_name = "glib"
        type = "2"
        target = "thread-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /thread-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_225 {
    meta:
        app_name = "glib"
        type = "2"
        target = "threadpool-test"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threadpool-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_49 {
    meta:
        app_name = "perl"
        type = "1"
        target = "threads"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threads.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_678 {
    meta:
        app_name = "strace"
        type = "2"
        target = "threads-execve"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threads-execve/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_679 {
    meta:
        app_name = "strace"
        type = "2"
        target = "threads-execve-q"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threads-execve-q/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_680 {
    meta:
        app_name = "strace"
        type = "2"
        target = "threads-execve-qqq"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threads-execve-qqq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_175 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "threadstest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threadstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_176 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "threadstest_fips"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threadstest_fips/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_226 {
    meta:
        app_name = "glib"
        type = "2"
        target = "threadtests"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /threadtests/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_227 {
    meta:
        app_name = "glib"
        type = "2"
        target = "thumbnail-verification"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /thumbnail-verification/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_177 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "time_offset_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /time_offset_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_179 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "timedatectl"
        pattern = "timedatectl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /timedatectl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timedatectl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_145 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "timeout.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timeout.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_228 {
    meta:
        app_name = "glib"
        type = "2"
        target = "timer"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_681 {
    meta:
        app_name = "strace"
        type = "2"
        target = "timer_create"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timer_create/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_682 {
    meta:
        app_name = "strace"
        type = "2"
        target = "timer_xettime"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timer_xettime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_683 {
    meta:
        app_name = "strace"
        type = "2"
        target = "timerfd_xettime"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /timerfd_xettime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_684 {
    meta:
        app_name = "strace"
        type = "2"
        target = "times"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /times/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_685 {
    meta:
        app_name = "strace"
        type = "2"
        target = "times-fail"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /times-fail/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_686 {
    meta:
        app_name = "strace"
        type = "2"
        target = "times-Xraw"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /times-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iproute2_13 {
    meta:
        app_name = "iproute2"
        type = "2"
        target = "tipc"
        pattern = "tipc.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tipc.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tipc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_22 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "tload"
        pattern = "tload.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tload.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tload/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_6 {
    meta:
        app_name = "procps"
        type = "2"
        target = "tload"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tload/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_229 {
    meta:
        app_name = "glib"
        type = "2"
        target = "tls-bindings"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls-bindings/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_230 {
    meta:
        app_name = "glib"
        type = "2"
        target = "tls-certificate"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls-certificate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_231 {
    meta:
        app_name = "glib"
        type = "2"
        target = "tls-database"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls-database/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_232 {
    meta:
        app_name = "glib"
        type = "2"
        target = "tls-interaction"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls-interaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_178 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "tls13ccstest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls13ccstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_179 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "tls13encryptiontest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls13encryptiontest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_180 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "tls13secretstest"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tls13secretstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_18 {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "toe"
        pattern = "toe.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /toe.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /toe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libselinux_16 {
    meta:
        app_name = "libselinux"
        type = "2"
        target = "togglesebool"
        pattern = "togglesebool.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /togglesebool.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /togglesebool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gstreamer_323 {
    meta:
        app_name = "gstreamer"
        type = "2"
        target = "tools_gstinspect"
        pattern = "gstreamer-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gstreamer-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tools_gstinspect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_23 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "top"
        pattern = "top.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /top.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /top/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_24 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "top"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /top/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_25 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "top.procps"
        pattern = "procps-ng (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /procps-ng (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /top.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_146 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "touch.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /touch.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_39 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "tpd"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_19 {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "tput"
        pattern = "tput.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tput.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tput/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_147 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tr.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tr.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_687 {
    meta:
        app_name = "strace"
        type = "2"
        target = "tracer_ppid_pgid_sid"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tracer_ppid_pgid_sid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_233 {
    meta:
        app_name = "glib"
        type = "2"
        target = "trash"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /trash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_148 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "true.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /true.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_688 {
    meta:
        app_name = "strace"
        type = "2"
        target = "truncate"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /truncate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_149 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "truncate"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /truncate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_150 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "truncate.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /truncate.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ncurses_20 {
    meta:
        app_name = "ncurses"
        type = "2"
        target = "tset"
        pattern = "tset.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tset.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_151 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tsort"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tsort/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_152 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tsort.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tsort.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_11 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_collections"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_collections/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_16 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_containerapisymmetry"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_containerapisymmetry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_17 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_deleteLater"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_deleteLater/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_18 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_deleteLater_noApp"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_deleteLater_noApp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_19 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_gestures"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_gestures/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_20 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_initmain"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_initmain/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_21 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_json"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_json/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_22 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_lancelot"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_lancelot/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_23 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_languagechange"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_languagechange/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_24 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_largefile"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_largefile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_12 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_networkselftest"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_networkselftest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_25 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_q_func_info"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_q_func_info/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_26 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractanimation"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractanimation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_27 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractbutton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractbutton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_28 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractitemmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractitemmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_29 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractitemview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractitemview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_30 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractnetworkcache"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractnetworkcache/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_31 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractprintdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractprintdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_32 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractproxymodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractproxymodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_33 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractscrollarea"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractscrollarea/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_13 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qabstractslider"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractslider/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_34 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstractsocket"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstractsocket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_35 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qabstracttextdocumentlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qabstracttextdocumentlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_36 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qaccessibility"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qaccessibility/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_37 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qaction"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_38 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qactiongroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qactiongroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_39 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qalgorithms"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qalgorithms/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_40 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qanimationgroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qanimationgroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_41 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qapplication"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qapplication/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_42 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qarraydata"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qarraydata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_43 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qarraydata_strictiterators"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qarraydata_strictiterators/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_44 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicint"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_45 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_char"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_char/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_46 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_char16_t"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_char16_t/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_47 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_char32_t"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_char32_t/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_14 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qatomicinteger_int"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_int/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_48 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_long"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_long/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_49 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_qptrdiff"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_qptrdiff/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_50 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_quintptr"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_quintptr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_51 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_schar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_schar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_52 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_short"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_short/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_53 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_uchar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_uchar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_15 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qatomicinteger_uint"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_uint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_54 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_ulong"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_ulong/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_16 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qatomicinteger_ushort"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_ushort/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_55 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicinteger_wchar_t"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicinteger_wchar_t/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_56 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qatomicpointer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qatomicpointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_57 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbackingstore"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbackingstore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_58 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbitarray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbitarray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_17 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qboxlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qboxlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_59 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbrush"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbrush/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_60 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbuffer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbuffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_61 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbuttongroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbuttongroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_62 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbytearray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbytearray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_63 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbytearraylist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbytearraylist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_64 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbytearraymatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbytearraymatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_65 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qbytedatabuffer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qbytedatabuffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_66 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcache"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcache/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_67 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcalendar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcalendar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_68 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcalendarwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcalendarwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_69 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcborstreamreader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcborstreamreader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_70 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcborstreamwriter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcborstreamwriter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_71 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcborvalue"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcborvalue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_72 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcborvalue_json"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcborvalue_json/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_73 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qchar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qchar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_74 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcheckbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcheckbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_75 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qclipboard"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qclipboard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_76 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcollator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcollator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_77 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcolor"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcolor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_78 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcolordialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcolordialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_79 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcolorspace"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcolorspace/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_80 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcommandlineparser"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcommandlineparser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_81 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcommandlinkbutton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcommandlinkbutton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_82 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcompleter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcompleter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_83 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcomplextext"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcomplextext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_84 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qconcatenatetablesproxymodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qconcatenatetablesproxymodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_85 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcontiguouscache"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcontiguouscache/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_86 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qcryptographichash"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcryptographichash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_18 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qcursor"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qcursor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_87 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdatastream"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdatastream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_88 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdatastream_core_pixmap"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdatastream_core_pixmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_89 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdataurl"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdataurl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_90 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdatawidgetmapper"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdatawidgetmapper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_91 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdate"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_19 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdatetime"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdatetime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_92 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdatetimeedit"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdatetimeedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_93 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusabstractadaptor"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusabstractadaptor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_94 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusabstractinterface"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusabstractinterface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_95 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusconnection"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_96 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusconnection_delayed"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection_delayed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_20 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdbusconnection_no_app"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection_no_app/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_97 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusconnection_no_bus"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection_no_bus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_98 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusconnection_no_libdbus"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection_no_libdbus/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_21 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdbusconnection_spyhook"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusconnection_spyhook/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_22 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdbuscontext"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbuscontext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_99 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusinterface"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusinterface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_100 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbuslocalcalls"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbuslocalcalls/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_101 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusmetaobject"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusmetaobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_23 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdbusmetatype"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusmetatype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_102 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbuspendingcall"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbuspendingcall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_103 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbuspendingreply"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbuspendingreply/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_104 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusreply"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusreply/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_105 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusservicewatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusservicewatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_24 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdbusthreading"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusthreading/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_106 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbustype"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbustype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_107 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdbusxmlparser"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdbusxmlparser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_108 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdeadlinetimer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdeadlinetimer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_109 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdebug"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdebug/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_110 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdesktopservices"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdesktopservices/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_111 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdesktopwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdesktopwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_112 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdial"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdial/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_113 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_114 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdialogbuttonbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdialogbuttonbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_115 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdir"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_25 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdiriterator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdiriterator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_116 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdirmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdirmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_26 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qdnslookup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdnslookup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_117 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdnslookup_appless"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdnslookup_appless/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_118 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdockwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdockwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_119 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdom"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_120 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdoublespinbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdoublespinbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_121 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdoublevalidator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdoublevalidator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_122 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qdrag"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qdrag/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_123 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qeasingcurve"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qeasingcurve/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_124 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qelapsedtimer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qelapsedtimer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_125 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qerrormessage"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qerrormessage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_27 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_126 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qeventdispatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qeventdispatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_127 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qeventloop"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qeventloop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_128 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qexplicitlyshareddatapointer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qexplicitlyshareddatapointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_129 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfactoryloader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfactoryloader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_130 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfile"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_131 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfiledialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfiledialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_132 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfiledialog2"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfiledialog2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_133 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfileiconprovider"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfileiconprovider/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_134 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfileopenevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfileopenevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_135 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfileselectors"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfileselectors/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_136 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfilesystementry"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfilesystementry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_137 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfilesystemmetadata"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfilesystemmetadata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_138 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfilesystemmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfilesystemmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_139 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfilesystemwatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfilesystemwatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_28 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qflags"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qflags/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_140 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfloat16"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfloat16/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_141 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfocusevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfocusevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_142 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfocusframe"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfocusframe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_29 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qfont"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfont/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_143 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfontcombobox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfontcombobox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_144 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfontdatabase"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfontdatabase/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_145 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfontdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfontdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_30 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qfontmetrics"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfontmetrics/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_146 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qformlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qformlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_147 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qframe"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qframe/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_31 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qfreelist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfreelist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_148 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfuture"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfuture/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_149 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfuturesynchronizer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfuturesynchronizer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_150 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qfuturewatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qfuturewatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_151 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgesturerecognizer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgesturerecognizer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_152 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgetputenv"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgetputenv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_32 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qgl"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_153 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglbuffer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglbuffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_154 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglfunctions"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglfunctions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_155 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglobal"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglobal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_156 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglobalstatic"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglobalstatic/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_157 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglthreads"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglthreads/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_158 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qglyphrun"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qglyphrun/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_33 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qgraphicseffect"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicseffect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_159 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicseffectsource"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicseffectsource/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_160 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicsgridlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicsgridlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_34 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qgraphicsitemanimation"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicsitemanimation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_161 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicslayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicslayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_162 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicslayoutitem"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicslayoutitem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_163 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicslinearlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicslinearlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_164 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicsobject"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicsobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_165 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicspixmapitem"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicspixmapitem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_166 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicspolygonitem"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicspolygonitem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_167 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgraphicstransform"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicstransform/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_35 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qgraphicsview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgraphicsview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_168 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgridlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgridlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_169 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qgroupbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qgroupbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_170 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qguieventdispatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qguieventdispatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_171 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qguieventloop"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qguieventloop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_36 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qguimetatype"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qguimetatype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_172 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qguitimer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qguitimer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_37 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qguivariant"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qguivariant/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_173 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qhash"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhash/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_174 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qhash_strictiterators"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhash_strictiterators/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_38 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qhashfunctions"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhashfunctions/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_175 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qheaderview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qheaderview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_176 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qhighdpiscaling"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhighdpiscaling/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_177 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qhooks"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhooks/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_178 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qhostaddress"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qhostaddress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_179 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qicoimageformat"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qicoimageformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_180 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qicon"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qicon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_181 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qiconhighdpi"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qiconhighdpi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_182 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qidentityproxymodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qidentityproxymodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_183 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qimage"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qimage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_184 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qimageiohandler"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qimageiohandler/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_185 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qimagereader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qimagereader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_186 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qimagewriter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qimagewriter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_187 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qinputcontrol"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qinputcontrol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_39 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qinputdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qinputdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_188 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qinputmethod"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qinputmethod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_189 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qintvalidator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qintvalidator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_40 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qiodevice"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qiodevice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_190 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qitemdelegate"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qitemdelegate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_191 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qitemeditorfactory"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qitemeditorfactory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_192 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qitemmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qitemmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_193 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qitemselectionmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qitemselectionmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_41 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qitemview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qitemview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_194 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qkeyevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qkeyevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_195 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qkeysequence"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qkeysequence/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_42 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qkeysequenceedit"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qkeysequenceedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_43 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qlabel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlabel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_44 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qlatin1string"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlatin1string/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_196 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_197 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlcdnumber"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlcdnumber/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_198 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlibrary"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlibrary/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_199 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qline"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_200 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlineedit"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlineedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_201 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlinkedlist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlinkedlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_202 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_203 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlist_strictiterators"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlist_strictiterators/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_204 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlistview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlistview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_205 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlocale"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlocale/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_45 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qlocalsocket"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlocalsocket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_206 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlockfile"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlockfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_207 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qlogging"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qlogging/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_208 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qloggingcategory"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qloggingcategory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_209 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmakearray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmakearray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_210 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmap"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_211 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmap_strictiterators"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmap_strictiterators/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_46 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qmargins"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmargins/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_212 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmath"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmath/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_213 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmatrixnxn"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmatrixnxn/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_214 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmdiarea"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmdiarea/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_47 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qmdisubwindow"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmdisubwindow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_215 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmenu"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmenu/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_48 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qmenubar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmenubar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_216 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmessageauthenticationcode"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmessageauthenticationcode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_217 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmessagebox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmessagebox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_218 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetaenum"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetaenum/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_219 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetamethod"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetamethod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_220 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetaobject"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetaobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_221 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetaobjectbuilder"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetaobjectbuilder/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_222 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetaproperty"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetaproperty/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_223 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmetatype"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmetatype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_49 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qmimedata"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmimedata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_50 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qmouseevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmouseevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_224 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmouseevent_modal"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmouseevent_modal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_225 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmovie"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmovie/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_226 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmutex"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmutex/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_227 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qmutexlocker"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qmutexlocker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_228 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkaccessmanager"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkaccessmanager/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_229 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkaccessmanager_and_qprogressdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkaccessmanager_and_qprogressdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_230 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkaddressentry"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkaddressentry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_231 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkcachemetadata"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkcachemetadata/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_232 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkconfiguration"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkconfiguration/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_233 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkconfigurationmanager"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkconfigurationmanager/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_234 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkconfigurationmanagerqappless"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkconfigurationmanagerqappless/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_235 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkcookie"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkcookie/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_51 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qnetworkcookiejar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkcookiejar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_236 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkdatagram"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkdatagram/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_52 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qnetworkdiskcache"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkdiskcache/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_237 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkinterface"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkinterface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_238 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkproxy"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkproxy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_239 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkproxyfactory"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkproxyfactory/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_240 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkreply"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkreply/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_241 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnetworkrequest"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworkrequest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_53 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qnetworksession"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnetworksession/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_242 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnodebug"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnodebug/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_243 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qnumeric"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qnumeric/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_244 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qobject"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_245 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qoffsetstringarray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qoffsetstringarray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_246 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qopengl"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qopengl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_247 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qopenglconfig"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qopenglconfig/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_248 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qopenglwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qopenglwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_249 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qopenglwindow"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qopenglwindow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_250 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpagelayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpagelayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_251 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpagesize"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpagesize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_252 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpaintengine"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpaintengine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_54 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qpainter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpainter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_253 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpainterpath"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpainterpath/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_254 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpainterpathstroker"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpainterpathstroker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_255 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpair"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpair/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_256 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpalette"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpalette/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_257 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qparallelanimationgroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qparallelanimationgroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_258 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpassworddigestor"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpassworddigestor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_259 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpauseanimation"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpauseanimation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_260 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpdfwriter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpdfwriter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_261 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpen"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_262 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpicture"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpicture/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_263 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpixelformat"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpixelformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_264 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpixmap"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpixmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_55 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qpixmapfilter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpixmapfilter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_265 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qplaintextedit"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qplaintextedit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_266 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qplugin"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qplugin/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_267 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpluginloader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpluginloader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_268 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpoint"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpoint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_269 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpointer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_56 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qpointf"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpointf/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_57 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qpolygon"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpolygon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_270 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprintdevice"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprintdevice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_58 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qprinter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprinter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_271 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprinterinfo"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprinterinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_272 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprocess"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprocess/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_59 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qprocess_and_guieventloop"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprocess_and_guieventloop/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_273 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprocessenvironment"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprocessenvironment/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_274 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprogressbar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprogressbar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_275 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qprogressdialog"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qprogressdialog/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_276 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpropertyanimation"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpropertyanimation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_277 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qpushbutton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qpushbutton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_278 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qquaternion"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qquaternion/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_279 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qqueue"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qqueue/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_280 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qradiobutton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qradiobutton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_281 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qrand"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrand/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_60 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qrandomgenerator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrandomgenerator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_282 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qrasterwindow"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrasterwindow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_283 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qrawfont"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrawfont/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_284 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qreadlocker"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qreadlocker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_285 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qreadwritelock"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qreadwritelock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_286 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qrect"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrect/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_287 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qregexp"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qregexp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_288 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qregexpvalidator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qregexpvalidator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_289 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qregion"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qregion/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_290 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qregularexpression"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qregularexpression/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_291 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qregularexpressionvalidator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qregularexpressionvalidator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_292 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qresourceengine"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qresourceengine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_61 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qresultstore"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qresultstore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_293 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qrhi"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qrhi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_294 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qringbuffer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qringbuffer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_295 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsavefile"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsavefile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_296 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscopedpointer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscopedpointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_62 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qscopedvaluerollback"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscopedvaluerollback/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_297 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscopeguard"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscopeguard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_298 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscreen"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscreen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_299 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscrollarea"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscrollarea/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_300 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscrollbar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscrollbar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_301 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qscroller"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qscroller/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_302 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsemaphore"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsemaphore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_63 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsequentialanimationgroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsequentialanimationgroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_64 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qset"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_303 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsettings"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsettings/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_304 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qshader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_65 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qshadergenerator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshadergenerator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_305 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qshadergraph"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshadergraph/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_66 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qshadergraphloader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshadergraphloader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_306 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qshadernodes"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshadernodes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_67 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qshadernodesloader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshadernodesloader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_68 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsharedpointer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsharedpointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_307 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsharedpointer_and_qwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsharedpointer_and_qwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_69 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qshortcut"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qshortcut/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_308 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsignalblocker"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsignalblocker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_309 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsignalmapper"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsignalmapper/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_70 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsignalspy"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsignalspy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_310 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsize"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_311 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsizef"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsizef/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_312 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsizegrip"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsizegrip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_313 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsizepolicy"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsizepolicy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_314 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qslider"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qslider/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_315 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsortfilterproxymodel_recursive"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsortfilterproxymodel_recursive/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_316 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsortfilterproxymodel_regexp"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsortfilterproxymodel_regexp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_317 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsortfilterproxymodel_regularexpression"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsortfilterproxymodel_regularexpression/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_318 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qspinbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qspinbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_319 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsplitter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsplitter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_320 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsql"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsql/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_321 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqldatabase"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqldatabase/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_71 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsqldriver"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqldriver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_322 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlerror"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlerror/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_323 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlfield"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlfield/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_72 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsqlquery"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlquery/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_324 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlquerymodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlquerymodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_325 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlrecord"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlrecord/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_73 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsqlrelationaldelegate"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlrelationaldelegate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_74 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsqlrelationaltablemodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlrelationaltablemodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_326 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlresult"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlresult/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_327 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqltablemodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqltablemodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_328 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsqlthread"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsqlthread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_329 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsslcertificate"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsslcertificate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_330 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsslcipher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsslcipher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_331 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsslellipticcurve"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsslellipticcurve/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_332 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsslerror"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsslerror/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_333 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsslkey"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsslkey/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_334 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstackedlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstackedlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_75 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qstackedwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstackedwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_335 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstandarditem"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstandarditem/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_336 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstandarditemmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstandarditemmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_337 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstandardpaths"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstandardpaths/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_338 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstate"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_339 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstatemachine"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstatemachine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_340 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstatictext"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstatictext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_341 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstatusbar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstatusbar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_342 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstl"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_343 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstorageinfo"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstorageinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_344 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstring"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstring/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_76 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qstring_no_cast_from_bytearray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstring_no_cast_from_bytearray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_345 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringapisymmetry"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringapisymmetry/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_346 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringbuilder1"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringbuilder1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_347 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringbuilder2"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringbuilder2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_348 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringbuilder3"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringbuilder3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_349 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringbuilder4"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringbuilder4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_350 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringiterator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringiterator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_351 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringlist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_352 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringlistmodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringlistmodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_353 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringmatcher"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringmatcher/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_354 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringref"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringref/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_355 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstringview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstringview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_356 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstyle"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstyle/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_357 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qstyleoption"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qstyleoption/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_358 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsurfaceformat"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsurfaceformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_359 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsyntaxhighlighter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsyntaxhighlighter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_360 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qsystemsemaphore"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsystemsemaphore/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_77 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qsystemtrayicon"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qsystemtrayicon/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_78 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtabbar"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtabbar/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_79 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtableview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtableview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_361 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtablewidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtablewidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_362 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtabwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtabwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_363 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtconcurrentfilter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentfilter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_364 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtconcurrentiteratekernel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentiteratekernel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_80 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtconcurrentmap"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentmap/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_365 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtconcurrentmedian"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentmedian/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_366 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtconcurrentrun"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentrun/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_367 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtconcurrentthreadengine"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtconcurrentthreadengine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_368 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtcpserver"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtcpserver/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_369 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtemporarydir"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtemporarydir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_370 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtemporaryfile"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtemporaryfile/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_371 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtendian"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtendian/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_372 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextblock"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_81 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtextboundaryfinder"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextboundaryfinder/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_373 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextbrowser"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextbrowser/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_374 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextcodec"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextcodec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_375 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextcursor"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextcursor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_376 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextdocument"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextdocument/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_377 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextdocumentfragment"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextdocumentfragment/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_378 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextdocumentlayout"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextdocumentlayout/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_379 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextformat"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_380 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextlist"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextlist/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_381 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextmarkdownimporter"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextmarkdownimporter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_382 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextobject"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextobject/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_383 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextscriptengine"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextscriptengine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_384 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtextstream"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtextstream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_385 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtexttable"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtexttable/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_386 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtexturefilereader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtexturefilereader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_387 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qthread"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qthread/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_388 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qthreadonce"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qthreadonce/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_389 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qthreadpool"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qthreadpool/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_82 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qthreadstorage"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qthreadstorage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_390 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtime"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_391 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtimeline"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtimeline/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_392 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtimer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtimer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_83 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtimezone"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtimezone/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_393 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtokenautomaton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtokenautomaton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_84 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtoolbox"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtoolbox/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_394 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtoolbutton"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtoolbutton/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_395 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtooltip"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtooltip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_396 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtouchevent"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtouchevent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_397 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtransform"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtransform/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_85 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtranslator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtranslator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_398 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtransposeproxymodel"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtransposeproxymodel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_399 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtreeview"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtreeview/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_400 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qtreewidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtreewidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_86 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qtreewidgetitemiterator"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qtreewidgetitemiterator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_401 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qudpsocket"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qudpsocket/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_402 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qundogroup"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qundogroup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_403 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qundostack"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qundostack/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_404 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qurl"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qurl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_405 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qurlquery"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qurlquery/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_87 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_quuid"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_quuid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_406 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qvariant"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvariant/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_407 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qvariantanimation"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvariantanimation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_408 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qvarlengtharray"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvarlengtharray/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_409 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qvector"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvector/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_410 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qvector_strictiterators"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvector_strictiterators/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_88 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qvectornd"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qvectornd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_411 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qversionnumber"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qversionnumber/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_412 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwaitcondition"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwaitcondition/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_413 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwidget"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwidget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_414 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwidget_window"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwidget_window/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_415 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwidgetaction"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwidgetaction/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_416 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwidgetmetatype"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwidgetmetatype/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_417 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwidgetsvariant"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwidgetsvariant/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_418 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwindow"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwindow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_419 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwindowcontainer"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwindowcontainer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_420 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwizard"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwizard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_421 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qwmatrix"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwmatrix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qt_89 {
    meta:
        app_name = "qt"
        type = "2"
        target = "tst_qwritelocker"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qwritelocker/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_422 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qxml"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qxml/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_423 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qxmlinputsource"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qxmlinputsource/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_424 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qxmlsimplereader"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qxmlsimplereader/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_425 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_qxmlstream"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_qxmlstream/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_426 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_selftests"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_selftests/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_427 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_spdy"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_spdy/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_428 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_utf8"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_utf8/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule qtbase_429 {
    meta:
        app_name = "qtbase"
        type = "2"
        target = "tst_xkbkeyboard"
        pattern = "qtbase/(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /qtbase\/(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tst_xkbkeyboard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_23 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "tstgettext"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tstgettext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_24 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "tstngettext"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tstngettext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_153 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tty"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tty/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_154 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "tty.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tty.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_46 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "tune2fs"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tune2fs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule e2fsprogs_47 {
    meta:
        app_name = "e2fsprogs"
        type = "2"
        target = "tune2fs.e2fsprogs"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tune2fs.e2fsprogs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_253 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "tunelp"
        pattern = "tunelp.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /tunelp.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tunelp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_254 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "tunelp"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /tunelp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_50 {
    meta:
        app_name = "perl"
        type = "1"
        target = "TW"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /TW.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_101 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "twofish-test"
        pattern = "nettle-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nettle-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /twofish-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_234 {
    meta:
        app_name = "glib"
        type = "2"
        target = "type"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /type/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_235 {
    meta:
        app_name = "glib"
        type = "2"
        target = "type-flags"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /type-flags/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_236 {
    meta:
        app_name = "glib"
        type = "2"
        target = "type-test"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /type-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_51 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Typemap"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Typemap.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_237 {
    meta:
        app_name = "glib"
        type = "2"
        target = "types"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /types/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_51 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiattach"
        pattern = "ubiattach.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubiattach.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiattach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_52 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiattach"
        pattern = "ubiattach version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubiattach version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiattach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_53 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiblock"
        pattern = "ubiblock.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubiblock.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_54 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiblock"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiblock/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_55 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubicrc32"
        pattern = "ubicrc32.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubicrc32.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubicrc32/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_56 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubicrc32"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubicrc32/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_57 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubidetach"
        pattern = "ubidetach.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubidetach.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubidetach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_58 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubidetach"
        pattern = "ubidetach version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubidetach version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubidetach/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_59 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiformat"
        pattern = "ubiformat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubiformat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_60 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiformat"
        pattern = "ubiformat version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubiformat version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiformat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_61 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubimkvol"
        pattern = "ubimkvol.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubimkvol.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubimkvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_62 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubimkvol"
        pattern = "ubimkvol version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubimkvol version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubimkvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_63 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubinfo"
        pattern = "ubinfo.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubinfo.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_64 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubinfo"
        pattern = "ubinfo version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubinfo version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_65 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubinize"
        pattern = "ubinize.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubinize.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubinize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_66 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubinize"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubinize/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_67 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubirename"
        pattern = "ubirename.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubirename.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubirename/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_68 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubirmvol"
        pattern = "ubirmvol.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubirmvol.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubirmvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_69 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubirmvol"
        pattern = "ubirmvol version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubirmvol version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubirmvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_70 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubirsvol"
        pattern = "ubirsvol.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubirsvol.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubirsvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_71 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubirsvol"
        pattern = "ubirsvol version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubirsvol version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubirsvol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_72 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiupdatevol"
        pattern = "ubiupdatevol.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ubiupdatevol.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiupdatevol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mtd_utils_73 {
    meta:
        app_name = "mtd-utils"
        type = "2"
        target = "ubiupdatevol"
        pattern = "ubiupdatevol version (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ubiupdatevol version (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ubiupdatevol/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_255 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uclampset"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uclampset/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule international_components_for_unicode_4 {
    meta:
        app_name = "international_components_for_unicode"
        type = "2"
        target = "uconv"
        pattern = "ICU (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /ICU (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uconv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_180 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "udevadm"
        pattern = "udevadm.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /udevadm.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /udevadm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_181 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "udevadm"
        pattern = "^([0-9]+(\\.[0-9]+)*)"

    strings:
        $pattern = /([0-9]{1,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /udevadm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule udisks {
    meta:
        app_name = "udisks"
        type = "2"
        target = "udisksd"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /udisksd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_689 {
    meta:
        app_name = "strace"
        type = "2"
        target = "uio"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uio/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_181 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "uitest"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uitest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_256 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ul"
        pattern = "ul.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /ul.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ul/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_257 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "ul"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ul/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libfuse_2 {
    meta:
        app_name = "libfuse"
        type = "2"
        target = "ulockmgr_server"
        pattern = "fuse-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /fuse-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /ulockmgr_server/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_102 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "umac-test"
        pattern = "nettle-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /nettle-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umac-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_258 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "umount"
        pattern = "umount.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /umount.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_259 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "umount"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umount/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_260 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "umount.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umount.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_690 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umount2"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umount2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_691 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umovestr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umovestr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_692 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umovestr2"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umovestr2/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_693 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umovestr3"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umovestr3/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_694 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umovestr_cached"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umovestr_cached/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_695 {
    meta:
        app_name = "strace"
        type = "2"
        target = "umovestr_cached_adjacent"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /umovestr_cached_adjacent/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_155 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "uname.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uname.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_696 {
    meta:
        app_name = "strace"
        type = "2"
        target = "unblock_reset_raise"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unblock_reset_raise/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_156 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "unexpand"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unexpand/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_157 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "unexpand.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unexpand.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_238 {
    meta:
        app_name = "glib"
        type = "2"
        target = "unicode"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unicode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_52 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Unicode"
        pattern = "v([0-9]\\.[0-9]+(\\.[0-9]+)?)$"

    strings:
        $pattern = /v([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Unicode.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_30 {
    meta:
        app_name = "python"
        type = "1"
        target = "unicodedata.cpython-38-aarch64-linux-gnu"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unicodedata.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_158 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "uniq"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uniq/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_159 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "uniq.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uniq.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_239 {
    meta:
        app_name = "glib"
        type = "2"
        target = "unix"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_240 {
    meta:
        app_name = "glib"
        type = "2"
        target = "unix-fd"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix-fd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_241 {
    meta:
        app_name = "glib"
        type = "2"
        target = "unix-mounts"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix-mounts/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_697 {
    meta:
        app_name = "strace"
        type = "2"
        target = "unix-pair-send-recv"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix-pair-send-recv/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_698 {
    meta:
        app_name = "strace"
        type = "2"
        target = "unix-pair-sendto-recvfrom"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix-pair-sendto-recvfrom/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_242 {
    meta:
        app_name = "glib"
        type = "2"
        target = "unix-streams"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix-streams/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_49 {
    meta:
        app_name = "pam"
        type = "2"
        target = "unix2_chkpwd"
        pattern = "unix2_chkpwd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /unix2_chkpwd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix2_chkpwd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_50 {
    meta:
        app_name = "pam"
        type = "2"
        target = "unix_chkpwd"
        pattern = "unix_chkpwd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /unix_chkpwd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix_chkpwd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_51 {
    meta:
        app_name = "pam"
        type = "2"
        target = "unix_update"
        pattern = "unix_update.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /unix_update.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unix_update/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_160 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "unlink.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unlink.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_699 {
    meta:
        app_name = "strace"
        type = "2"
        target = "unlinkat"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unlinkat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_261 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "unshare"
        pattern = "unshare.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /unshare.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unshare/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_262 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "unshare"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unshare/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_263 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "unshare.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unshare.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_110 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "unstrip"
        pattern = "elfutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /elfutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /unstrip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_182 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "upcallstest"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /upcallstest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule pam_52 {
    meta:
        app_name = "pam"
        type = "2"
        target = "upperLOWER"
        pattern = "upperLOWER.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /upperLOWER.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /upperLOWER/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_161 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "uptime"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uptime/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_162 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "uptime.coreutils"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uptime.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_26 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "uptime.procps"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uptime.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_243 {
    meta:
        app_name = "glib"
        type = "2"
        target = "uri"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uri/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_25 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "urlget"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /urlget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_183 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "user_property_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /user_property_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_46 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "useradd"
        pattern = "useradd.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /useradd.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /useradd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_47 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "useradd"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /useradd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_48 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "userdel"
        pattern = "userdel.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /userdel.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /userdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_49 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "userdel"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /userdel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_700 {
    meta:
        app_name = "strace"
        type = "2"
        target = "userfaultfd"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /userfaultfd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_50 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "usermod"
        pattern = "usermod.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /usermod.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /usermod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_51 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "usermod"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /usermod/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_163 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "users"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /users/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_164 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "users.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /users.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_10 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "usleep"
        pattern = "usleep.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /usleep.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /usleep/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule utempter_1 {
    meta:
        app_name = "utempter"
        type = "2"
        target = "utempter"
        pattern = "utempter.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /utempter.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utempter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_244 {
    meta:
        app_name = "glib"
        type = "2"
        target = "utf8-misc"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utf8-misc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_245 {
    meta:
        app_name = "glib"
        type = "2"
        target = "utf8-pointer"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utf8-pointer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_246 {
    meta:
        app_name = "glib"
        type = "2"
        target = "utf8-validate"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utf8-validate/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_53 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Util"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Util.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_247 {
    meta:
        app_name = "glib"
        type = "2"
        target = "utils"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_701 {
    meta:
        app_name = "strace"
        type = "2"
        target = "utimensat"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utimensat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_702 {
    meta:
        app_name = "strace"
        type = "2"
        target = "utimensat-Xabbrev"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utimensat-Xabbrev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_703 {
    meta:
        app_name = "strace"
        type = "2"
        target = "utimensat-Xraw"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utimensat-Xraw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_704 {
    meta:
        app_name = "strace"
        type = "2"
        target = "utimensat-Xverbose"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utimensat-Xverbose/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_264 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "utmpdump"
        pattern = "utmpdump.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /utmpdump.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utmpdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_265 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "utmpdump"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utmpdump/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_266 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "utmpdump.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /utmpdump.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_267 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidd"
        pattern = "util-linux-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_268 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidgen"
        pattern = "uuidgen.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /uuidgen.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_269 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidgen"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidgen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_270 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidgen.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidgen.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_271 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidparse"
        pattern = "uuidparse.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /uuidparse.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidparse/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_272 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "uuidparse"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /uuidparse/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_27 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "v3d_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /v3d_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_184 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "v3ext"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /v3ext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_185 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "v3nametest"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /v3nametest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule systemd_182 {
    meta:
        app_name = "systemd"
        type = "2"
        target = "v4l_id"
        pattern = "v4l_id.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /v4l_id.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /v4l_id/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_5 {
    meta:
        app_name = "vala"
        type = "2"
        target = "valac-0.46"
        pattern = "vala-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /vala-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /valac-0.46/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_6 {
    meta:
        app_name = "vala"
        type = "2"
        target = "valac-0.56"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /valac-0.56/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule valgrind_11 {
    meta:
        app_name = "valgrind"
        type = "2"
        target = "valgrind"
        pattern = "valgrind-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /valgrind-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /valgrind/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule ust_30 {
    meta:
        app_name = "ust"
        type = "2"
        target = "validate_xml"
        pattern = "lttng-tools-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /lttng-tools-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /validate_xml/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_248 {
    meta:
        app_name = "glib"
        type = "2"
        target = "value"
        pattern = "glib-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /glib-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /value/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_7 {
    meta:
        app_name = "vala"
        type = "2"
        target = "vapigen-0.46"
        pattern = "vala-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /vala-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vapigen-0.46/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vala_8 {
    meta:
        app_name = "vala"
        type = "2"
        target = "vapigen-0.56"
        pattern = "(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vapigen-0.56/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_111 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "varlocs"
        pattern = "elfutils-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /elfutils-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /varlocs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_28 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "vc4_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vc4_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_165 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "vdir"
        pattern = "coreutils-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /coreutils-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vdir/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_166 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "vdir.coreutils"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vdir.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule elfutils_112 {
    meta:
        app_name = "elfutils"
        type = "2"
        target = "vdsosyms"
        pattern = "elfutils-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /elfutils-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vdsosyms/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_40 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "vercheck"
        pattern = "^(4\\.[^0][0-9]*(\\.[0-9]+)*)$"

    strings:
        $pattern = /(4\.[0][0-9]{0,4}(\.[0-9]{1,4})*)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vercheck/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_186 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "verify_extra_test"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /verify_extra_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule cryptsetup_5 {
    meta:
        app_name = "cryptsetup"
        type = "2"
        target = "veritysetup"
        pattern = "([0-9]\\.[0-9]+(\\.[0-9]+))"

    strings:
        $pattern = /([0-9]\.[0-9]{1,4}(\.[0-9]{1,4}))/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /veritysetup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_103 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "version-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /version-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_705 {
    meta:
        app_name = "strace"
        type = "2"
        target = "vfork-f"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vfork-f/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_249 {
    meta:
        app_name = "glib"
        type = "2"
        target = "vfs"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vfs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sysvinit_11 {
    meta:
        app_name = "sysvinit"
        type = "2"
        target = "vhangup"
        pattern = "vhangup.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /vhangup.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vhangup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_706 {
    meta:
        app_name = "strace"
        type = "2"
        target = "vhangup"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vhangup/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_54 {
    meta:
        app_name = "perl"
        type = "1"
        target = "via"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /via.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vim {
    meta:
        app_name = "vim"
        type = "2"
        target = "vim"
        pattern = "^([0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vim/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vim_1 {
    meta:
        app_name = "vim"
        type = "2"
        target = "vim.vim"
        pattern = "Vi IMproved (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Vi IMproved (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vim.vim/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_52 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "vipw"
        pattern = "vipw.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /vipw.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vipw/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule shadow_53 {
    meta:
        app_name = "shadow"
        type = "2"
        target = "vipw.shadow"
        pattern = "shadow-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /shadow-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vipw.shadow/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_29 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "virtio_gpu_dri"
        pattern = "mesa-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /mesa-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /virtio_gpu_dri.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule sudo_9 {
    meta:
        app_name = "sudo"
        type = "2"
        target = "visudo"
        pattern = "sudo-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /sudo-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /visudo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kbd_55 {
    meta:
        app_name = "kbd"
        type = "2"
        target = "vlock.kbd"
        pattern = "kbd (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /kbd (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vlock.kbd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule kexec_tools_2 {
    meta:
        app_name = "kexec-tools"
        type = "2"
        target = "vmcore-dmesg"
        pattern = "vmcore-dmesg.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /vmcore-dmesg.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vmcore-dmesg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_707 {
    meta:
        app_name = "strace"
        type = "2"
        target = "vmsplice"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vmsplice/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_27 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "vmstat"
        pattern = "vmstat.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /vmstat.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vmstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_28 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "vmstat"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vmstat/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_250 {
    meta:
        app_name = "glib"
        type = "2"
        target = "volumemonitor"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /volumemonitor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule vsftpd {
    meta:
        app_name = "vsftpd"
        type = "2"
        target = "vsftpd"
        pattern = "\\(vsFTPd ([0-9]+\\.[0-9]+\\.[0-9]+)\\)"

    strings:
        $pattern = /\(vsFTPd ([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})\)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vsftpd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule mesa_30 {
    meta:
        app_name = "mesa"
        type = "1"
        target = "vulkan.rpi4"
        pattern = "([0-9]+\\.[0-9]+\\.[0-9]+)$"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /vulkan.rpi4.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_29 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "w"
        pattern = "w.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /w.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /w/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_30 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "w"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /w/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_31 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "w.procps"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /w.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_708 {
    meta:
        app_name = "strace"
        type = "2"
        target = "wait4"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wait4/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_709 {
    meta:
        app_name = "strace"
        type = "2"
        target = "wait4-v"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wait4-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_710 {
    meta:
        app_name = "strace"
        type = "2"
        target = "waitid"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /waitid/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_711 {
    meta:
        app_name = "strace"
        type = "2"
        target = "waitid-v"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /waitid-v/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_273 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wall"
        pattern = "wall.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /wall.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_274 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wall"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wall/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_275 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wall.util-linux"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wall.util-linux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_32 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "watch"
        pattern = "watch.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /watch.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /watch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_33 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "watch"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /watch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule procps_ng_34 {
    meta:
        app_name = "procps-ng"
        type = "2"
        target = "watch.procps"
        pattern = "procps-ng ([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /procps-ng ([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /watch.procps/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gnupg_26 {
    meta:
        app_name = "gnupg"
        type = "2"
        target = "watchgnupg"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /watchgnupg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_13 {
    meta:
        app_name = "weston"
        type = "1"
        target = "wayland-backend"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wayland-backend.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wayland_20 {
    meta:
        app_name = "wayland"
        type = "2"
        target = "wayland-scanner"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wayland-scanner/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_167 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "wc.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wc.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_14 {
    meta:
        app_name = "weston"
        type = "2"
        target = "wcap-decode"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wcap-decode/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_276 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wdctl"
        pattern = "wdctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /wdctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wdctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_277 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wdctl"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wdctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_9 {
    meta:
        app_name = "connman"
        type = "2"
        target = "web-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /web-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_15 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston"
        pattern = "weston[ \\.](([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston[ \.](([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_16 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-billboard"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-billboard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_17 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-byoc-shell-user-interface"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-byoc-shell-user-interface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_18 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-calibrator"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-calibrator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_19 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-clickdot"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-clickdot/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_20 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-cliptest"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-cliptest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_21 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-confine"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-confine/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_22 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-content_protection"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-content_protection/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_23 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-debug"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-debug/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_24 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-desktop-shell"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-desktop-shell/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_25 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-dnd"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-dnd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_26 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-editor"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-editor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_27 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-eventdemo"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-eventdemo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_28 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-flower"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-flower/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_29 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-fullscreen"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-fullscreen/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_30 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-image"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-image/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_31 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-info"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-info/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_32 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-ivi-shell-user-interface"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-ivi-shell-user-interface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_33 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-key-indicator"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-key-indicator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_34 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-keyboard"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-keyboard/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_35 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-kiosk-shell-user-interface"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-kiosk-shell-user-interface/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_36 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-launch"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-launch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_37 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-loading-spinner"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-loading-spinner/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_38 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-multi-resource"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-multi-resource/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_39 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-notify-panel"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-notify-panel/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_40 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-presentation-shm"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-presentation-shm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_41 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-resizor"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-resizor/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_42 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-scaler"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-scaler/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_43 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-screenshooter"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-screenshooter/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_44 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-configure-mtk"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-configure-mtk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_45 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-damage"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-damage/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_46 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-dmabuf-drm"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-dmabuf-drm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_47 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-dmabuf-egl"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-dmabuf-egl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_48 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-dmabuf-feedback"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-dmabuf-feedback/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_49 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-dmabuf-v4l"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-dmabuf-v4l/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_50 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-egl"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-egl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_51 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-screenshooter-mtk"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-screenshooter-mtk/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_52 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-shm"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-shm/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_53 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-simple-touch"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-simple-touch/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_54 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-smoke"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-smoke/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_55 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-stacking"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-stacking/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_56 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-subsurfaces"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-subsurfaces/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_57 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-terminal"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-terminal/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_58 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-touch-calibrator"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-touch-calibrator/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule weston_59 {
    meta:
        app_name = "weston"
        type = "2"
        target = "weston-transformed"
        pattern = "weston-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /weston-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /weston-transformed/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wget {
    meta:
        app_name = "wget"
        type = "2"
        target = "wget"
        pattern = "^([0-9]+\\.[0-9]+\\.?[0-9]*)"

    strings:
        $pattern = /([0-9]{1,4}\.[0-9]{1,4}\.?[0-9]{0,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wget/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_278 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "whereis"
        pattern = "whereis.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /whereis.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /whereis/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_279 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "whereis"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /whereis/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_168 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "who"
        pattern = "coreutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /coreutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /who/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_169 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "who.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /who.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_170 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "whoami"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /whoami/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_171 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "whoami.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /whoami.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule glib_251 {
    meta:
        app_name = "glib"
        type = "2"
        target = "win32-appinfo"
        pattern = "glib-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /glib-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /win32-appinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_280 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wipefs"
        pattern = "wipefs.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /wipefs.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wipefs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_281 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "wipefs"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wipefs/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_10 {
    meta:
        app_name = "connman"
        type = "2"
        target = "wispr"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wispr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wpa_supplicant_1 {
    meta:
        app_name = "wpa_supplicant"
        type = "2"
        target = "wpa_cli"
        pattern = "wpa_cli v(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /wpa_cli v(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wpa_cli/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wpa_supplicant_2 {
    meta:
        app_name = "wpa_supplicant"
        type = "2"
        target = "wpa_supplicant"
        pattern = "wpa_supplicant v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wpa_supplicant v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wpa_supplicant/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule wpa_supplicant_3 {
    meta:
        app_name = "wpa_supplicant"
        type = "2"
        target = "wpa_supplicant_cypress"
        pattern = "wpa_supplicant v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /wpa_supplicant v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wpa_supplicant_cypress/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_187 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "wpackettest"
        pattern = "openssl-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /openssl-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wpackettest/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule connman_11 {
    meta:
        app_name = "connman"
        type = "2"
        target = "wpad-test"
        pattern = "connman-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /connman-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /wpad-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_282 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "write"
        pattern = "write.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /write.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_283 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "write"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /write/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule netscape_portable_runtime_41 {
    meta:
        app_name = "netscape_portable_runtime"
        type = "2"
        target = "writev"
        pattern = "nspr-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nspr-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /writev/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_188 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509-test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_189 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509_check_cert_pkey_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509_check_cert_pkey_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_190 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509_dup_cert_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509_dup_cert_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_191 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509_internal_test"
        pattern = "[Oo]pen[Ss][Ss][Ll].(([0-9]+\\.){1,}[0-9]+[a-z]*(-[0-9]+)?)"

    strings:
        $pattern = /[Oo]pen[Ss][Ss][Ll].(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]*(-[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509_internal_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_192 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509_time_test"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509_time_test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule openssl_193 {
    meta:
        app_name = "openssl"
        type = "2"
        target = "x509aux"
        pattern = "openssl-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /openssl-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x509aux/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_104 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "x86-ibt-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /x86-ibt-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule findutils_3 {
    meta:
        app_name = "findutils"
        type = "2"
        target = "xargs.findutils"
        pattern = "findutils-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /findutils-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xargs.findutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_712 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xattr"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xattr/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_713 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xattr-strings"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xattr-strings/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_714 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xet_robust_list"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xet_robust_list/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_715 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xet_robust_list--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xet_robust_list--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_716 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xetitimer"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xetitimer/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_717 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xetpgid--pidns-translation"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xetpgid--pidns-translation/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_718 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xetpriority"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xetpriority/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_719 {
    meta:
        app_name = "strace"
        type = "2"
        target = "xettimeofday"
        pattern = "strace-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /strace-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xettimeofday/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strongswan_66 {
    meta:
        app_name = "strongswan"
        type = "2"
        target = "xfrmi"
        pattern = "xfrmi.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /xfrmi.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xfrmi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule gettext_26 {
    meta:
        app_name = "gettext"
        type = "2"
        target = "xgettext"
        pattern = "gettext-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /gettext-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xgettext/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libxml2_2 {
    meta:
        app_name = "libxml2"
        type = "2"
        target = "xmllint"
        pattern = "libxml2-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libxml2-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xmllint/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xmlsec {
    meta:
        app_name = "xmlsec"
        type = "2"
        target = "xmlsec1"
        pattern = "^(([0-9]+\\.){2,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){2,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xmlsec1/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xorg_server_2 {
    meta:
        app_name = "xorg-server"
        type = "2"
        target = "Xorg"
        pattern = "xorg-server-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xorg-server-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Xorg/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xpc_syscore {
    meta:
        app_name = "xpc_syscore"
        type = "2"
        target = "xpc_syscore.ko"
        pattern = "xpc_syscore.ko.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /xpc_syscore.ko.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xpc_syscore.ko/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_111 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "xtables-legacy-multi"
        pattern = "xtables-legacy-multi.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /xtables-legacy-multi.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xtables-legacy-multi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_112 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "xtables-legacy-multi"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xtables-legacy-multi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_113 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "xtables-multi"
        pattern = "(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xtables-multi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_114 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "xtables-nft-multi"
        pattern = "xtables-nft-multi.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /xtables-nft-multi.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xtables-nft-multi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule iptables_115 {
    meta:
        app_name = "iptables"
        type = "2"
        target = "xtables-nft-multi"
        pattern = "(([0-9]+\\.){2}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){2}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xtables-nft-multi/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_105 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "xts-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xts-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xorg_server_3 {
    meta:
        app_name = "xorg-server"
        type = "2"
        target = "Xwayland"
        pattern = "xorg-server-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xorg-server-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Xwayland/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_4 {
    meta:
        app_name = "xz"
        type = "2"
        target = "xz"
        pattern = "xz \\(XZ Utils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xz \(XZ Utils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_5 {
    meta:
        app_name = "xz"
        type = "2"
        target = "xz.xz"
        pattern = "xz \\(XZ Utils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xz \(XZ Utils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xz.xz/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule xz_6 {
    meta:
        app_name = "xz"
        type = "2"
        target = "xzdec"
        pattern = "xzdec \\(XZ Utils\\) (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /xzdec \(XZ Utils\) (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /xzdec/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule nettle_106 {
    meta:
        app_name = "nettle"
        type = "2"
        target = "yarrow-test"
        pattern = "nettle-(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /nettle-(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /yarrow-test/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libgpg_error_3 {
    meta:
        app_name = "libgpg-error"
        type = "2"
        target = "yat2m"
        pattern = "libgpg-error-(([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /libgpg-error-(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /yat2m/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_172 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "yes"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /yes/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule coreutils_173 {
    meta:
        app_name = "coreutils"
        type = "2"
        target = "yes.coreutils"
        pattern = "^(([0-9]+\\.){1,}[0-9]+[a-z]?)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /yes.coreutils/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule strace_720 {
    meta:
        app_name = "strace"
        type = "2"
        target = "zeroargc"
        pattern = "strace-([0-9]\\.[0-9]+(\\.[0-9]+)?)"

    strings:
        $pattern = /strace-([0-9]\.[0-9]{1,4}(\.[0-9]{1,4})?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zeroargc/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zip {
    meta:
        app_name = "zip"
        type = "2"
        target = "zip"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zip/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zip_1 {
    meta:
        app_name = "zip"
        type = "2"
        target = "zipcloak"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipcloak/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libzip_1 {
    meta:
        app_name = "libzip"
        type = "2"
        target = "zipcmp"
        pattern = "libzip (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libzip (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipcmp/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zip_2 {
    meta:
        app_name = "zip"
        type = "2"
        target = "zipinfo"
        pattern = "Zip (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /Zip (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipinfo/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule libzip_2 {
    meta:
        app_name = "libzip"
        type = "2"
        target = "zipmerge"
        pattern = "libzip (([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /libzip (([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipmerge/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".data") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zip_3 {
    meta:
        app_name = "zip"
        type = "2"
        target = "zipnote"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipnote/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zip_4 {
    meta:
        app_name = "zip"
        type = "2"
        target = "zipsplit"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zipsplit/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zlib_5 {
    meta:
        app_name = "zlib"
        type = "1"
        target = "zlib"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zlib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule perl_55 {
    meta:
        app_name = "perl"
        type = "1"
        target = "Zlib"
        pattern = "v(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /v(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /Zlib.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule python_31 {
    meta:
        app_name = "python"
        type = "1"
        target = "zlib.cpython-38-aarch64-linux-gnu"
        pattern = "^(([0-9]+\\.){1,}[0-9]+)$"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zlib.cpython-38-aarch64-linux-gnu.so(\.\d+)*/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_284 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "zramctl"
        pattern = "zramctl.*?-([0-9Vv]([^-]{1,30}))-"

    strings:
        $pattern = /zramctl.*?-([0-9Vv]([-]{1,30}))-/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zramctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".gnu_debuglink") and $pattern in (section.offset..(section.offset + section.size)))
}


rule util_linux_285 {
    meta:
        app_name = "util-linux"
        type = "2"
        target = "zramctl"
        pattern = "util-linux (([0-9]+\\.){1,}[0-9]+[a-z]?)"

    strings:
        $pattern = /util-linux (([0-9]{1,4}\.){1,}[0-9]{1,4}[a-z]?)/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zramctl/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}


rule zstandard_2 {
    meta:
        app_name = "zstandard"
        type = "2"
        target = "zstd"
        pattern = "(([0-9]+\\.){1,}[0-9]+)"

    strings:
        $pattern = /(([0-9]{1,4}\.){1,}[0-9]{1,4})/ 
		$elf_header = {7F 45 4C 46}
        
    condition:
        filename matches /zstd/ and
		$elf_header at 0 and
        for any section in elf.sections: ((section.name == ".rodata") and $pattern in (section.offset..(section.offset + section.size)))
}

